{ "metadata": { "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.1", "generated_at": "2023-02-01T20:32:50.491199Z", "invocation_id": "a4367d8c-35e6-40e9-b7f8-7a9471e495ef", "env": { "DBT_CLOUD_PROJECT_ID": "88168", "DBT_CLOUD_RUN_ID": "118820234", "DBT_CLOUD_JOB_ID": "128558", "DBT_CLOUD_RUN_REASON": "Merging code to main", "DBT_CLOUD_RUN_REASON_CATEGORY": "other" }, "project_id": "8330e1b1d54365ea716dbeca47bf2cf6", "user_id": "fd7141b1-ca57-4d5d-bbcf-c28532b2da5a", "send_anonymous_usage_stats": true, "adapter_type": "snowflake" }, "nodes": { "model.tpch.get_area_of_circle": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "get_area_of_circle", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/get_area_of_circle.sql", "original_file_path": "models/demo_examples/get_area_of_circle.sql", "unique_id": "model.tpch.get_area_of_circle", "fqn": [ "tpch", "demo_examples", "get_area_of_circle" ], "alias": "get_area_of_circle", "checksum": { "name": "sha256", "checksum": "3596e6223f2cff36ab79977e5f1370e50ddc59e7f0974ec9554b75fcf8e87c52" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "demo to show udfs", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4063861, "relation_name": "DOUG_DEMO_V2.ANALYTICS.get_area_of_circle", "raw_code": "SELECT area_of_circle(1.0) AS area", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null }, "model.tpch.materialization_incremental": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "materialization_incremental", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/materialization_incremental.sql", "original_file_path": "models/demo_examples/materialization_incremental.sql", "unique_id": "model.tpch.materialization_incremental", "fqn": [ "tpch", "demo_examples", "materialization_incremental" ], "alias": "materialization_incremental", "checksum": { "name": "sha256", "checksum": "2921d9e7dcbf49d7fb31b020db2b9e3ce1fa88b418c833f40738c937d4f92cae" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "demo to show incremental model", "columns": { "customer_key": { "name": "customer_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental" }, "created_at": 1675283574.4043834, "relation_name": "DOUG_DEMO_V2.ANALYTICS.materialization_incremental", "raw_code": "{{ config(materialized='incremental') }}\n\nwith source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'customer') }}\n\n),\n\n\nrenamed as (\n\n select\n c_custkey as customer_key,\n c_name as name,\n c_address as address, \n c_nationkey as nation_key,\n c_phone as phone_number,\n c_acctbal as account_balance,\n c_mktsegment as market_segment,\n c_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed\n\n{% if is_incremental() %}\n -- this filter will only be applied on an incremental run\n where customer_key not in (select customer_key from {{this}} )\n\n{% endif %}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.is_incremental" ], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null }, "model.tpch.use_variables": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "use_variables", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/use_variables.sql", "original_file_path": "models/demo_examples/use_variables.sql", "unique_id": "model.tpch.use_variables", "fqn": [ "tpch", "demo_examples", "use_variables" ], "alias": "use_variables", "checksum": { "name": "sha256", "checksum": "2c9542a54b800a45ae4a6b5a0eee8e4609f5e15c9745aa48715872e6a4560b32" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "demo to show variables", "columns": { "order_item_key": { "name": "order_item_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4056928, "relation_name": "DOUG_DEMO_V2.ANALYTICS.use_variables", "raw_code": "-- This is here to show that data older than start_date exists - run this first\n-- select min(order_date) from {{ ref('fct_order_items') }}\n\n-- start_date is defined in the dbt_project.yml \n-- to illustrate overriding variables from the command line, run dbt run -m use_variables --vars '{\"start_date\": \"1996-01-01\"}'\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('fct_order_items') }} where order_date >= '{{ var(\"start_date\") }}'", "language": "sql", "refs": [ [ "fct_order_items" ], [ "fct_order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items", "model.tpch.fct_order_items" ] }, "compiled_path": null }, "model.tpch.stg_yahooquery__link_clicked": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_yahooquery__link_clicked", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/yahooquery/stg_yahooquery__link_clicked.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__link_clicked.sql", "unique_id": "model.tpch.stg_yahooquery__link_clicked", "fqn": [ "tpch", "staging", "segment", "yahooquery", "stg_yahooquery__link_clicked" ], "alias": "stg_yahooquery__link_clicked", "checksum": { "name": "sha256", "checksum": "ccb23ee9374cc58f406278fa4d1a449cc32af9c061c0f7d6730ceeb57b27f09c" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283573.2727077, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_yahooquery__link_clicked", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('yahooquery', 'link_clicked') }}\n\n),\n\nrenamed as (\n\n select\n id,\n original_timestamp,\n received_at,\n timestamp,\n anonymous_id,\n context_ip,\n context_user_agent,\n link,\n context_library_version,\n event,\n event_text,\n uuid_ts,\n context_page_title,\n context_page_url,\n sent_at,\n context_library_name,\n context_locale,\n context_page_path,\n context_page_referrer\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "compiled_path": null }, "model.tpch.stg_yahooquery__tracks": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_yahooquery__tracks", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/yahooquery/stg_yahooquery__tracks.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__tracks.sql", "unique_id": "model.tpch.stg_yahooquery__tracks", "fqn": [ "tpch", "staging", "segment", "yahooquery", "stg_yahooquery__tracks" ], "alias": "stg_yahooquery__tracks", "checksum": { "name": "sha256", "checksum": "960a4378102a02a712d82507f7824acfb5f0e103e5bdc1875460785a3e2bb584" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283573.2754734, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_yahooquery__tracks", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('yahooquery', 'tracks') }}\n\n),\n\nrenamed as (\n\n select\n event_text,\n context_library_version,\n context_page_referrer,\n context_page_url,\n event,\n context_ip,\n context_page_path,\n context_page_title,\n received_at,\n sent_at,\n timestamp,\n uuid_ts,\n context_locale,\n context_user_agent,\n id,\n original_timestamp,\n anonymous_id,\n context_library_name\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "compiled_path": null }, "model.tpch.stg_yahooquery__pages": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_yahooquery__pages", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/yahooquery/stg_yahooquery__pages.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__pages.sql", "unique_id": "model.tpch.stg_yahooquery__pages", "fqn": [ "tpch", "staging", "segment", "yahooquery", "stg_yahooquery__pages" ], "alias": "stg_yahooquery__pages", "checksum": { "name": "sha256", "checksum": "e22feec5240886ddc4717b48d5c71647c37dfa2a2a8537d024e69dbb24d22b20" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283573.278264, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_yahooquery__pages", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('yahooquery', 'pages') }}\n\n),\n\nrenamed as (\n\n select\n anonymous_id,\n context_locale,\n context_page_referrer,\n url,\n uuid_ts,\n context_library_name,\n context_library_version,\n id,\n received_at,\n title,\n context_page_title,\n path,\n referrer,\n timestamp,\n original_timestamp,\n sent_at,\n context_ip,\n context_page_path,\n context_page_url,\n context_user_agent,\n\n -- calculated\n {{ dbt_utils.get_url_host('url') }} as page_url_host,\n replace(\n {{ dbt_utils.get_url_host('referrer') }},\n 'www.',\n ''\n ) as referrer_host,\n {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n case\n when lower(context_user_agent) like '%android%' then 'Android'\n else replace(\n {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n ';', '')\n end as device,\n case\n when device = 'iPhone' then 'iPhone'\n when device = 'Android' then 'Android'\n when device in ('iPad', 'iPod') then 'Tablet'\n when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n else 'Uncategorized'\n end as device_category\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_parameter", "macro.dbt.split_part" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "compiled_path": null }, "model.tpch.stg_dbtc__tracks": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbtc__tracks", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/dbtc/stg_dbtc__tracks.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__tracks.sql", "unique_id": "model.tpch.stg_dbtc__tracks", "fqn": [ "tpch", "staging", "segment", "dbtc", "stg_dbtc__tracks" ], "alias": "stg_dbtc__tracks", "checksum": { "name": "sha256", "checksum": "0d1a293a81f079f7057e2f6eb4df3a1c5d0d26c1d010f3315b1384f89142aaae" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283573.308465, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbtc__tracks", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('dbtc', 'tracks') }}\n\n),\n\nrenamed as (\n\n select\n event_text,\n context_library_version,\n context_page_referrer,\n context_page_url,\n event,\n context_ip,\n context_page_path,\n context_page_title,\n received_at,\n sent_at,\n timestamp,\n uuid_ts,\n context_locale,\n context_user_agent,\n id,\n original_timestamp,\n anonymous_id,\n context_library_name\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.dbtc.tracks" ] }, "compiled_path": null }, "model.tpch.stg_dbtc__pages": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbtc__pages", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/dbtc/stg_dbtc__pages.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__pages.sql", "unique_id": "model.tpch.stg_dbtc__pages", "fqn": [ "tpch", "staging", "segment", "dbtc", "stg_dbtc__pages" ], "alias": "stg_dbtc__pages", "checksum": { "name": "sha256", "checksum": "85a2474eeb2f7444d654ec9b76b79717fd562534842fb58c20ad504a7c690f0e" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283573.3115327, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbtc__pages", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('dbtc', 'pages') }}\n\n),\n\nrenamed as (\n\n select\n anonymous_id,\n context_locale,\n context_page_referrer,\n url,\n uuid_ts,\n context_library_name,\n context_library_version,\n id,\n received_at,\n title,\n context_page_title,\n path,\n referrer,\n timestamp,\n original_timestamp,\n sent_at,\n context_ip,\n context_page_path,\n context_page_url,\n context_user_agent,\n\n -- calculated\n {{ dbt_utils.get_url_host('url') }} as page_url_host,\n replace(\n {{ dbt_utils.get_url_host('referrer') }},\n 'www.',\n ''\n ) as referrer_host,\n {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n case\n when lower(context_user_agent) like '%android%' then 'Android'\n else replace(\n {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n ';', '')\n end as device,\n case\n when device = 'iPhone' then 'iPhone'\n when device = 'Android' then 'Android'\n when device in ('iPad', 'iPod') then 'Tablet'\n when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n else 'Uncategorized'\n end as device_category\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_parameter", "macro.dbt.split_part" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "compiled_path": null }, "model.tpch.stg_dbtc__link_clicked": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbtc__link_clicked", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/dbtc/stg_dbtc__link_clicked.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__link_clicked.sql", "unique_id": "model.tpch.stg_dbtc__link_clicked", "fqn": [ "tpch", "staging", "segment", "dbtc", "stg_dbtc__link_clicked" ], "alias": "stg_dbtc__link_clicked", "checksum": { "name": "sha256", "checksum": "ba4a57664b958ff259a303983885fde946ca9fa6e50922612702b3619740e45e" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283573.3224869, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbtc__link_clicked", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('dbtc', 'link_clicked') }}\n\n),\n\nrenamed as (\n\n select\n id,\n original_timestamp,\n received_at,\n timestamp,\n anonymous_id,\n context_ip,\n context_user_agent,\n link,\n context_library_version,\n event,\n event_text,\n uuid_ts,\n context_page_title,\n context_page_url,\n sent_at,\n context_library_name,\n context_locale,\n context_page_path,\n context_page_referrer\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "compiled_path": null }, "model.tpch.stg_tpch_orders": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_orders", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_orders.sql", "original_file_path": "models/staging/tpch/stg_tpch_orders.sql", "unique_id": "model.tpch.stg_tpch_orders", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_orders" ], "alias": "stg_tpch_orders", "checksum": { "name": "sha256", "checksum": "d23aed43cfca1bd253f9b4a6eea76aae293f85e237b695dcdb7590ced8e0902d" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for orders data", "columns": { "order_key": { "name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key to stg_tpch_customers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_price": { "name": "total_price", "description": "raw price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date the order was made", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "priority_code": { "name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "clerk_name": { "name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_priority": { "name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283574.4666834, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_orders", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'orders') }}\n\n),\n\nrenamed as (\n\n select\n \n o_orderkey as order_key,\n o_custkey as customer_key,\n o_orderstatus as status_code,\n o_totalprice as total_price,\n o_orderdate as order_date,\n o_orderpriority as priority_code,\n o_clerk as clerk_name,\n o_shippriority as ship_priority,\n o_comment as comment\n\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.orders" ] }, "compiled_path": null }, "model.tpch.stg_tpch_part_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_part_suppliers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_part_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_part_suppliers.sql", "unique_id": "model.tpch.stg_tpch_part_suppliers", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_part_suppliers" ], "alias": "stg_tpch_part_suppliers", "checksum": { "name": "sha256", "checksum": "f2a838090c835c75407880f73e27690f1172894e567d069cd33661c373856b4f" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for suppliers data", "columns": { "part_supplier_key": { "name": "part_supplier_key", "description": "surrogate key for the model -- combo of ps_partkey + ps_suppkey", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key to stg_tpch_parts", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "available_quantity": { "name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "cost": { "name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] } }, "created_at": 1675283574.4727585, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_part_suppliers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'partsupp') }}\n\n),\n\nrenamed as (\n\n select\n \n {{ dbt_utils.surrogate_key(\n ['ps_partkey', \n 'ps_suppkey']) }} \n as part_supplier_key,\n ps_partkey as part_key,\n ps_suppkey as supplier_key,\n ps_availqty as available_quantity,\n ps_supplycost as cost,\n ps_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "partsupp" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.surrogate_key" ], "nodes": [ "source.tpch.tpch.partsupp" ] }, "compiled_path": null }, "model.tpch.stg_tpch_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_suppliers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_suppliers.sql", "unique_id": "model.tpch.stg_tpch_suppliers", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_suppliers" ], "alias": "stg_tpch_suppliers", "checksum": { "name": "sha256", "checksum": "39e217e9757437fcc72c0938f2729a5f5fec76f79d911f216377459f8890a766" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for suppliers data", "columns": { "supplier_key": { "name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] } }, "created_at": 1675283574.4869897, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_suppliers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'supplier') }}\n\n),\n\nrenamed as (\n\n select\n \n s_suppkey as supplier_key,\n s_name as supplier_name,\n s_address as supplier_address,\n s_nationkey as nation_key,\n s_phone as phone_number,\n s_acctbal as account_balance,\n s_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null }, "model.tpch.stg_tpch_line_items": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_line_items", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_line_items.sql", "original_file_path": "models/staging/tpch/stg_tpch_line_items.sql", "unique_id": "model.tpch.stg_tpch_line_items", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_line_items" ], "alias": "stg_tpch_line_items", "checksum": { "name": "sha256", "checksum": "a9d417cdc0e45c105f108e7f71b8711ba775b78b44f89a51bd8cfec914fba475" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for line items data", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key to stg_tpch_orders", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key to stg_tpch_part_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "extended_price": { "name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status code of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_instructions": { "name": "ship_instructions", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283574.456373, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_line_items", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'lineitem') }}\n\n),\n\nrenamed as (\n\n select\n \n {{ dbt_utils.surrogate_key(\n ['l_orderkey', \n 'l_linenumber']) }}\n as order_item_key,\n l_orderkey as order_key,\n l_partkey as part_key,\n l_suppkey as supplier_key,\n l_linenumber as line_number,\n l_quantity as quantity,\n l_extendedprice as extended_price,\n l_discount as discount_percentage,\n l_tax as tax_rate,\n l_returnflag as return_flag,\n l_linestatus as status_code,\n l_shipdate as ship_date,\n l_commitdate as commit_date,\n l_receiptdate as receipt_date,\n l_shipinstruct as ship_instructions,\n l_shipmode as ship_mode,\n l_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.surrogate_key" ], "nodes": [ "source.tpch.tpch.lineitem" ] }, "compiled_path": null }, "model.tpch.stg_tpch_customers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_customers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_customers.sql", "original_file_path": "models/staging/tpch/stg_tpch_customers.sql", "unique_id": "model.tpch.stg_tpch_customers", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_customers" ], "alias": "stg_tpch_customers", "checksum": { "name": "sha256", "checksum": "a0a7b20e3b34c3caa64f2ef26ae05aabc77bb8e1a9ed1211475f759024735696" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for customers data", "columns": { "customer_key": { "name": "customer_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "address": { "name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "total account balance from the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "market_segment": { "name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] } }, "created_at": 1675283574.4468448, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_customers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'customer') }}\n\n),\n\ncleanup as (\n\n select\n \n c_custkey as customer_key,\n c_name as name,\n c_address as address, \n c_nationkey as nation_key,\n c_phone as phone_number,\n c_acctbal as account_balance,\n c_mktsegment as market_segment,\n c_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from cleanup", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null }, "model.tpch.stg_tpch_nations": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_nations", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_nations.sql", "original_file_path": "models/staging/tpch/stg_tpch_nations.sql", "unique_id": "model.tpch.stg_tpch_nations", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_nations" ], "alias": "stg_tpch_nations", "checksum": { "name": "sha256", "checksum": "b864eb71cb7121aaa9324c726e4b731790d1051663f5d0800cc333984f469a07" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for nations data", "columns": { "nation_key": { "name": "nation_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "region_key": { "name": "region_key", "description": "foreign key to stg_tpch_regions", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] } }, "created_at": 1675283574.4612877, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_nations", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'nation') }}\n\n),\n\nrenamed as (\n\n select\n \n n_nationkey as nation_key,\n n_name as name,\n n_regionkey as region_key,\n n_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.nation" ] }, "compiled_path": null }, "model.tpch.stg_tpch_parts": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_parts", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_parts.sql", "original_file_path": "models/staging/tpch/stg_tpch_parts.sql", "unique_id": "model.tpch.stg_tpch_parts", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_parts" ], "alias": "stg_tpch_parts", "checksum": { "name": "sha256", "checksum": "8ffc7b305f598ea1db84ec708219e456b237e7de5e2048b3bb3efc4c230192ef" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for parts data", "columns": { "part_key": { "name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "type": { "name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "size": { "name": "size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283574.4779813, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_parts", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'part') }}\n\n),\n\nrenamed as (\n\n select\n \n p_partkey as part_key,\n p_name as name,\n p_mfgr as manufacturer,\n p_brand as brand,\n p_type as type,\n p_size as size,\n p_container as container,\n p_retailprice as retail_price,\n p_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null }, "model.tpch.stg_tpch_regions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_regions", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_regions.sql", "original_file_path": "models/staging/tpch/stg_tpch_regions.sql", "unique_id": "model.tpch.stg_tpch_regions", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_regions" ], "alias": "stg_tpch_regions", "checksum": { "name": "sha256", "checksum": "5c45bba024d6d0699e21c20e64896613725601f2f269a33888c66cf659937ca1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for regions data", "columns": { "region_key": { "name": "region_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view" }, "created_at": 1675283574.4803991, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_regions", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'region') }}\n\n),\n\nrenamed as (\n\n select\n r_regionkey as region_key,\n r_name as name,\n r_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null }, "model.tpch.dim_customers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_customers", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_customers.sql", "original_file_path": "models/marts/core/dim_customers.sql", "unique_id": "model.tpch.dim_customers", "fqn": [ "tpch", "marts", "core", "dim_customers" ], "alias": "dim_customers", "checksum": { "name": "sha256", "checksum": "dcf60af3e63cb41dc2d440386e06e108d2deb4a19da3df4d45d828f75a5e8da4" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Customer dimensions table", "columns": { "customer_key": { "name": "customer_key", "description": "Primary key on the customers table", "meta": { "metrics": { "total_unique_customers": { "type": "count" } } }, "data_type": null, "quote": null, "tags": [] }, "region": { "name": "region", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "address": { "name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation": { "name": "nation", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "market_segment": { "name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "transient": false }, "created_at": 1675283574.57169, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_customers", "raw_code": "{{\n config(\n materialized = 'table',\n transient=false\n )\n}}\n\nwith customer as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n select \n customer.customer_key,\n customer.name,\n customer.address,\n {# nation.nation_key as nation_key, #}\n nation.name as nation,\n {# region.region_key as region_key, #}\n region.name as region,\n customer.phone_number,\n customer.account_balance,\n customer.market_segment\n from\n customer\n inner join nation\n on customer.nation_key = nation.nation_key\n inner join region\n on nation.region_key = region.region_key\n)\nselect \n *\nfrom\n final\norder by\n customer_key", "language": "sql", "refs": [ [ "stg_tpch_customers" ], [ "stg_tpch_nations" ], [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ] }, "compiled_path": null }, "model.tpch.dim_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_suppliers", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_suppliers.sql", "original_file_path": "models/marts/core/dim_suppliers.sql", "unique_id": "model.tpch.dim_suppliers", "fqn": [ "tpch", "marts", "core", "dim_suppliers" ], "alias": "dim_suppliers", "checksum": { "name": "sha256", "checksum": "eb62e16e163c39fc7bd243f710c42674229767264b8ce909744234a7e96b6821" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Suppliers dimensions table", "columns": { "supplier_key": { "name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation": { "name": "nation", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "region": { "name": "region", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] } }, "created_at": 1675283574.5832653, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_suppliers", "raw_code": "{{\n config(\n materialized = 'table'\n )\n}}\n\nwith supplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n select \n supplier.supplier_key,\n supplier.supplier_name,\n supplier.supplier_address,\n nation.name as nation,\n region.name as region,\n supplier.phone_number,\n supplier.account_balance\n from\n supplier\n inner join nation\n on supplier.nation_key = nation.nation_key\n inner join region \n on nation.region_key = region.region_key\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "refs": [ [ "stg_tpch_suppliers" ], [ "stg_tpch_nations" ], [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ] }, "compiled_path": null }, "model.tpch.fct_order_items": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_order_items", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_order_items.sql", "original_file_path": "models/marts/core/fct_order_items.sql", "unique_id": "model.tpch.fct_order_items", "fqn": [ "tpch", "marts", "core", "fct_order_items" ], "alias": "fct_order_items", "checksum": { "name": "sha256", "checksum": "930cd392bd55cd77e3dd367b235d47190e54c880832e65610a412de97d6e0c89" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [ "finance" ], "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [ "finance" ], "description": "order items fact table", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key for orders", "meta": { "metrics": { "items_in_order": { "type": "count_distinct" } } }, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_item_status_code": { "name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_cost": { "name": "supplier_cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "base_price": { "name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discounted_price": { "name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_item_count": { "name": "order_item_count", "description": "count of order items", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": { "metrics": { "total_revenue": { "type": "sum", "show_underlying_values": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ] } } }, "data_type": null, "quote": null, "tags": [] }, "discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "tags": [ "finance" ] }, "created_at": 1675283574.6026888, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_order_items", "raw_code": "{{\n config(\n materialized = 'table',\n tags = ['finance']\n )\n}}\n\nwith order_item as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('order_items') }}\n\n),\n\npart_supplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('part_suppliers') }}\n\n),\n\nfinal as (\n select \n order_item.order_item_key,\n order_item.order_key,\n order_item.order_date,\n order_item.customer_key,\n order_item.part_key,\n order_item.supplier_key,\n order_item.order_item_status_code,\n order_item.return_flag,\n order_item.line_number,\n order_item.ship_date,\n order_item.commit_date,\n order_item.receipt_date,\n order_item.ship_mode,\n part_supplier.cost as supplier_cost,\n {# ps.retail_price, #}\n order_item.base_price,\n order_item.discount_percentage,\n order_item.discounted_price,\n order_item.tax_rate,\n \n 1 as order_item_count,\n order_item.quantity,\n order_item.gross_item_sales_amount,\n order_item.discounted_item_sales_amount,\n order_item.item_discount_amount,\n order_item.item_tax_amount,\n order_item.net_item_sales_amount\n\n from\n order_item\n inner join part_supplier\n on order_item.part_key = part_supplier.part_key and\n order_item.supplier_key = part_supplier.supplier_key\n)\nselect \n *\nfrom\n final\norder by\n order_date", "language": "sql", "refs": [ [ "order_items" ], [ "part_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.order_items", "model.tpch.part_suppliers" ] }, "compiled_path": null }, "model.tpch.fct_orders": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_orders", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders.sql", "original_file_path": "models/marts/core/fct_orders.sql", "unique_id": "model.tpch.fct_orders", "fqn": [ "tpch", "marts", "core", "fct_orders" ], "alias": "fct_orders", "checksum": { "name": "sha256", "checksum": "a9ba3c53318a11d59b0ceef8903e04323594006c1988c78bd4eb1aef915f2a6f" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [ "finance" ], "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [ "finance" ], "description": "orders fact table", "columns": { "order_key": { "name": "order_key", "description": "primary key of the model", "meta": { "metrics": { "total_orders": { "type": "sum" } } }, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": { "metrics": { "total_unique_customers": { "type": "count_distinct" } } }, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "priority_code": { "name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "clerk_name": { "name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_priority": { "name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_count": { "name": "order_count", "description": "count of order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "tags": [ "finance" ] }, "created_at": 1675283574.6128535, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_orders", "raw_code": "{{\n config(\n materialized = 'table',\n tags=['finance']\n )\n}}\n\n\nwith orders as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_orders') }}\n\n),\norder_item as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('order_items') }}\n\n),\norder_item_summary as (\n\n select \n order_key,\n sum(gross_item_sales_amount) as gross_item_sales_amount,\n sum(item_discount_amount) as item_discount_amount,\n sum(item_tax_amount) as item_tax_amount,\n sum(net_item_sales_amount) as net_item_sales_amount\n from order_item\n group by\n 1\n),\nfinal as (\n\n select \n\n orders.order_key, \n orders.order_date,\n orders.customer_key,\n orders.status_code,\n orders.priority_code,\n orders.clerk_name,\n orders.ship_priority,\n --\n 1 as order_count, \n order_item_summary.gross_item_sales_amount,\n order_item_summary.item_discount_amount,\n order_item_summary.item_tax_amount,\n order_item_summary.net_item_sales_amount\n from\n orders\n inner join order_item_summary\n on orders.order_key = order_item_summary.order_key\n)\nselect \n *\nfrom\n final\n\norder by\n order_date", "language": "sql", "refs": [ [ "stg_tpch_orders" ], [ "order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_orders", "model.tpch.order_items" ] }, "compiled_path": null }, "model.tpch.dim_parts": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_parts", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_parts.sql", "original_file_path": "models/marts/core/dim_parts.sql", "unique_id": "model.tpch.dim_parts", "fqn": [ "tpch", "marts", "core", "dim_parts" ], "alias": "dim_parts", "checksum": { "name": "sha256", "checksum": "d219372a8f9f61e7f76d160ba914834de7fc5883f1fdc81c03da59c08ad262ba" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Parts dimensions table", "columns": { "part_key": { "name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "type": { "name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "size": { "name": "size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table" }, "created_at": 1675283574.5764105, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_parts", "raw_code": "{{\n config(\n materialized = 'table'\n )\n}}\nwith part as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n select \n part_key,\n manufacturer,\n name,\n brand,\n type,\n size,\n container,\n retail_price\n from\n part\n)\nselect *\nfrom final \norder by part_key", "language": "sql", "refs": [ [ "stg_tpch_parts" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "compiled_path": null }, "model.tpch.int_segment__link_clicked": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "int_segment__link_clicked", "resource_type": "model", "package_name": "tpch", "path": "marts/marketing/int_segment__link_clicked.sql", "original_file_path": "models/marts/marketing/int_segment__link_clicked.sql", "unique_id": "model.tpch.int_segment__link_clicked", "fqn": [ "tpch", "marts", "marketing", "int_segment__link_clicked" ], "alias": "int_segment__link_clicked", "checksum": { "name": "sha256", "checksum": "a5b55e991cd8a95f7c974762d9ab25ef838612a0b12e6b7ae2b0d341ae444634" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/marketing/_models.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.744056, "relation_name": "DOUG_DEMO_V2.ANALYTICS.int_segment__link_clicked", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] %}\n\nwith\n\n{% for source in sources %}\n\n{{ source }}_source as (\n select\n id,\n original_timestamp,\n received_at,\n timestamp,\n anonymous_id,\n context_ip,\n context_user_agent,\n link,\n context_library_version,\n event,\n event_text,\n uuid_ts,\n context_page_title,\n context_page_url,\n sent_at,\n context_library_name,\n context_locale,\n context_page_path,\n context_page_referrer,\n '{{ source }}' as src\n\n from {{ ref('stg_' ~ source ~ '__link_clicked') }}\n),\n\n{% endfor %}\n\nunioned_sources as (\n {% for source in sources %}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source }}_source\n {% if not loop.last %}union all{% endif %}\n {% endfor %}\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned_sources", "language": "sql", "refs": [ [ "stg_dbtc__link_clicked" ], [ "stg_yahooquery__link_clicked" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_dbtc__link_clicked", "model.tpch.stg_yahooquery__link_clicked" ] }, "compiled_path": null }, "model.tpch.int_segment__pages": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "int_segment__pages", "resource_type": "model", "package_name": "tpch", "path": "marts/marketing/int_segment__pages.sql", "original_file_path": "models/marts/marketing/int_segment__pages.sql", "unique_id": "model.tpch.int_segment__pages", "fqn": [ "tpch", "marts", "marketing", "int_segment__pages" ], "alias": "int_segment__pages", "checksum": { "name": "sha256", "checksum": "994045c36846ffbd384037e011a24217aadbe10c7017ccc761038a37e917904f" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": { "anonymous_id": { "name": "anonymous_id", "description": "A pseudo-unique substitute for a User ID, for cases when you don’t have an absolutely unique identifier. A userId or an anonymousId is required. See the Identities docs for more details.", "meta": { "dimension": { "type": "string" }, "metrics": { "number_of_unique_users": { "type": "sum" } } }, "data_type": null, "quote": null, "tags": [] }, "context_locale": { "name": "context_locale", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_referrer": { "name": "context_page_referrer", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "url": { "name": "url", "description": "Page’s full URL. Segment first looks for the canonical URL. If the canonical URL is not provided, Segment uses `location.href` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "uuid_ts": { "name": "uuid_ts", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_name": { "name": "context_library_name", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_version": { "name": "context_library_version", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": { "dimension": { "type": "string" }, "metrics": { "total_page_views": { "type": "count_distinct" } } }, "data_type": null, "quote": null, "tags": [] }, "received_at": { "name": "received_at", "description": "Automatically set by Segment, the timestamp of when a message is received by Segment It is an ISO-8601 date string. See the Timestamps fields docs for more detail.", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "title": { "name": "title", "description": "Page’s title. Equivalent to `document.title` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_title": { "name": "context_page_title", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path portion of the page's URL. Equivalent to `canonical_path` which defaults to `location.pathname` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "referrer": { "name": "referrer", "description": "Previous page’s full URL. Equivalent to `document.referrer` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "timestamp": { "name": "timestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API, as a ISO-8601 format date string. If the event just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past, make sure you to provide a timestamp.See the Timestamps fields docs for more detail.", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "original_timestamp": { "name": "original_timestamp", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string. See the Timestamps fields docs for more detail.", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "context_ip": { "name": "context_ip", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_path": { "name": "context_page_path", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_url": { "name": "context_page_url", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_user_agent": { "name": "context_user_agent", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "src": { "name": "src", "description": "The application source", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "device": { "name": "device", "description": "Type of device accessing the page", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "device_category": { "name": "device_category", "description": "Category of device accessing the page", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "page_url_host": { "name": "page_url_host", "description": "Page URL Host", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "referrer_host": { "name": "referrer_host", "description": "Host of the referrer", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/marketing/_models.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7239637, "relation_name": "DOUG_DEMO_V2.ANALYTICS.int_segment__pages", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] %}\n\nwith\n\n{% for source in sources %}\n\n{{ source }}_source as (\n select\n anonymous_id,\n context_locale,\n context_page_referrer,\n url,\n uuid_ts,\n context_library_name,\n context_library_version,\n id,\n received_at,\n title,\n context_page_title,\n path,\n referrer,\n timestamp,\n original_timestamp,\n sent_at,\n context_ip,\n context_page_path,\n context_page_url,\n context_user_agent,\n page_url_host,\n referrer_host,\n gclid,\n device,\n device_category,\n '{{ source }}' as src\n\n from {{ ref('stg_' ~ source ~ '__pages') }}\n where url not like 'http://127.0.0.1:8000%'\n and url not like 'http://localhost:8000%'\n),\n\n{% endfor %}\n\nunioned_sources as (\n {% for source in sources %}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source }}_source\n {% if not loop.last %}union all{% endif %}\n {% endfor %}\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned_sources", "language": "sql", "refs": [ [ "stg_dbtc__pages" ], [ "stg_yahooquery__pages" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_dbtc__pages", "model.tpch.stg_yahooquery__pages" ] }, "compiled_path": null }, "model.tpch.int_segment__tracks": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "int_segment__tracks", "resource_type": "model", "package_name": "tpch", "path": "marts/marketing/int_segment__tracks.sql", "original_file_path": "models/marts/marketing/int_segment__tracks.sql", "unique_id": "model.tpch.int_segment__tracks", "fqn": [ "tpch", "marts", "marketing", "int_segment__tracks" ], "alias": "int_segment__tracks", "checksum": { "name": "sha256", "checksum": "f2e55ca82a444c66fd823367f9af4bb5b3c61596d02fe3d20cf7e6c412964cff" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": { "event_text": { "name": "event_text", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_version": { "name": "context_library_version", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_referrer": { "name": "context_page_referrer", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_url": { "name": "context_page_url", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_ip": { "name": "context_ip", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_path": { "name": "context_page_path", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_title": { "name": "context_page_title", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "received_at": { "name": "received_at", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "timestamp": { "name": "timestamp", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "uuid_ts": { "name": "uuid_ts", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "context_locale": { "name": "context_locale", "description": "Locale string for the current user, for example en-US.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_user_agent": { "name": "context_user_agent", "description": "User agent of the device making the request.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "id g": { "name": "id g", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "original_timestamp": { "name": "original_timestamp", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "anonymous_id": { "name": "anonymous_id", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_name": { "name": "context_library_name", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "src": { "name": "src", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/marketing/_models.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7433674, "relation_name": "DOUG_DEMO_V2.ANALYTICS.int_segment__tracks", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] -%}\n\nwith\n\n{% for source in sources -%}\n\n{{ source }}_source as (\n select\n event_text,\n context_library_version,\n context_page_referrer,\n context_page_url,\n event,\n context_ip,\n context_page_path,\n context_page_title,\n received_at,\n sent_at,\n timestamp,\n uuid_ts,\n context_locale,\n context_user_agent,\n id,\n original_timestamp,\n anonymous_id,\n context_library_name,\n '{{ source }}' as src\n\n from {{ ref('stg_' ~ source ~ '__tracks') }}\n),\n\n{% endfor -%}\n\nunioned_sources as (\n {% for source in sources -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source }}_source\n {% if not loop.last %}union all{% endif %}\n {% endfor -%}\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned_sources", "language": "sql", "refs": [ [ "stg_dbtc__tracks" ], [ "stg_yahooquery__tracks" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_dbtc__tracks", "model.tpch.stg_yahooquery__tracks" ] }, "compiled_path": null }, "model.tpch.agg_ship_modes_dynamic_pivot": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "agg_ship_modes_dynamic_pivot", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "unique_id": "model.tpch.agg_ship_modes_dynamic_pivot", "fqn": [ "tpch", "marts", "aggregates", "agg_ship_modes_dynamic_pivot" ], "alias": "agg_ship_modes_dynamic_pivot", "checksum": { "name": "sha256", "checksum": "c748fa7968e0f5846c77aedf657ef43248f4ac38b7db6bc50e5947992b0fc4bd" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Example of creating a pivot table with hard-coded columns based on a query of the ship modes that are in the system", "columns": { "order_year": { "name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7534804, "relation_name": "DOUG_DEMO_V2.ANALYTICS.agg_ship_modes_dynamic_pivot", "raw_code": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n {# this pulls the unique ship modes from the fct_order_items table #}\n select ship_mode from {{ ref('fct_order_items') }} group by 1 \n\n{%- endcall %}\n\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n\nselect\n date_part('year', order_date) as order_year,\n\n {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n {%- for ship_mode in ship_modes -%}\n sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n {%- if not loop.last -%},{% endif %}\n {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "language": "sql", "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.statement" ], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null }, "model.tpch.agg_ship_modes_hardcoded_pivot": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "agg_ship_modes_hardcoded_pivot", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "unique_id": "model.tpch.agg_ship_modes_hardcoded_pivot", "fqn": [ "tpch", "marts", "aggregates", "agg_ship_modes_hardcoded_pivot" ], "alias": "agg_ship_modes_hardcoded_pivot", "checksum": { "name": "sha256", "checksum": "4d9c470a572092b0132991809aa9eb9eb462edfd26511faa66376204561cfc01" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Example of creating a pivot table with dynamic columns based on the ship modes that are in the system", "columns": { "order_year": { "name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7522824, "relation_name": "DOUG_DEMO_V2.ANALYTICS.agg_ship_modes_hardcoded_pivot", "raw_code": "/* Create a pivot table with hard-coded columns based on a query of the ship modes that are in the system */\n\nwith merged as (\n select\n date_part('year', order_date) as order_year,\n ship_mode,\n gross_item_sales_amount\n from {{ ref('fct_order_items') }}\n)\n\nselect\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests \nfrom\n merged\n -- have to manually map strings in the pivot operation\n pivot(sum(gross_item_sales_amount) for ship_mode in (\n 'AIR',\n 'REG AIR',\n 'FOB',\n 'RAIL',\n 'MAIL',\n 'SHIP',\n 'TRUCK'\n )) as p \n\norder by order_year", "language": "sql", "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null }, "model.tpch.order_items": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "order_items", "resource_type": "model", "package_name": "tpch", "path": "marts/intermediate/order_items.sql", "original_file_path": "models/marts/intermediate/order_items.sql", "unique_id": "model.tpch.order_items", "fqn": [ "tpch", "marts", "intermediate", "order_items" ], "alias": "order_items", "checksum": { "name": "sha256", "checksum": "d11fd9a70eb441891b3d3893243cadc9c6c8d1c9fa589a94e4719b0cdea833d6" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key for orders", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_status_code": { "name": "order_status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_item_status_code": { "name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "extended_price": { "name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "base_price": { "name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discounted_price": { "name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.76757, "relation_name": "DOUG_DEMO_V2.ANALYTICS.order_items", "raw_code": "with orders as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n line_item.order_item_key,\n orders.order_key,\n orders.customer_key,\n line_item.part_key,\n line_item.supplier_key,\n orders.order_date,\n orders.status_code as order_status_code,\n\n\n line_item.return_flag,\n \n line_item.line_number,\n line_item.status_code as order_item_status_code,\n line_item.ship_date,\n line_item.commit_date,\n line_item.receipt_date,\n line_item.ship_mode,\n line_item.extended_price,\n line_item.quantity,\n \n -- extended_price is actually the line item total,\n -- so we back out the extended price per item\n (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n line_item.discount_percentage,\n (base_price README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n line_item.extended_price as gross_item_sales_amount,\n (line_item.extended_price README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n -- We model discounts as negative amounts\n (-1 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests line_item.extended_price README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests line_item.discount_percentage){{ money() }} as item_discount_amount,\n line_item.tax_rate,\n ((gross_item_sales_amount + item_discount_amount) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests line_item.tax_rate){{ money() }} as item_tax_amount,\n (\n gross_item_sales_amount + \n item_discount_amount + \n item_tax_amount\n ){{ money() }} as net_item_sales_amount\n\nfrom\n orders\ninner join line_item\n on orders.order_key = line_item.order_key\norder by\n orders.order_date", "language": "sql", "refs": [ [ "stg_tpch_orders" ], [ "stg_tpch_line_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.tpch.money" ], "nodes": [ "model.tpch.stg_tpch_orders", "model.tpch.stg_tpch_line_items" ] }, "compiled_path": null }, "model.tpch.part_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "part_suppliers", "resource_type": "model", "package_name": "tpch", "path": "marts/intermediate/part_suppliers.sql", "original_file_path": "models/marts/intermediate/part_suppliers.sql", "unique_id": "model.tpch.part_suppliers", "fqn": [ "tpch", "marts", "intermediate", "part_suppliers" ], "alias": "part_suppliers", "checksum": { "name": "sha256", "checksum": "e0c44dc244c520b7d9a6af7e10c91899d8778c2c92e01d0f042eb2996dd25680" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.", "columns": { "part_supplier_key": { "name": "part_supplier_key", "description": "primary key of the models", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_name": { "name": "part_name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_type": { "name": "part_type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_size": { "name": "part_size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key for nation", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "available_quantity": { "name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "cost": { "name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.776893, "relation_name": "DOUG_DEMO_V2.ANALYTICS.part_suppliers", "raw_code": "with part as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n select \n\n part_supplier.part_supplier_key,\n part.part_key,\n part.name as part_name,\n part.manufacturer,\n part.brand,\n part.type as part_type,\n part.size as part_size,\n part.container,\n part.retail_price,\n\n supplier.supplier_key,\n supplier.supplier_name,\n supplier.supplier_address,\n supplier.phone_number,\n supplier.account_balance,\n supplier.nation_key,\n\n part_supplier.available_quantity,\n part_supplier.cost\nfrom\n part \ninner join \n part_supplier\n on part.part_key = part_supplier.part_key\ninner join\n supplier\n on part_supplier.supplier_key = supplier.supplier_key\norder by\n part.part_key\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "refs": [ [ "stg_tpch_parts" ], [ "stg_tpch_suppliers" ], [ "stg_tpch_part_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_part_suppliers" ] }, "compiled_path": null }, "model.tpch.all_days": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "all_days", "resource_type": "model", "package_name": "tpch", "path": "utils/all_days.sql", "original_file_path": "models/utils/all_days.sql", "unique_id": "model.tpch.all_days", "fqn": [ "tpch", "utils", "all_days" ], "alias": "all_days", "checksum": { "name": "sha256", "checksum": "085c7fe9dcf86861369fae49eacbccaaec2d689fbfc92edb07e18b17e21821e8" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This model is an example of how to create a date spine using dbt_utils. Rather than writing a bunch of code to create this, we're able to three lines of code.", "columns": { "date_day": { "name": "date_day", "description": "date generated by the macro", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/utils/utils.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7861443, "relation_name": "DOUG_DEMO_V2.ANALYTICS.all_days", "raw_code": "{{ dbt_utils.date_spine(\n datepart=\"day\",\n start_date=\"to_date('01/01/1992', 'mm/dd/yyyy')\",\n end_date=\"dateadd(year, 1, current_date)\"\n )\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.date_spine" ], "nodes": [] }, "compiled_path": null }, "model.tpch.fct_orders_stats": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_orders_stats", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders_stats.py", "original_file_path": "models/marts/core/fct_orders_stats.py", "unique_id": "model.tpch.fct_orders_stats", "fqn": [ "tpch", "marts", "core", "fct_orders_stats" ], "alias": "fct_orders_stats", "checksum": { "name": "sha256", "checksum": "ef552215d04031b7f1e3bbf15e91dbd1175d601b6f9970d0cf919e7d0957943f" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table" }, "created_at": 1675283573.4695654, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_orders_stats", "raw_code": "def model(dbt, session):\n dbt.config(materialized=\"table\")\n\n df = dbt.ref('fct_orders')\n df = df.describe()\n return df", "language": "python", "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "compiled_path": null }, "snapshot.tpch.tpch_supplier_snapshot": { "database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_supplier_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_supplier_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_supplier_snapshot.sql", "unique_id": "snapshot.tpch.tpch_supplier_snapshot", "fqn": [ "tpch", "tpch", "tpch_supplier_snapshot", "tpch_supplier_snapshot" ], "alias": "tpch_supplier_snapshot", "checksum": { "name": "sha256", "checksum": "18b69c9e200356c4b6a0bcd1ef3bf95834e5c1f1f3e4435f6806f8af758bf4a9" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "s_suppkey", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "s_suppkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1675283573.490325, "relation_name": "doug_demo_v2.snapshots.tpch_supplier_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='s_suppkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'supplier') }}\n\n", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null }, "snapshot.tpch.tpch_part_snapshot": { "database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_part_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_part_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_part_snapshot.sql", "unique_id": "snapshot.tpch.tpch_part_snapshot", "fqn": [ "tpch", "tpch", "tpch_part_snapshot", "tpch_part_snapshot" ], "alias": "tpch_part_snapshot", "checksum": { "name": "sha256", "checksum": "052952412b2ba03ba41cb88d43a5709b18063807c98750501b7288d4c7612642" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "p_partkey", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "p_partkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1675283573.5004883, "relation_name": "doug_demo_v2.snapshots.tpch_part_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='p_partkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'part') }}\n\n", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null }, "snapshot.tpch.tpch_customer_snapshot": { "database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_customer_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_customer_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_customer_snapshot.sql", "unique_id": "snapshot.tpch.tpch_customer_snapshot", "fqn": [ "tpch", "tpch", "tpch_customer_snapshot", "tpch_customer_snapshot" ], "alias": "tpch_customer_snapshot", "checksum": { "name": "sha256", "checksum": "ad4d6b254a3d8260e5de6b207da31f0e294b173ea743eeb8e9e0fd9305216d6b" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "c_custkey", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "c_custkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1675283573.506924, "relation_name": "doug_demo_v2.snapshots.tpch_customer_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='c_custkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'customer') }}\n\n", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null }, "test.tpch.macro_stg_tpch_orders_assert_pos_price": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "macro_stg_tpch_orders_assert_pos_price", "resource_type": "test", "package_name": "tpch", "path": "macro_stg_tpch_orders_assert_pos_price.sql", "original_file_path": "tests/macro_stg_tpch_orders_assert_pos_price.sql", "unique_id": "test.tpch.macro_stg_tpch_orders_assert_pos_price", "fqn": [ "tpch", "macro_stg_tpch_orders_assert_pos_price" ], "alias": "macro_stg_tpch_orders_assert_pos_price", "checksum": { "name": "sha256", "checksum": "bd383c3dbfe817a0fc1b18fa7431a8d3da0e4b53802e70a10f6c8461bbe89e79" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [ "finance" ], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "error", "tags": [ "finance" ] }, "created_at": 1675283573.5275247, "relation_name": null, "raw_code": "{{\n config(\n enabled=true,\n severity='error',\n tags = ['finance']\n )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_orders', 'total_price') }}", "language": "sql", "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.tpch.test_all_values_gte_zero" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null }, "test.tpch.stg_tpch_orders_assert_positive_price": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "stg_tpch_orders_assert_positive_price", "resource_type": "test", "package_name": "tpch", "path": "stg_tpch_orders_assert_positive_price.sql", "original_file_path": "tests/stg_tpch_orders_assert_positive_price.sql", "unique_id": "test.tpch.stg_tpch_orders_assert_positive_price", "fqn": [ "tpch", "stg_tpch_orders_assert_positive_price" ], "alias": "stg_tpch_orders_assert_positive_price", "checksum": { "name": "sha256", "checksum": "dca5c812288805c6cf6f8cf1e6f737b7a0fb68b5ff351132039232ad25518abe" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [ "finance" ], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "error", "tags": [ "finance" ] }, "created_at": 1675283573.534417, "relation_name": null, "raw_code": "{{\n config(\n enabled=true,\n severity='error',\n tags = ['finance']\n )\n}}\n\nwith orders as ( select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_orders') }} )\n\nselect *\nfrom orders \nwhere total_price < 0", "language": "sql", "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null }, "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "resource_type": "test", "package_name": "tpch", "path": "macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "original_file_path": "tests/macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "unique_id": "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "fqn": [ "tpch", "macro_stg_tphc_suppliers_assert_pos_acct_bal" ], "alias": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "checksum": { "name": "sha256", "checksum": "bf636d56abefc837b17711ef1da6b27464592065652f29633fa94905b5eea4cc" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [ "finance" ], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "warn", "tags": [ "finance" ] }, "created_at": 1675283573.5403202, "relation_name": null, "raw_code": "{{\n config(\n enabled=true,\n severity='warn',\n tags = ['finance']\n )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_suppliers', 'account_balance') }}", "language": "sql", "refs": [ [ "stg_tpch_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.tpch.test_all_values_gte_zero" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "compiled_path": null }, "seed.tpch.country_codes": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "country_codes", "resource_type": "seed", "package_name": "tpch", "path": "country_codes.csv", "original_file_path": "seeds/country_codes.csv", "unique_id": "seed.tpch.country_codes", "fqn": [ "tpch", "country_codes" ], "alias": "country_codes", "checksum": { "name": "sha256", "checksum": "ef89ea6f694c374f98a14061acb6674a4337e48262f90b1117e9c8584151b764" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "quote_columns": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Lookup table for country and two digit ISO codes", "columns": { "Name": { "name": "Name", "description": "Name of the country", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "Code": { "name": "Code", "description": "2-digit ISO code for the country", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7912676, "relation_name": "DOUG_DEMO_V2.ANALYTICS.country_codes", "raw_code": "", "root_path": "/tmp/jobs/118820234/target" }, "seed.tpch.snowflake_contract_rates": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "snowflake_contract_rates", "resource_type": "seed", "package_name": "tpch", "path": "snowflake_contract_rates.csv", "original_file_path": "seeds/snowflake_contract_rates.csv", "unique_id": "seed.tpch.snowflake_contract_rates", "fqn": [ "tpch", "snowflake_contract_rates" ], "alias": "snowflake_contract_rates", "checksum": { "name": "sha256", "checksum": "c6e1cea47545026b5501e22bf1f8756ddc4d1b8456ef90575f3b2aa8e47e1e5d" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": { "effective_date": "DATE", "rate": "NUMBER" }, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "quote_columns": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This is an example of a seed. Seeds are CSV files in your dbt project (typically in your data directory), that dbt can load into your data warehouse using the dbt seed command.\n", "columns": { "effective_date": { "name": "effective_date", "description": "effective date of contract", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rate": { "name": "rate", "description": "rate based on the effective date", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": { "column_types": { "effective_date": "DATE", "rate": "NUMBER" } }, "created_at": 1675283574.7895253, "relation_name": "DOUG_DEMO_V2.ANALYTICS.snowflake_contract_rates", "raw_code": "", "root_path": "/tmp/jobs/118820234/target" }, "model.elementary.filtered_information_schema_columns": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "filtered_information_schema_columns", "resource_type": "model", "package_name": "elementary", "path": "edr/metadata_store/filtered_information_schema_columns.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_columns.sql", "unique_id": "model.elementary.filtered_information_schema_columns", "fqn": [ "elementary", "edr", "metadata_store", "filtered_information_schema_columns" ], "alias": "filtered_information_schema_columns", "checksum": { "name": "sha256", "checksum": "8b0602cbf990730afd02271c018d6843414aaff35c5d6e191c8711e570178d7b" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Queries the columns view from the information schema of the schemas in the project. This view is generated using an adapter specific macro, as information schema is different between platforms. This is a view to make the work with the information schema more convinient.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "enabled": true }, "created_at": 1675283574.9721801, "relation_name": "DOUG_DEMO_V2.ANALYTICS.filtered_information_schema_columns", "raw_code": "{{\n config(\n materialized = 'view',\n enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_columns as (\n\n {%- if configured_schemas | length > 0 -%}\n {{ elementary.union_macro_queries(configured_schemas, elementary.get_columns_from_information_schema) }}\n {%- else %}\n {{ elementary.empty_table([('full_table_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string'), ('column_name', 'string'), ('data_type', 'string')]) }}\n {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table" ], "nodes": [] }, "compiled_path": null }, "model.elementary.filtered_information_schema_tables": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "filtered_information_schema_tables", "resource_type": "model", "package_name": "elementary", "path": "edr/metadata_store/filtered_information_schema_tables.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_tables.sql", "unique_id": "model.elementary.filtered_information_schema_tables", "fqn": [ "elementary", "edr", "metadata_store", "filtered_information_schema_tables" ], "alias": "filtered_information_schema_tables", "checksum": { "name": "sha256", "checksum": "89284ddd42994a960605b4f4de200adbdfc7e467e4bebb7d1debefbe8718839d" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Queries the tables and schemas views from the information schema of the schemas in the project. This view is generated using an adapter specific macro, as information schema is different between platforms. This is a view to make the work with the information schema more convinient.", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "enabled": true }, "created_at": 1675283574.9728222, "relation_name": "DOUG_DEMO_V2.ANALYTICS.filtered_information_schema_tables", "raw_code": "{{\n config(\n materialized = 'view',\n enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_tables as (\n\n {%- if configured_schemas | length > 0 -%}\n {{ elementary.union_macro_queries(configured_schemas, elementary.get_tables_from_information_schema) }}\n {%- else %}\n {{ elementary.empty_table([('full_table_name', 'string'), ('full_schema_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string')]) }}\n {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table" ], "nodes": [] }, "compiled_path": null }, "model.elementary.alerts_anomaly_detection": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "alerts_anomaly_detection", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_anomaly_detection.sql", "original_file_path": "models/edr/alerts/alerts_anomaly_detection.sql", "unique_id": "model.elementary.alerts_anomaly_detection", "fqn": [ "elementary", "edr", "alerts", "alerts_anomaly_detection" ], "alias": "alerts_anomaly_detection", "checksum": { "name": "sha256", "checksum": "0d2bb9c33ded81e6501643abeeacde1b21695f406b861f748923e4bd9ce0c4c8" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "A view that is used by the Elementary CLI to generate alerts on data anomalies detected using the elementary anomaly detection tests. The view filters alerts according to configuration.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.8029594, "relation_name": "DOUG_DEMO_V2.ANALYTICS.alerts_anomaly_detection", "raw_code": "{{\n config(\n materialized = 'view',\n bind =False\n )\n}}\n\nwith elementary_test_results as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('elementary_test_results') }}\n),\n\nalerts_anomaly_detection as (\n select id as alert_id,\n data_issue_id,\n test_execution_id,\n test_unique_id,\n model_unique_id,\n detected_at,\n database_name,\n schema_name,\n table_name,\n column_name,\n test_type as alert_type,\n test_sub_type as sub_type,\n test_results_description as alert_description,\n owners,\n tags,\n test_results_query as alert_results_query,\n other,\n test_name,\n test_short_name,\n test_params,\n severity,\n status,\n result_rows\n from elementary_test_results\n where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'anomaly_detection'\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from alerts_anomaly_detection", "language": "sql", "refs": [ [ "elementary_test_results" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var" ], "nodes": [ "model.elementary.elementary_test_results" ] }, "compiled_path": null }, "model.elementary.alerts_schema_changes": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "alerts_schema_changes", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_schema_changes.sql", "original_file_path": "models/edr/alerts/alerts_schema_changes.sql", "unique_id": "model.elementary.alerts_schema_changes", "fqn": [ "elementary", "edr", "alerts", "alerts_schema_changes" ], "alias": "alerts_schema_changes", "checksum": { "name": "sha256", "checksum": "96c9a42ca06d726bff66c903a314b13c6beb1641347aba54d93710161d2391e1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "A view that is used by the Elementary CLI to generate alerts on schema changes detected using elementary tests. The view filters alerts according to configuration.", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false, "enabled": true }, "created_at": 1675283574.8036711, "relation_name": "DOUG_DEMO_V2.ANALYTICS.alerts_schema_changes", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False,\n enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n )\n}}\n\n\nwith elementary_test_results as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('elementary_test_results') }}\n),\n\nalerts_schema_changes as (\n select id as alert_id,\n data_issue_id,\n test_execution_id,\n test_unique_id,\n model_unique_id,\n detected_at,\n database_name,\n schema_name,\n table_name,\n column_name,\n test_type as alert_type,\n test_sub_type as sub_type,\n test_results_description as alert_description,\n owners,\n tags,\n test_results_query as alert_results_query,\n other,\n test_name,\n test_short_name,\n test_params,\n severity,\n status,\n result_rows\n from elementary_test_results\n where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'schema_change'\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from alerts_schema_changes", "language": "sql", "refs": [ [ "elementary_test_results" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var" ], "nodes": [ "model.elementary.elementary_test_results" ] }, "compiled_path": null }, "model.elementary.alerts_dbt_tests": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "alerts_dbt_tests", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_tests.sql", "original_file_path": "models/edr/alerts/alerts_dbt_tests.sql", "unique_id": "model.elementary.alerts_dbt_tests", "fqn": [ "elementary", "edr", "alerts", "alerts_dbt_tests" ], "alias": "alerts_dbt_tests", "checksum": { "name": "sha256", "checksum": "644e6360ece0829a8d77509903a110b8fca81b1dedf34b8cb8b5bdcc75f83922" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "A view that is used by the Elementary CLI to generate dbt tests alerts, including all the fields the alert will include such as owner, tags, error message, etc. This view includes data about all dbt tests except elementary tests. It filters alerts according to configuration.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.8023024, "relation_name": "DOUG_DEMO_V2.ANALYTICS.alerts_dbt_tests", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith elementary_test_results as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('elementary_test_results') }}\n),\n\nalerts_dbt_tests as (\n select id as alert_id,\n data_issue_id,\n test_execution_id,\n test_unique_id,\n model_unique_id,\n detected_at,\n database_name,\n schema_name,\n table_name,\n column_name,\n test_type as alert_type,\n test_sub_type as sub_type,\n test_results_description as alert_description,\n owners,\n tags,\n test_results_query as alert_results_query,\n other,\n test_name,\n test_short_name,\n test_params,\n severity,\n status,\n result_rows\n from elementary_test_results\n where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'dbt_test'\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from alerts_dbt_tests", "language": "sql", "refs": [ [ "elementary_test_results" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var" ], "nodes": [ "model.elementary.elementary_test_results" ] }, "compiled_path": null }, "model.elementary.alerts_dbt_models": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "alerts_dbt_models", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_models.sql", "original_file_path": "models/edr/alerts/alerts_dbt_models.sql", "unique_id": "model.elementary.alerts_dbt_models", "fqn": [ "elementary", "edr", "alerts", "alerts_dbt_models" ], "alias": "alerts_dbt_models", "checksum": { "name": "sha256", "checksum": "aad00742146b5339efa4fbb9e8f475745116c1a6603d7a0999a2ba5d9e4392c6" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "A view that is used by the Elementary CLI to generate models alerts, including all the fields the alert will include such as owner, tags, error message, etc. It joins data about models and snapshots run results, and filters alerts according to configuration.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.8015954, "relation_name": "DOUG_DEMO_V2.ANALYTICS.alerts_dbt_models", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith error_models as (\n \n select model_execution_id,\n unique_id,\n invocation_id,\n name,\n generated_at,\n status,\n full_refresh,\n message,\n execution_time,\n execute_started_at,\n execute_completed_at,\n compile_started_at,\n compile_completed_at,\n compiled_code,\n database_name,\n schema_name,\n materialization,\n tags,\n package_name,\n path,\n original_path,\n owner,\n alias \n from {{ ref('model_run_results') }}\n \n union all\n \n select model_execution_id,\n unique_id,\n invocation_id,\n name,\n generated_at,\n status,\n full_refresh,\n message,\n execution_time,\n execute_started_at,\n execute_completed_at,\n compile_started_at,\n compile_completed_at,\n compiled_code,\n database_name,\n schema_name,\n materialization,\n tags,\n package_name,\n path,\n original_path,\n owner,\n alias \n from {{ ref('snapshot_run_results') }}\n)\n\n\nselect model_execution_id as alert_id,\n unique_id,\n generated_at as detected_at,\n database_name,\n materialization,\n path,\n original_path,\n schema_name,\n message,\n owner as owners,\n tags,\n alias,\n status,\n full_refresh\nfrom error_models\nwhere {{ not elementary.get_config_var('disable_model_alerts') }} and lower(status) != 'success' {%- if elementary.get_config_var('disable_skipped_model_alerts') -%} and lower(status) != 'skipped' {%- endif -%}", "language": "sql", "refs": [ [ "model_run_results" ], [ "snapshot_run_results" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var" ], "nodes": [ "model.elementary.model_run_results", "model.elementary.snapshot_run_results" ] }, "compiled_path": null }, "model.elementary.alerts_dbt_source_freshness": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "alerts_dbt_source_freshness", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_source_freshness.sql", "original_file_path": "models/edr/alerts/alerts_dbt_source_freshness.sql", "unique_id": "model.elementary.alerts_dbt_source_freshness", "fqn": [ "elementary", "edr", "alerts", "alerts_dbt_source_freshness" ], "alias": "alerts_dbt_source_freshness", "checksum": { "name": "sha256", "checksum": "ec03b412a62d28d45853ddb68502724c9bee8ae8bf16d203391711546f5904b0" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283573.881082, "relation_name": "DOUG_DEMO_V2.ANALYTICS.alerts_dbt_source_freshness", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith results as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dbt_source_freshness_results') }}\n),\n\nsources as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dbt_sources') }}\n)\n\nselect\n results.source_freshness_execution_id as alert_id,\n results.max_loaded_at,\n results.snapshotted_at,\n results.generated_at as detected_at,\n results.max_loaded_at_time_ago_in_s,\n results.status,\n results.error,\n sources.unique_id,\n sources.database_name,\n sources.schema_name,\n sources.source_name,\n sources.identifier,\n sources.freshness_error_after,\n sources.freshness_warn_after,\n sources.freshness_filter,\n sources.tags,\n sources.meta,\n sources.owner,\n sources.package_name,\n sources.path\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere {{ not elementary.get_config_var('disable_source_freshness_alerts') }} and lower(status) != 'pass'", "language": "sql", "refs": [ [ "dbt_source_freshness_results" ], [ "dbt_sources" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var" ], "nodes": [ "model.elementary.dbt_source_freshness_results", "model.elementary.dbt_sources" ] }, "compiled_path": null }, "model.elementary.monitors_runs": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "monitors_runs", "resource_type": "model", "package_name": "elementary", "path": "edr/system/monitors_runs.sql", "original_file_path": "models/edr/system/monitors_runs.sql", "unique_id": "model.elementary.monitors_runs", "fqn": [ "elementary", "edr", "system", "monitors_runs" ], "alias": "monitors_runs", "checksum": { "name": "sha256", "checksum": "3ea6b2307779564cab2f48294968553fa4360057e7ec96083f87e913716facb1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This is a view on `data_monitoring_metrics` that is used to determine when a specific anomaly detection test was last executed. Each anomaly detection test queries this view to decide on a start time for collecting metrics.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.9708958, "relation_name": "DOUG_DEMO_V2.ANALYTICS.monitors_runs", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith data_monitoring_metrics as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('data_monitoring_metrics') }}\n\n),\n\nmax_bucket_end as (\n\n select full_table_name,\n column_name,\n metric_name,\n max(bucket_end) as last_bucket_end\n from data_monitoring_metrics\n group by 1,2,3\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from max_bucket_end", "language": "sql", "refs": [ [ "data_monitoring_metrics" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.elementary.data_monitoring_metrics" ] }, "compiled_path": null }, "model.elementary.dbt_run_results": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_run_results.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_run_results.sql", "unique_id": "model.elementary.dbt_run_results", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_run_results" ], "alias": "dbt_run_results", "checksum": { "name": "sha256", "checksum": "e5e7b6e5b3180600c88cf3ae95619f4492296507873e8c85047ceca5db0617a7" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Run results of dbt invocations, inserted at the end of each invocation. Each row is the invocation result of a single resource (model, test, snapshot, etc). New data is loaded to this model on an on-run-end hook named 'elementary.upload_run_results' from each invocation that produces a result object. This is an incremental model.\n", "columns": { "model_execution_id": { "name": "model_execution_id", "description": "Execution id generated by joining the unique_id of the resource and the invocation_id. This is the unique key of each row in this model.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "unique_id": { "name": "unique_id", "description": "The unique id of the resource (would be similar for all executions of the same resource).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "invocation_id": { "name": "invocation_id", "description": "The unique id of the invocation (would be similar for all resources executed on the same invocation). FK to dbt_invocations.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "Resource name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "message": { "name": "message", "description": "Execution results message returned by dbt.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "status": { "name": "status", "description": "Execution result status (success, error, pass, fail)", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "resource_type": { "name": "resource_type", "description": "Resource type (model, test, snapshot, seed, etc)", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "execution_time": { "name": "execution_time", "description": "Resource execution duration in seconds.", "meta": {}, "data_type": "float", "quote": null, "tags": [] }, "execute_started_at": { "name": "execute_started_at", "description": "Start time of the execution.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "execute_completed_at": { "name": "execute_completed_at", "description": "End time of the execution.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Start time of resource compile action.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "compile_completed_at": { "name": "compile_completed_at", "description": "End time of resource compile action.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "", "meta": {}, "data_type": "int", "quote": null, "tags": [] }, "full_refresh": { "name": "full_refresh", "description": "Was this a full refresh execution.", "meta": {}, "data_type": "boolean", "quote": null, "tags": [] }, "compiled_code": { "name": "compiled_code", "description": "The compiled code (SQL / Python) executed against the database.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "failures": { "name": "failures", "description": "Number of failures in this run.", "meta": {}, "data_type": "int", "quote": null, "tags": [] }, "query_id": { "name": "query_id", "description": "Query ID in the data warehouse, if returned by the adapter (currently only supported in Snowflake, is null for any other adapter).", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "full_refresh": false }, "created_at": 1675283574.9652748, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_run_results", "raw_code": "{{\n config(\n materialized = 'incremental',\n transient=False,\n unique_key = 'model_execution_id',\n on_schema_change = 'append_new_columns',\n full_refresh=elementary.get_config_var('elementary_full_refresh')\n )\n}}\n\n{{ elementary.get_dbt_run_results_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.get_dbt_run_results_empty_table_query" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_metrics": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_metrics", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_metrics.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_metrics.sql", "unique_id": "model.elementary.dbt_metrics", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_metrics" ], "alias": "dbt_metrics", "checksum": { "name": "sha256", "checksum": "0b6d18f957fb6a552044d3b928400551e40937224226d84174332e2c974d74d0" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [ { "sql": "{{ elementary.upload_dbt_metrics() }}", "transaction": true, "index": null } ], "pre-hook": [] }, "tags": [], "description": "Metadata about metics in the project, including configuration and properties from the dbt graph. Each row contains information about a single metric. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": { "unique_id": { "name": "unique_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "label": { "name": "label", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "model": { "name": "model", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "type": { "name": "type", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "sql": { "name": "sql", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "timestamp": { "name": "timestamp", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "filters": { "name": "filters", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "time_grains": { "name": "time_grains", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "dimensions": { "name": "dimensions", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_macros": { "name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "description": { "name": "description", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "original_path": { "name": "original_path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "path": { "name": "path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "post-hook": [ "{{ elementary.upload_dbt_metrics() }}" ] }, "created_at": 1675283574.9031038, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_metrics", "raw_code": "{{\n config(\n materialized='incremental',\n transient=False,\n post_hook='{{ elementary.upload_dbt_metrics() }}'\n )\n}}\n\n{{ elementary.get_dbt_metrics_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_dbt_metrics_empty_table_query", "macro.elementary.upload_dbt_metrics" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_models": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_models", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_models.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_models.sql", "unique_id": "model.elementary.dbt_models", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_models" ], "alias": "dbt_models", "checksum": { "name": "sha256", "checksum": "d7cd0704d4e23ffbbab46e465af67de8896ab7365136b01b4a7d021f247957cf" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [ { "sql": "{{ elementary.upload_dbt_models() }}", "transaction": true, "index": null } ], "pre-hook": [] }, "tags": [], "description": "Metadata about models in the project, including configuration and properties from the dbt graph. Each row contains information about a single model. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": { "unique_id": { "name": "unique_id", "description": "The unique id of the model.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "checksum": { "name": "checksum", "description": "Model file checksum.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The model materialization config.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Model tags property.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The content of 'meta' property key.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "Model owner property (configured under 'meta' key).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "database_name": { "name": "database_name", "description": "The model database name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "schema_name": { "name": "schema_name", "description": "The model schema name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_macros": { "name": "depends_on_macros", "description": "The macros the model directly depends on.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "The nodes the model directly depends on.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "description": { "name": "description", "description": "Model description.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "Model name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Package name of the model.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "original_path": { "name": "original_path", "description": "Full path of the model file.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "path": { "name": "path", "description": "Short path of the model file.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "Update time of the table.", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "post-hook": [ "{{ elementary.upload_dbt_models() }}" ] }, "created_at": 1675283574.821067, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_models", "raw_code": "{{\n config(\n materialized='incremental',\n transient=False,\n post_hook='{{ elementary.upload_dbt_models() }}'\n )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_models" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_exposures": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_exposures", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_exposures.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_exposures.sql", "unique_id": "model.elementary.dbt_exposures", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_exposures" ], "alias": "dbt_exposures", "checksum": { "name": "sha256", "checksum": "5436d3e99f078e7696c580267627c819dd25a666c9caf9603d46ab927a3fdd7a" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [ { "sql": "{{ elementary.upload_dbt_exposures() }}", "transaction": true, "index": null } ], "pre-hook": [] }, "tags": [], "description": "Metadata about exposures in the project, including configuration and properties from the dbt graph. Each row contains information about a single exposure. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": { "unique_id": { "name": "unique_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "maturity": { "name": "maturity", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "type": { "name": "type", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "owner_email": { "name": "owner_email", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "owner_name": { "name": "owner_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "url": { "name": "url", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_macros": { "name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "description": { "name": "description", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "original_path": { "name": "original_path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "path": { "name": "path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "post-hook": [ "{{ elementary.upload_dbt_exposures() }}" ] }, "created_at": 1675283574.9191902, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_exposures", "raw_code": "{{\n config(\n materialized='incremental',\n transient=False,\n post_hook='{{ elementary.upload_dbt_exposures() }}'\n )\n}}\n\n{{ elementary.get_dbt_exposures_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_dbt_exposures_empty_table_query", "macro.elementary.upload_dbt_exposures" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_snapshots": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_snapshots", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_snapshots.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_snapshots.sql", "unique_id": "model.elementary.dbt_snapshots", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_snapshots" ], "alias": "dbt_snapshots", "checksum": { "name": "sha256", "checksum": "ffe30a729e16384cbccb6fac2ca4410c51ed09c8f8ae2ff30776176fb242d458" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [ { "sql": "{{ elementary.upload_dbt_snapshots() }}", "transaction": true, "index": null } ], "pre-hook": [] }, "tags": [], "description": "Metadata about snapshots in the project, including configuration and properties from the dbt graph. Each row contains information about a single snapshot. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": { "unique_id": { "name": "unique_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "checksum": { "name": "checksum", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "database_name": { "name": "database_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "schema_name": { "name": "schema_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_macros": { "name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "description": { "name": "description", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "original_path": { "name": "original_path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "path": { "name": "path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "post-hook": [ "{{ elementary.upload_dbt_snapshots() }}" ] }, "created_at": 1675283574.8842034, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_snapshots", "raw_code": "{{\n config(\n materialized='incremental',\n transient=False,\n post_hook='{{ elementary.upload_dbt_snapshots() }}'\n )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_snapshots" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_invocations": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_invocations", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_invocations.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_invocations.sql", "unique_id": "model.elementary.dbt_invocations", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_invocations" ], "alias": "dbt_invocations", "checksum": { "name": "sha256", "checksum": "3cabb00ce8cfe89c9216c061878fa42fc69d609923178b4b2b0cbcb6d2433395" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "invocation_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Attributes associated with each dbt invocation. Inserted at the end of each invocation.\n", "columns": { "invocation_id": { "name": "invocation_id", "description": "Primary key of this table.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "Timestamp the invocation was started.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "run_completed_at": { "name": "run_completed_at", "description": "Timestamp the invocation was completed", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "The time this invocation was uploaded to the database.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "command": { "name": "command", "description": "dbt command that was used. For example, run.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "dbt_version": { "name": "dbt_version", "description": "Version of dbt that was used in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "elementary_version": { "name": "elementary_version", "description": "Version of the elementary package that was used in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "full_refresh": { "name": "full_refresh", "description": "Whether or not this invocation was executed as a full-refresh.", "meta": {}, "data_type": "boolean", "quote": null, "tags": [] }, "invocation_vars": { "name": "invocation_vars", "description": "Dictionary of the variables (and values) that were declared in the invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "vars": { "name": "vars", "description": "Dictionary of all variables (and values) in the dbt project. If none were declared at runtime, these are the variables declared in dbt_project yml", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "target_name": { "name": "target_name", "description": "Name of the target used in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "target_database": { "name": "target_database", "description": "Name of the target database that was used in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "target_schema": { "name": "target_schema", "description": "Name of the target schema that was used in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "target_profile_name": { "name": "target_profile_name", "description": "Name of the dbt profile that was used in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "threads": { "name": "threads", "description": "Number of threads that were used to run this dbt invocation. (This number could impact the performance of a dbt invocation).", "meta": {}, "data_type": "integer", "quote": null, "tags": [] }, "selected": { "name": "selected", "description": "The selected resources in the dbt command. While this is a string in the database, this can easily be converted to an array.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "yaml_selector": { "name": "yaml_selector", "description": "The yaml selector that was passed in this invocation.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "job_id": { "name": "job_id", "description": "The ID of a job, defined in the `DBT_JOB_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "job_name": { "name": "job_name", "description": "The name of a job, defined in the `DBT_JOB_NAME` env var.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "job_run_id": { "name": "job_run_id", "description": "The run ID of a job, defined in the `DBT_JOB_RUN_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "env": { "name": "env", "description": "The environment's name, defined in the `DBT_ENV` env var.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "env_id": { "name": "env_id", "description": "The ID of an environment, defined in the `DBT_ENV_ID` env var.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "project_id": { "name": "project_id", "description": "The ID of a project, defined in the `DBT_PROJECT_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "cause_category": { "name": "cause_category", "description": "The category of the cause of the invocation. For example, if the invocation was triggered by a schedule, the cause category would be schedule.\nDefined in the `DBT_CAUSE_CATEGORY` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).\n", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "cause": { "name": "cause", "description": "The cause of the invocation. For example, if the invocation was triggered by a manual run, the cause would be _\"Kicked off by Joe.\"_.\nDefined in the `DBT_CAUSE` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).\n", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "pull_request_id": { "name": "pull_request_id", "description": "The ID of a pull request, defined in the `DBT_PULL_REQUEST_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "git_sha": { "name": "git_sha", "description": "The git SHA of the commit that was used in this invocation, defined in the `DBT_GIT_SHA` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "orchestrator": { "name": "orchestrator", "description": "The orchestrator that was used to run this invocation. For example, dbt Cloud, GitHub Actions, etc.", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "unique_key": "invocation_id", "on_schema_change": "append_new_columns", "full_refresh": false }, "created_at": 1675283574.9472432, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_invocations", "raw_code": "{{\n config(\n materialized = 'incremental',\n transient=False,\n unique_key = 'invocation_id',\n on_schema_change = 'append_new_columns',\n full_refresh=elementary.get_config_var('elementary_full_refresh')\n )\n}}\n\n{{ elementary.get_dbt_invocations_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.get_dbt_invocations_empty_table_query" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_sources": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_sources", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_sources.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_sources.sql", "unique_id": "model.elementary.dbt_sources", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_sources" ], "alias": "dbt_sources", "checksum": { "name": "sha256", "checksum": "c73a3a4b0386ae49fefa021faae5d7cf9d782bffd93f62dffa2499b47e304b9d" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [ { "sql": "{{ elementary.upload_dbt_sources() }}", "transaction": true, "index": null } ], "pre-hook": [] }, "tags": [], "description": "Metadata about sources in the project, including configuration and properties from the dbt graph. Each row contains information about a single source. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": { "unique_id": { "name": "unique_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "database_name": { "name": "database_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "schema_name": { "name": "schema_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "source_name": { "name": "source_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "identifier": { "name": "identifier", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "loaded_at_field": { "name": "loaded_at_field", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "freshness_warn_after": { "name": "freshness_warn_after", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "freshness_error_after": { "name": "freshness_error_after", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "freshness_filter": { "name": "freshness_filter", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "relation_name": { "name": "relation_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "original_path": { "name": "original_path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "path": { "name": "path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "source_description": { "name": "source_description", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "description": { "name": "description", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "post-hook": [ "{{ elementary.upload_dbt_sources() }}" ] }, "created_at": 1675283574.866798, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_sources", "raw_code": "{{\n config(\n materialized='incremental',\n transient=False,\n post_hook='{{ elementary.upload_dbt_sources() }}'\n )\n}}\n\n{{ elementary.get_dbt_sources_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_dbt_sources_empty_table_query", "macro.elementary.upload_dbt_sources" ], "nodes": [] }, "compiled_path": null }, "model.elementary.dbt_tests": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_tests", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_tests.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_tests.sql", "unique_id": "model.elementary.dbt_tests", "fqn": [ "elementary", "edr", "dbt_artifacts", "dbt_tests" ], "alias": "dbt_tests", "checksum": { "name": "sha256", "checksum": "e86facbfeb5725de17f6b7bc6161b8d23ef2f4a5c7a7546aed57b7a9a92a73c2" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "transient": false, "post-hook": [ { "sql": "{{ elementary.upload_dbt_tests() }}", "transaction": true, "index": null } ], "pre-hook": [] }, "tags": [], "description": "Metadata about tests in the project, including configuration and properties from the dbt graph. Each row contains information about a single test. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": { "unique_id": { "name": "unique_id", "description": "The unique id of the test.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "database_name": { "name": "database_name", "description": "The tested model database name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "schema_name": { "name": "schema_name", "description": "The tested model schema name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "name": { "name": "name", "description": "The test name.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "short_name": { "name": "short_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "test_column_name": { "name": "test_column_name", "description": "The name of the tested column.", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "severity": { "name": "severity", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "warn_if": { "name": "warn_if", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "error_if": { "name": "error_if", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "test_params": { "name": "test_params", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "test_namespace": { "name": "test_namespace", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "model_tags": { "name": "model_tags", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "model_owners": { "name": "model_owners", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_macros": { "name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "parent_model_unique_id": { "name": "parent_model_unique_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "description": { "name": "description", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "type": { "name": "type", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "original_path": { "name": "original_path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "path": { "name": "path", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] }, "generated_at": { "name": "generated_at", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "transient": false, "post-hook": [ "{{ elementary.upload_dbt_tests() }}" ] }, "created_at": 1675283574.846675, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_tests", "raw_code": "{{\n config(\n materialized='incremental',\n transient=False,\n post_hook='{{ elementary.upload_dbt_tests() }}'\n )\n}}\n\n{{ elementary.get_dbt_tests_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_dbt_tests_empty_table_query", "macro.elementary.upload_dbt_tests" ], "nodes": [] }, "compiled_path": null }, "model.elementary.schema_columns_snapshot": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "schema_columns_snapshot", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "unique_id": "model.elementary.schema_columns_snapshot", "fqn": [ "elementary", "edr", "data_monitoring", "schema_changes", "schema_columns_snapshot" ], "alias": "schema_columns_snapshot", "checksum": { "name": "sha256", "checksum": "90aae6afaaa650a23c297075fb7e3fe25e4a00be486cc1c230f999c083918b61" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "column_state_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Stores the schema details for tables that are monitored with elementary schema changes test. In order to compare current schema to previous state, we must store the previous state. The data is from a view that queries the data warehouse information schema. This is an incremental table.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "unique_key": "column_state_id", "enabled": true, "full_refresh": false }, "created_at": 1675283574.9715374, "relation_name": "DOUG_DEMO_V2.ANALYTICS.schema_columns_snapshot", "raw_code": "{{\n config(\n materialized='incremental',\n unique_key = 'column_state_id',\n enabled = target.type != 'databricks' and target.type != 'spark' | as_bool(),\n full_refresh=elementary.get_config_var('elementary_full_refresh')\n )\n}}\n\n{{ elementary.empty_schema_columns_snapshot() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.empty_schema_columns_snapshot" ], "nodes": [] }, "compiled_path": null }, "model.elementary.metrics_anomaly_score": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "metrics_anomaly_score", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "unique_id": "model.elementary.metrics_anomaly_score", "fqn": [ "elementary", "edr", "data_monitoring", "anomaly_detection", "metrics_anomaly_score" ], "alias": "metrics_anomaly_score", "checksum": { "name": "sha256", "checksum": "3f91a1e94f7cbbfabc687ad11a18b23af153ca8c06ec4b7e47dca0003d2c6af2" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This is a view on `data_monitoring_metrics` that runs the same query the anomaly detection tests run to calculate anomaly scores. The purpose of this view is to provide visibility to the results of anomaly detection tests.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.9695702, "relation_name": "DOUG_DEMO_V2.ANALYTICS.metrics_anomaly_score", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith data_monitoring_metrics as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('data_monitoring_metrics') }}\n\n),\n\ntime_window_aggregation as (\n\n select\n id,\n full_table_name,\n column_name,\n dimension,\n dimension_value,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n updated_at,\n avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n from data_monitoring_metrics\n {{ dbt_utils.group_by(12) }}\n),\n\nmetrics_anomaly_score as (\n\n select\n id,\n full_table_name,\n column_name,\n dimension,\n dimension_value,\n metric_name,\n case\n when training_stddev is null then null\n when training_stddev = 0 then 0\n else (metric_value - training_avg) / (training_stddev)\n end as anomaly_score,\n metric_value as latest_metric_value,\n bucket_start,\n bucket_end,\n training_avg,\n training_stddev,\n training_start,\n training_end,\n training_set_size,\n max(updated_at) as updated_at\n from time_window_aggregation\n where\n metric_value is not null\n and training_avg is not null\n and training_set_size >= {{ elementary.get_config_var('min_training_set_size') }}\n and bucket_end >= {{ elementary.timeadd('day', '-7', elementary.date_trunc('day', elementary.current_timestamp())) }}\n {{ dbt_utils.group_by(15) }}\n order by bucket_end desc\n\n\n),\n\nfinal as (\n\n select\n id,\n full_table_name,\n column_name,\n dimension,\n dimension_value,\n metric_name,\n anomaly_score,\n latest_metric_value,\n bucket_start,\n bucket_end,\n training_avg,\n training_stddev,\n training_start,\n training_end,\n training_set_size,\n updated_at,\n case\n when abs(anomaly_score) > {{ elementary.get_config_var('anomaly_sensitivity') }} then true\n else false end\n as is_anomaly\n from metrics_anomaly_score\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "refs": [ [ "data_monitoring_metrics" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.group_by", "macro.elementary.get_config_var", "macro.elementary.current_timestamp", "macro.elementary.date_trunc", "macro.elementary.timeadd" ], "nodes": [ "model.elementary.data_monitoring_metrics" ] }, "compiled_path": null }, "model.elementary.anomaly_threshold_sensitivity": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "anomaly_threshold_sensitivity", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "unique_id": "model.elementary.anomaly_threshold_sensitivity", "fqn": [ "elementary", "edr", "data_monitoring", "anomaly_detection", "anomaly_threshold_sensitivity" ], "alias": "anomaly_threshold_sensitivity", "checksum": { "name": "sha256", "checksum": "1a7f349284d76f3de8ba7bd840ceee28b5cdf21912069766c9410aa37f0162f1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This is a view on `metrics_anomaly_score` that calculates if values of metrics from latest runs would have been considered anomalies in different anomaly scores. This can help you decide if there is a need to adjust the `anomaly_score_threshold`.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.9702513, "relation_name": "DOUG_DEMO_V2.ANALYTICS.anomaly_threshold_sensitivity", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith metrics_anomaly_score as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('metrics_anomaly_score') }}\n\n),\n\nscore_sensitivity as (\n\n select\n full_table_name,\n column_name,\n metric_name,\n latest_metric_value,\n training_avg as metric_avg,\n training_stddev as metric_stddev,\n anomaly_score,\n case when abs(anomaly_score) >= 1.5 then true else false end as {{ elementary.quote_column('is_anomaly_1_5') }},\n case when abs(anomaly_score) >= 2 then true else false end as {{ elementary.quote_column('is_anomaly_2') }},\n case when abs(anomaly_score) >= 2.5 then true else false end as {{ elementary.quote_column('is_anomaly_2_5') }},\n case when abs(anomaly_score) >= 3 then true else false end as {{ elementary.quote_column('is_anomaly_3') }},\n case when abs(anomaly_score) >= 3.5 then true else false end as {{ elementary.quote_column('is_anomaly_3_5') }},\n case when abs(anomaly_score) >= 4 then true else false end as {{ elementary.quote_column('is_anomaly_4') }},\n case when abs(anomaly_score) >= 4.5 then true else false end as {{ elementary.quote_column('is_anomaly_4_5') }}\n from metrics_anomaly_score\n where abs(anomaly_score) >= 1.5\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from score_sensitivity", "language": "sql", "refs": [ [ "metrics_anomaly_score" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.quote_column" ], "nodes": [ "model.elementary.metrics_anomaly_score" ] }, "compiled_path": null }, "model.elementary.data_monitoring_metrics": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "data_monitoring_metrics", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "original_file_path": "models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "unique_id": "model.elementary.data_monitoring_metrics", "fqn": [ "elementary", "edr", "data_monitoring", "data_monitoring", "data_monitoring_metrics" ], "alias": "data_monitoring_metrics", "checksum": { "name": "sha256", "checksum": "c628e46ee917ec3194e18c30e987eb080209482f67f242851d885a9a2def8451" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Elementary anomaly detection tests monitor metrics such as volume, freshness and data quality metrics. This incremental table is used to store the metrics over time. On each anomaly detection test, the test queries this table for historical metrics, and compares to the latest values. The table is updated with new metrics on the on-run-end named handle_test_results that is executed at the end of dbt test invocations.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "full_refresh": false }, "created_at": 1675283574.9689255, "relation_name": "DOUG_DEMO_V2.ANALYTICS.data_monitoring_metrics", "raw_code": "{{\n config(\n materialized='incremental',\n unique_key='id',\n on_schema_change='append_new_columns',\n full_refresh=elementary.get_config_var('elementary_full_refresh')\n )\n}}\n\n{{ elementary.empty_data_monitoring_metrics() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.empty_data_monitoring_metrics" ], "nodes": [] }, "compiled_path": null }, "model.elementary.elementary_test_results": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "elementary_test_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/elementary_test_results.sql", "original_file_path": "models/edr/run_results/elementary_test_results.sql", "unique_id": "model.elementary.elementary_test_results", "fqn": [ "elementary", "edr", "run_results", "elementary_test_results" ], "alias": "elementary_test_results", "checksum": { "name": "sha256", "checksum": "53cc833b9469dbac50896f941f7e0faf1be266972be7f14685854081bb4fb378" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Run results of all dbt tests, with fields and metadata needed to produce the Elementary report UI. Each row is the result of a single test, including native dbt tests, packages tests and elementary tests. New data is loaded to this model on an on-run-end hook named `elementary.handle_tests_results`.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "full_refresh": false }, "created_at": 1675283574.9659846, "relation_name": "DOUG_DEMO_V2.ANALYTICS.elementary_test_results", "raw_code": "{{\n config(\n materialized = 'incremental',\n unique_key = 'id',\n on_schema_change = 'append_new_columns',\n full_refresh=elementary.get_config_var('elementary_full_refresh')\n )\n}}\n\n{{ elementary.empty_elementary_test_results() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.empty_elementary_test_results" ], "nodes": [] }, "compiled_path": null }, "model.elementary.model_run_results": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "model_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/model_run_results.sql", "original_file_path": "models/edr/run_results/model_run_results.sql", "unique_id": "model.elementary.model_run_results", "fqn": [ "elementary", "edr", "run_results", "model_run_results" ], "alias": "model_run_results", "checksum": { "name": "sha256", "checksum": "5bee186661f35d7d5341197123f7f347434741c7ac6d14fa7662178ea2fd87dd" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Run results of dbt models, enriched with models metadata. Each row is the result of a single model. This is a view that joins data from `dbt_run_results` and `dbt_models`.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.9666324, "relation_name": "DOUG_DEMO_V2.ANALYTICS.model_run_results", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith dbt_run_results as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dbt_run_results') }}\n),\n\ndbt_models as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dbt_models') }}\n)\n\nSELECT\n run_results.model_execution_id,\n run_results.unique_id,\n run_results.invocation_id,\n run_results.query_id,\n run_results.name,\n run_results.generated_at,\n run_results.status,\n run_results.full_refresh,\n run_results.message,\n run_results.execution_time,\n run_results.execute_started_at,\n run_results.execute_completed_at,\n run_results.compile_started_at,\n run_results.compile_completed_at,\n run_results.compiled_code,\n models.database_name,\n models.schema_name,\n models.materialization,\n models.tags,\n models.package_name,\n models.path,\n models.original_path,\n models.owner,\n models.alias,\n ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY {{ elementary.time_trunc('day', 'run_results.generated_at') }} ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n THEN TRUE\n ELSE FALSE \n END AS is_the_first_invocation_of_the_day,\n CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY {{ elementary.time_trunc('day', 'run_results.generated_at') }} ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n THEN TRUE\n ELSE FALSE \n END AS is_the_last_invocation_of_the_day\n \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "language": "sql", "refs": [ [ "dbt_run_results" ], [ "dbt_models" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.time_trunc" ], "nodes": [ "model.elementary.dbt_run_results", "model.elementary.dbt_models" ] }, "compiled_path": null }, "model.elementary.snapshot_run_results": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "snapshot_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/snapshot_run_results.sql", "original_file_path": "models/edr/run_results/snapshot_run_results.sql", "unique_id": "model.elementary.snapshot_run_results", "fqn": [ "elementary", "edr", "run_results", "snapshot_run_results" ], "alias": "snapshot_run_results", "checksum": { "name": "sha256", "checksum": "455b63b96698b3dba4defcf7b547f84beb97d50238354205acaea967e5b25c75" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Run results of dbt snapshots, enriched with snapshots metadata. Each row is the result of a single snapshot. This is a view that joins data from `dbt_run_results` and `dbt_snapshots`.\n", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.9674358, "relation_name": "DOUG_DEMO_V2.ANALYTICS.snapshot_run_results", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\nwith dbt_run_results as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dbt_run_results') }}\n),\n\ndbt_snapshots as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dbt_snapshots') }}\n)\n\nSELECT\n run_results.model_execution_id,\n run_results.unique_id,\n run_results.invocation_id,\n run_results.query_id,\n run_results.name,\n run_results.generated_at,\n run_results.status,\n run_results.full_refresh,\n run_results.message,\n run_results.execution_time,\n run_results.execute_started_at,\n run_results.execute_completed_at,\n run_results.compile_started_at,\n run_results.compile_completed_at,\n run_results.compiled_code,\n snapshots.database_name,\n snapshots.schema_name,\n snapshots.materialization,\n snapshots.tags,\n snapshots.package_name,\n snapshots.path,\n snapshots.original_path,\n snapshots.owner,\n snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "language": "sql", "refs": [ [ "dbt_run_results" ], [ "dbt_snapshots" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.elementary.dbt_run_results", "model.elementary.dbt_snapshots" ] }, "compiled_path": null }, "model.elementary.job_run_results": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "job_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/job_run_results.sql", "original_file_path": "models/edr/run_results/job_run_results.sql", "unique_id": "model.elementary.job_run_results", "fqn": [ "elementary", "edr", "run_results", "job_run_results" ], "alias": "job_run_results", "checksum": { "name": "sha256", "checksum": "fb52cf92699c04834dbc2d090791168d64d84432fec2d44781915086bbf67abb" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "bind": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Run results of dbt invocations, enriched with jobs metadata. Each row is the result of a single job. This is a view on `dbt_invocations`.", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "bind": false }, "created_at": 1675283574.9680774, "relation_name": "DOUG_DEMO_V2.ANALYTICS.job_run_results", "raw_code": "{{\n config(\n materialized = 'view',\n bind=False\n )\n}}\n\n{% set job_run_started_at %}\nmin({{ elementary.cast_as_timestamp(\"run_started_at\") }})\n{% endset %}\n\n{% set job_run_completed_at %}\nmax({{ elementary.cast_as_timestamp(\"run_completed_at\") }})\n{% endset %}\n\nwith jobs as (\n select\n job_name,\n job_id,\n job_run_id,\n {{ job_run_started_at }} as job_run_started_at,\n {{ job_run_completed_at }} as job_run_completed_at,\n {{ elementary.timediff(\"second\", job_run_started_at, job_run_completed_at) }} as job_run_execution_time\n from {{ ref('dbt_invocations') }}\n where job_id is not null\n group by job_name, job_id, job_run_id\n)\n\nselect\n job_name as name,\n job_id as id,\n job_run_id as run_id,\n job_run_started_at as run_started_at,\n job_run_completed_at as run_completed_at,\n job_run_execution_time as run_execution_time\nfrom jobs", "language": "sql", "refs": [ [ "dbt_invocations" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.cast_as_timestamp", "macro.elementary.timediff" ], "nodes": [ "model.elementary.dbt_invocations" ] }, "compiled_path": null }, "model.elementary.dbt_source_freshness_results": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_source_freshness_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/dbt_source_freshness_results.sql", "original_file_path": "models/edr/run_results/dbt_source_freshness_results.sql", "unique_id": "model.elementary.dbt_source_freshness_results", "fqn": [ "elementary", "edr", "run_results", "dbt_source_freshness_results" ], "alias": "dbt_source_freshness_results", "checksum": { "name": "sha256", "checksum": "9b8602c927a0e6bc35348db0450298ff6e0c0059bcfb3b3f6cdc254d8f4890a2" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "source_freshness_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "unique_key": "source_freshness_execution_id", "on_schema_change": "append_new_columns", "full_refresh": false }, "created_at": 1675283574.2278519, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_source_freshness_results", "raw_code": "{{\n config(\n materialized = 'incremental',\n unique_key = 'source_freshness_execution_id',\n on_schema_change = 'append_new_columns',\n full_refresh=elementary.get_config_var('elementary_full_refresh')\n )\n}}\n\n{{ elementary.empty_dbt_source_freshness_results() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.empty_dbt_source_freshness_results" ], "nodes": [] }, "compiled_path": null }, "operation.elementary.elementary-on-run-start-0": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "elementary-on-run-start-0", "resource_type": "operation", "package_name": "elementary", "path": "hooks/elementary-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.elementary.elementary-on-run-start-0", "fqn": [ "elementary", "hooks", "elementary-on-run-start-0" ], "alias": "elementary-on-run-start-0", "checksum": { "name": "sha256", "checksum": "548997b01d9322c86638fff7bc3385ed50ffc127bcc34371fe2736ae35e72f35" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [ "on-run-start" ], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.2554898, "relation_name": null, "raw_code": "{{ elementary.on_run_start() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.on_run_start" ], "nodes": [] }, "compiled_path": null, "index": 0 }, "operation.elementary.elementary-on-run-end-0": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "elementary-on-run-end-0", "resource_type": "operation", "package_name": "elementary", "path": "hooks/elementary-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.elementary.elementary-on-run-end-0", "fqn": [ "elementary", "hooks", "elementary-on-run-end-0" ], "alias": "elementary-on-run-end-0", "checksum": { "name": "sha256", "checksum": "548997b01d9322c86638fff7bc3385ed50ffc127bcc34371fe2736ae35e72f35" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [ "on-run-end" ], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.2645783, "relation_name": null, "raw_code": "{{ elementary.on_run_end() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.elementary.on_run_end" ], "nodes": [] }, "compiled_path": null, "index": 0 }, "model.metrics.dbt_metrics_default_calendar": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dbt_metrics_default_calendar", "resource_type": "model", "package_name": "metrics", "path": "dbt_metrics_default_calendar.sql", "original_file_path": "models/dbt_metrics_default_calendar.sql", "unique_id": "model.metrics.dbt_metrics_default_calendar", "fqn": [ "metrics", "dbt_metrics_default_calendar" ], "alias": "dbt_metrics_default_calendar", "checksum": { "name": "sha256", "checksum": "ceff0a953c0648d9c90dcface95c193f7a40f29bce75a902581315cd35f7141a" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table" }, "created_at": 1675283574.2828205, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dbt_metrics_default_calendar", "raw_code": "{{ config(materialized='table') }}\n\nwith days as (\n {{ metrics.metric_date_spine(\n datepart=\"day\",\n start_date=\"cast('1990-01-01' as date)\",\n end_date=\"cast('2030-01-01' as date)\"\n )\n }}\n),\n\nfinal as (\n select \n cast(date_day as date) as date_day,\n cast({{ date_trunc('week', 'date_day') }} as date) as date_week,\n cast({{ date_trunc('month', 'date_day') }} as date) as date_month,\n cast({{ date_trunc('quarter', 'date_day') }} as date) as date_quarter,\n cast({{ date_trunc('year', 'date_day') }} as date) as date_year\n from days\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.metrics.metric_date_spine", "macro.dbt.date_trunc" ], "nodes": [] }, "compiled_path": null }, "test.tpch.unique_materialization_incremental_customer_key.325783f327": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_materialization_incremental_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.unique_materialization_incremental_customer_key.325783f327", "fqn": [ "tpch", "demo_examples", "unique_materialization_incremental_customer_key" ], "alias": "unique_materialization_incremental_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4135954, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "materialization_incremental" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.materialization_incremental" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.materialization_incremental" }, "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_materialization_incremental_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "fqn": [ "tpch", "demo_examples", "not_null_materialization_incremental_customer_key" ], "alias": "not_null_materialization_incremental_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.415842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "materialization_incremental" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.materialization_incremental" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.materialization_incremental" }, "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_use_variables_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.unique_use_variables_order_item_key.fb5576fe0e", "fqn": [ "tpch", "demo_examples", "unique_use_variables_order_item_key" ], "alias": "unique_use_variables_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.417636, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "use_variables" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.use_variables" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.use_variables" }, "test.tpch.not_null_use_variables_order_item_key.c2bd602686": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_use_variables_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "fqn": [ "tpch", "demo_examples", "not_null_use_variables_order_item_key" ], "alias": "not_null_use_variables_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4194257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "use_variables" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.use_variables" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.use_variables" }, "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_customers_customer_key" ], "alias": "unique_stg_tpch_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4879515, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_customers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_customers" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers" }, "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_customers_customer_key" ], "alias": "not_null_stg_tpch_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4897144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_customers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_customers" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers" }, "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_line_items_order_item_key" ], "alias": "unique_stg_tpch_line_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4914913, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_line_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_line_items" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items" }, "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_line_items_order_item_key" ], "alias": "not_null_stg_tpch_line_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4932792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_line_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_line_items" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items" }, "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_nations_nation_key" ], "alias": "unique_stg_tpch_nations_nation_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.495402, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_nations" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_nations" ] }, "compiled_path": null, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations" }, "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_nations_nation_key" ], "alias": "not_null_stg_tpch_nations_nation_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4971488, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_nations" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_nations" ] }, "compiled_path": null, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations" }, "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_orders_order_key" ], "alias": "unique_stg_tpch_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.4989517, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders" }, "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_orders_order_key" ], "alias": "not_null_stg_tpch_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5007076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders" }, "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_part_suppliers_part_supplier_key" ], "alias": "unique_stg_tpch_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5024962, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_part_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_part_suppliers" ] }, "compiled_path": null, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers" }, "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_part_suppliers_part_supplier_key" ], "alias": "not_null_stg_tpch_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5044982, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_part_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_part_suppliers" ] }, "compiled_path": null, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers" }, "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_parts_part_key" ], "alias": "unique_stg_tpch_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5062711, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_parts" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "compiled_path": null, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts" }, "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_parts_part_key" ], "alias": "not_null_stg_tpch_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5080214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_parts" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "compiled_path": null, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts" }, "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_regions_region_key" ], "alias": "unique_stg_tpch_regions_region_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.509784, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_regions" ] }, "compiled_path": null, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions" }, "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_regions_region_key" ], "alias": "not_null_stg_tpch_regions_region_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5118358, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_regions" ] }, "compiled_path": null, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions" }, "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_suppliers_supplier_key" ], "alias": "unique_stg_tpch_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.51358, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "compiled_path": null, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers" }, "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/stg_tpch.yml", "unique_id": "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_suppliers_supplier_key" ], "alias": "not_null_stg_tpch_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.5153666, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "stg_tpch_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "compiled_path": null, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers" }, "test.tpch.unique_dim_customers_customer_key.ad8156656e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_dim_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_dim_customers_customer_key.ad8156656e", "fqn": [ "tpch", "marts", "core", "unique_dim_customers_customer_key" ], "alias": "unique_dim_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6139033, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "dim_customers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_customers" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.dim_customers" }, "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_dim_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "fqn": [ "tpch", "marts", "core", "not_null_dim_customers_customer_key" ], "alias": "not_null_dim_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6157897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "dim_customers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_customers" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.dim_customers" }, "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": { "test_metadata": { "name": "accepted_values", "kwargs": { "values": [ "AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA" ], "column_name": "region", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA", "resource_type": "test", "package_name": "tpch", "path": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "fqn": [ "tpch", "marts", "core", "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA" ], "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "warn", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc" }, "created_at": 1675283574.6181374, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}", "language": "sql", "refs": [ [ "dim_customers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery" ], "nodes": [ "model.tpch.dim_customers" ] }, "compiled_path": null, "column_name": "region", "file_key_name": "models.dim_customers" }, "test.tpch.unique_dim_parts_part_key.712df18d58": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_dim_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_parts_part_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_dim_parts_part_key.712df18d58", "fqn": [ "tpch", "marts", "core", "unique_dim_parts_part_key" ], "alias": "unique_dim_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.633668, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "dim_parts" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_parts" ] }, "compiled_path": null, "column_name": "part_key", "file_key_name": "models.dim_parts" }, "test.tpch.not_null_dim_parts_part_key.4358f880d9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_dim_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_parts_part_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_dim_parts_part_key.4358f880d9", "fqn": [ "tpch", "marts", "core", "not_null_dim_parts_part_key" ], "alias": "not_null_dim_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6354942, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "dim_parts" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_parts" ] }, "compiled_path": null, "column_name": "part_key", "file_key_name": "models.dim_parts" }, "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770", "fqn": [ "tpch", "marts", "core", "unique_dim_suppliers_supplier_key" ], "alias": "unique_dim_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6372492, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "dim_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_suppliers" ] }, "compiled_path": null, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers" }, "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "fqn": [ "tpch", "marts", "core", "not_null_dim_suppliers_supplier_key" ], "alias": "not_null_dim_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6390648, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "dim_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_suppliers" ] }, "compiled_path": null, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers" }, "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_fct_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_fct_order_items_order_item_key.4d6426a255", "fqn": [ "tpch", "marts", "core", "unique_fct_order_items_order_item_key" ], "alias": "unique_fct_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6411135, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.fct_order_items" }, "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_fct_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "fqn": [ "tpch", "marts", "core", "not_null_fct_order_items_order_item_key" ], "alias": "not_null_fct_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6429343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.fct_order_items" }, "test.tpch.unique_fct_orders_order_key.f5e7a90273": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_fct_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "unique_fct_orders_order_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_fct_orders_order_key.f5e7a90273", "fqn": [ "tpch", "marts", "core", "unique_fct_orders_order_key" ], "alias": "unique_fct_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6447377, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.fct_orders" ] }, "compiled_path": null, "column_name": "order_key", "file_key_name": "models.fct_orders" }, "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_fct_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_fct_orders_order_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "fqn": [ "tpch", "marts", "core", "not_null_fct_orders_order_key" ], "alias": "not_null_fct_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.6465816, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.fct_orders" ] }, "compiled_path": null, "column_name": "order_key", "file_key_name": "models.fct_orders" }, "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": { "test_metadata": { "name": "relationships", "kwargs": { "to": "ref('dim_customers')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_", "resource_type": "test", "package_name": "tpch", "path": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "fqn": [ "tpch", "marts", "core", "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_" ], "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "error", "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae" }, "created_at": 1675283574.649156, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae\") }}", "language": "sql", "refs": [ [ "dim_customers" ], [ "fct_orders" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "model.tpch.dim_customers", "model.tpch.fct_orders" ] }, "compiled_path": null, "column_name": "customer_key", "file_key_name": "models.fct_orders" }, "test.tpch.unique_order_items_order_item_key.43a40b2837": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.unique_order_items_order_item_key.43a40b2837", "fqn": [ "tpch", "marts", "intermediate", "unique_order_items_order_item_key" ], "alias": "unique_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7780569, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.order_items" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.order_items" }, "test.tpch.not_null_order_items_order_item_key.44b9fa7311": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "fqn": [ "tpch", "marts", "intermediate", "not_null_order_items_order_item_key" ], "alias": "not_null_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7800353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "order_items" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.order_items" ] }, "compiled_path": null, "column_name": "order_item_key", "file_key_name": "models.order_items" }, "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8", "fqn": [ "tpch", "marts", "intermediate", "unique_part_suppliers_part_supplier_key" ], "alias": "unique_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.7821147, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "part_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.part_suppliers" ] }, "compiled_path": null, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers" }, "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "fqn": [ "tpch", "marts", "intermediate", "not_null_part_suppliers_part_supplier_key" ], "alias": "not_null_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.783897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ [ "part_suppliers" ] ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.part_suppliers" ] }, "compiled_path": null, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers" }, "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "link", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_link", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_link.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_link" ], "alias": "source_not_null_dbtc_link_clicked_link", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1675283574.9842536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "compiled_path": null, "column_name": "link", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_id" ], "alias": "source_not_null_dbtc_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9862244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_dbtc_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_dbtc_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc", "fqn": [ "tpch", "staging", "segment", "source_unique_dbtc_link_clicked_id" ], "alias": "source_unique_dbtc_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9882452, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_event" ], "alias": "source_not_null_dbtc_link_clicked_event", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.990042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "compiled_path": null, "column_name": "event", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_sent_at" ], "alias": "source_not_null_dbtc_link_clicked_sent_at", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9918065, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "compiled_path": null, "column_name": "sent_at", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_pages_id" ], "alias": "source_not_null_dbtc_pages_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9939332, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_dbtc_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_dbtc_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_unique_dbtc_pages_id.8457cf34c6", "fqn": [ "tpch", "staging", "segment", "source_unique_dbtc_pages_id" ], "alias": "source_unique_dbtc_pages_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9957395, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_pages_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_pages_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_pages_sent_at" ], "alias": "source_not_null_dbtc_pages_sent_at", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9977357, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "compiled_path": null, "column_name": "sent_at", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event_text", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_event_text", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_event_text.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_event_text" ], "alias": "source_not_null_dbtc_tracks_event_text", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283574.9997973, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "compiled_path": null, "column_name": "event_text", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_id" ], "alias": "source_not_null_dbtc_tracks_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0015507, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_dbtc_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_dbtc_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628", "fqn": [ "tpch", "staging", "segment", "source_unique_dbtc_tracks_id" ], "alias": "source_unique_dbtc_tracks_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0033562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_event" ], "alias": "source_not_null_dbtc_tracks_event", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.006357, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "compiled_path": null, "column_name": "event", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_sent_at" ], "alias": "source_not_null_dbtc_tracks_sent_at", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0084846, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "compiled_path": null, "column_name": "sent_at", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "link", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_link", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_link.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_link" ], "alias": "source_not_null_yahooquery_link_clicked_link", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1675283575.0112467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "compiled_path": null, "column_name": "link", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_id" ], "alias": "source_not_null_yahooquery_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0130205, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_yahooquery_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_yahooquery_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289", "fqn": [ "tpch", "staging", "segment", "source_unique_yahooquery_link_clicked_id" ], "alias": "source_unique_yahooquery_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0151122, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_event" ], "alias": "source_not_null_yahooquery_link_clicked_event", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0168476, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "compiled_path": null, "column_name": "event", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_sent_at" ], "alias": "source_not_null_yahooquery_link_clicked_sent_at", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0186284, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "compiled_path": null, "column_name": "sent_at", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_pages_id" ], "alias": "source_not_null_yahooquery_pages_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0206745, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_yahooquery_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_yahooquery_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d", "fqn": [ "tpch", "staging", "segment", "source_unique_yahooquery_pages_id" ], "alias": "source_unique_yahooquery_pages_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0227199, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_pages_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_pages_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_pages_sent_at" ], "alias": "source_not_null_yahooquery_pages_sent_at", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0244896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "compiled_path": null, "column_name": "sent_at", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event_text", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_event_text", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_event_text.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_event_text" ], "alias": "source_not_null_yahooquery_tracks_event_text", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0265448, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "compiled_path": null, "column_name": "event_text", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_id.621874b412", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_id" ], "alias": "source_not_null_yahooquery_tracks_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.028303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_yahooquery_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_yahooquery_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9", "fqn": [ "tpch", "staging", "segment", "source_unique_yahooquery_tracks_id" ], "alias": "source_unique_yahooquery_tracks_id", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0301187, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "compiled_path": null, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_event" ], "alias": "source_not_null_yahooquery_tracks_event", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0321493, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "compiled_path": null, "column_name": "event", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_sent_at" ], "alias": "source_not_null_yahooquery_tracks_sent_at", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0339956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "compiled_path": null, "column_name": "sent_at", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_orders_o_orderkey" ], "alias": "source_not_null_tpch_orders_o_orderkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.036045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.orders" ] }, "compiled_path": null, "column_name": "o_orderkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_orders_o_orderkey" ], "alias": "source_unique_tpch_orders_o_orderkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0378397, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.orders" ] }, "compiled_path": null, "column_name": "o_orderkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'customer')", "field": "c_custkey", "column_name": "o_custkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_" ], "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b" }, "created_at": 1675283575.0399246, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ], [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.customer", "source.tpch.tpch.orders" ] }, "compiled_path": null, "column_name": "o_custkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_customer_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_customer_c_custkey" ], "alias": "source_not_null_tpch_customer_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0464625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "column_name": "c_custkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_customer_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_customer_c_custkey" ], "alias": "source_unique_tpch_customer_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.048473, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "column_name": "c_custkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "c_nationkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_" ], "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7" }, "created_at": 1675283575.0502715, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ], [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.nation", "source.tpch.tpch.customer" ] }, "compiled_path": null, "column_name": "c_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'orders')", "field": "o_orderkey", "column_name": "l_orderkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_" ], "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c" }, "created_at": 1675283575.0566351, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ], [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.orders", "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "column_name": "l_orderkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "l_partkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_" ], "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740" }, "created_at": 1675283575.0627396, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ], [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part", "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "column_name": "l_partkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "l_suppkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_" ], "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292" }, "created_at": 1675283575.068513, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_56b786676a582f41b4502498079b8292\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ], [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.supplier", "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "column_name": "l_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_nation_n_nationkey" ], "alias": "source_not_null_tpch_nation_n_nationkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.074881, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.nation" ] }, "compiled_path": null, "column_name": "n_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_nation_n_nationkey" ], "alias": "source_unique_tpch_nation_n_nationkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0768807, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.nation" ] }, "compiled_path": null, "column_name": "n_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'region')", "field": "r_regionkey", "column_name": "n_regionkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_" ], "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039" }, "created_at": 1675283575.078685, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_nati_863138f31f617783ad556b879ab65039\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ], [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.region", "source.tpch.tpch.nation" ] }, "compiled_path": null, "column_name": "n_regionkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_part_p_partkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_part_p_partkey" ], "alias": "source_not_null_tpch_part_p_partkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0850463, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "column_name": "p_partkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_part_p_partkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_part_p_partkey.30b171988e", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_part_p_partkey" ], "alias": "source_unique_tpch_part_p_partkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.0868826, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "column_name": "p_partkey", "file_key_name": "sources.tpch" }, "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": { "test_metadata": { "name": "accepted_range", "kwargs": { "min_value": 0, "max_value": 2000, "column_name": "p_retailprice", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": "dbt_utils" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0", "resource_type": "test", "package_name": "tpch", "path": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "fqn": [ "tpch", "staging", "tpch", "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0" ], "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008" }, "created_at": 1675283575.0895796, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "column_name": "p_retailprice", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "ps_partkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_" ], "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8" }, "created_at": 1675283575.104294, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ], [ "tpch", "partsupp" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part", "source.tpch.tpch.partsupp" ] }, "compiled_path": null, "column_name": "ps_partkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "ps_suppkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_" ], "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817" }, "created_at": 1675283575.1137502, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ], [ "tpch", "partsupp" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.supplier", "source.tpch.tpch.partsupp" ] }, "compiled_path": null, "column_name": "ps_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_region_r_regionkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_region_r_regionkey" ], "alias": "source_not_null_tpch_region_r_regionkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.1230085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "column_name": "r_regionkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_region_r_regionkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_region_r_regionkey" ], "alias": "source_unique_tpch_region_r_regionkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.1257517, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "column_name": "r_regionkey", "file_key_name": "sources.tpch" }, "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": { "test_metadata": { "name": "accepted_values", "kwargs": { "values": [ "AFRICA", "AMERICA", "ASIA", "EUROPE", "MIDDLE EAST" ], "column_name": "r_name", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST", "resource_type": "test", "package_name": "tpch", "path": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "fqn": [ "tpch", "staging", "tpch", "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST" ], "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24" }, "created_at": 1675283575.128547, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "column_name": "r_name", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_supplier_s_suppkey" ], "alias": "source_not_null_tpch_supplier_s_suppkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.137562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null, "column_name": "s_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_supplier_s_suppkey" ], "alias": "source_unique_tpch_supplier_s_suppkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1675283575.1393588, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null, "column_name": "s_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "s_nationkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_" ], "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b" }, "created_at": 1675283575.141408, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ], [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.nation", "source.tpch.tpch.supplier" ] }, "compiled_path": null, "column_name": "s_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey" ], "alias": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1675283575.1481938, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch_snapshot", "customer_snapshot_src" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ] }, "compiled_path": null, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot" }, "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey" ], "alias": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1675283575.1505258, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch_snapshot", "customer_snapshot_src" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ] }, "compiled_path": null, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot" } }, "sources": { "source.tpch.deutsche_boerse.trading_data": { "database": "analytics", "schema": "boerse", "name": "trading_data", "resource_type": "source", "package_name": "tpch", "path": "models/demo_examples/external_sources.yml", "original_file_path": "models/demo_examples/external_sources.yml", "unique_id": "source.tpch.deutsche_boerse.trading_data", "fqn": [ "tpch", "demo_examples", "deutsche_boerse", "trading_data" ], "source_name": "deutsche_boerse", "source_description": "This is an example of using external sources", "loader": "", "identifier": "trading_data", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": { "location": "@boerse", "file_format": "(type=csv field_delimiter=',' skip_header=1)", "row_format": null, "tbl_properties": null, "partitions": [ { "name": "source_file_name", "data_type": "varchar", "expression": "metadata$filename" } ], "auto_refresh": false }, "description": "The Deutsche Börse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.\n", "columns": { "ISIN": { "name": "ISIN", "description": "ISIN of the security", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "MarketSegment": { "name": "MarketSegment", "description": "The product market segment, following the convention on http://www.eurexchange.com", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "UnderlyingSymbol": { "name": "UnderlyingSymbol", "description": "The underlying security", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "UnderlyingISIN": { "name": "UnderlyingISIN", "description": "ISIN of any underlying security\t", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "Currency": { "name": "Currency", "description": "Currency in which the product is traded\t(ISO 4127)", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "SecurityType": { "name": "SecurityType", "description": "Type of instrument", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "MaturityDate": { "name": "MaturityDate", "description": "Maturity date of the security", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "StrikePrice": { "name": "StrikePrice", "description": "Strike price", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "PutOrCall": { "name": "PutOrCall", "description": "Type of option (string: PUT or CALL)", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "MLEG": { "name": "MLEG", "description": "Identifies multi-leg options", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "ContractGenerationNumber": { "name": "ContractGenerationNumber", "description": "The generation number for options contracts", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "SecurityID": { "name": "SecurityID", "description": "Unique identifier for each contract", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "Date": { "name": "Date", "description": "Date of trading period", "meta": {}, "data_type": "DATE", "quote": null, "tags": [] }, "Time": { "name": "Time", "description": "Minute of trading to which this entry relates", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "StartPrice": { "name": "StartPrice", "description": "Trading price at the start of period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "MaxPrice": { "name": "MaxPrice", "description": "Maximum price over the period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "MinPrice": { "name": "MinPrice", "description": "Minimum price over the period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "EndPrice": { "name": "EndPrice", "description": "Trading price at the end of the period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "NumberOfContracts": { "name": "NumberOfContracts", "description": "Number of contracts traded during the period", "meta": {}, "data_type": "INT", "quote": null, "tags": [] }, "NumberOfTrades": { "name": "NumberOfTrades", "description": "Number of distinct trades during the period", "meta": {}, "data_type": "INT", "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.boerse.trading_data", "created_at": 1675283574.973876 }, "source.tpch.test_eqrx_s3.dummy_data": { "database": "DOUG_DEMO_V2", "schema": "dbt_dguthrie", "name": "dummy_data", "resource_type": "source", "package_name": "tpch", "path": "models/demo_examples/demo_examples.yml", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "source.tpch.test_eqrx_s3.dummy_data", "fqn": [ "tpch", "demo_examples", "test_eqrx_s3", "dummy_data" ], "source_name": "test_eqrx_s3", "source_description": "", "loader": "", "identifier": "dummy_data", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": { "location": "@eqrx_test", "file_format": "( type = csv )", "row_format": null, "tbl_properties": null, "partitions": null }, "description": "Testing EQRx setup", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbt_dguthrie.dummy_data", "created_at": 1675283574.9742484 }, "source.tpch.dbtc.link_clicked": { "database": "DOUG_DEMO_V2", "schema": "dbtc", "name": "link_clicked", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "source.tpch.dbtc.link_clicked", "fqn": [ "tpch", "staging", "segment", "dbtc", "link_clicked" ], "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "link_clicked", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "link": { "name": "link", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbtc.link_clicked", "created_at": 1675283574.9928858 }, "source.tpch.dbtc.pages": { "database": "DOUG_DEMO_V2", "schema": "dbtc", "name": "pages", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "source.tpch.dbtc.pages", "fqn": [ "tpch", "staging", "segment", "dbtc", "pages" ], "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "pages", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbtc.pages", "created_at": 1675283574.9988024 }, "source.tpch.dbtc.tracks": { "database": "DOUG_DEMO_V2", "schema": "dbtc", "name": "tracks", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "source.tpch.dbtc.tracks", "fqn": [ "tpch", "staging", "segment", "dbtc", "tracks" ], "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "tracks", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "event_text": { "name": "event_text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbtc.tracks", "created_at": 1675283575.0095303 }, "source.tpch.yahooquery.link_clicked": { "database": "DOUG_DEMO_V2", "schema": "yahooquery", "name": "link_clicked", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "source.tpch.yahooquery.link_clicked", "fqn": [ "tpch", "staging", "segment", "yahooquery", "link_clicked" ], "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "link_clicked", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "link": { "name": "link", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.yahooquery.link_clicked", "created_at": 1675283575.0196705 }, "source.tpch.yahooquery.pages": { "database": "DOUG_DEMO_V2", "schema": "yahooquery", "name": "pages", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "source.tpch.yahooquery.pages", "fqn": [ "tpch", "staging", "segment", "yahooquery", "pages" ], "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "pages", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.yahooquery.pages", "created_at": 1675283575.0255165 }, "source.tpch.yahooquery.tracks": { "database": "DOUG_DEMO_V2", "schema": "yahooquery", "name": "tracks", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "unique_id": "source.tpch.yahooquery.tracks", "fqn": [ "tpch", "staging", "segment", "yahooquery", "tracks" ], "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "tracks", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "event_text": { "name": "event_text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.yahooquery.tracks", "created_at": 1675283575.035055 }, "source.tpch.tpch.orders": { "database": "doug_demo_v2", "schema": "tpch", "name": "orders", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.orders", "fqn": [ "tpch", "staging", "tpch", "tpch", "orders" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "orders", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main order tracking table", "columns": { "o_orderkey": { "name": "o_orderkey", "description": "SF*1,500,000 are sparsely populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_custkey": { "name": "o_custkey", "description": "Foreign Key to C_CUSTKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_orderstatus": { "name": "o_orderstatus", "description": "status code of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_totalprice": { "name": "o_totalprice", "description": "raw price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_orderdate": { "name": "o_orderdate", "description": "date the order was made", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_orderpriority": { "name": "o_orderpriority", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_clerk": { "name": "o_clerk", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_shippriority": { "name": "o_shippriority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_comment": { "name": "o_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.orders", "created_at": 1675283575.0454297 }, "source.tpch.tpch.customer": { "database": "doug_demo_v2", "schema": "tpch", "name": "customer", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.customer", "fqn": [ "tpch", "staging", "tpch", "tpch", "customer" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "customer", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main customer table", "columns": { "c_custkey": { "name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_name": { "name": "c_name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_address": { "name": "c_address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_nationkey": { "name": "c_nationkey", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_phone": { "name": "c_phone", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_acctbal": { "name": "c_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_mktsegment": { "name": "c_mktsegment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_comment": { "name": "c_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.customer", "created_at": 1675283575.0555692 }, "source.tpch.tpch.lineitem": { "database": "doug_demo_v2", "schema": "tpch", "name": "lineitem", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.lineitem", "fqn": [ "tpch", "staging", "tpch", "tpch", "lineitem" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "lineitem", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main lineitem table", "columns": { "l_orderkey": { "name": "l_orderkey", "description": "Foreign Key to O_ORDERKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_partkey": { "name": "l_partkey", "description": "Foreign key to P_PARTKEY, first part of the compound Foreign Key to (PS_PARTKEY,PS_SUPPKEY) with L_SUPPKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_suppkey": { "name": "l_suppkey", "description": "Foreign key to S_SUPPKEY, second part of the compound Foreign Key to (PS_PARTKEY, PS_SUPPKEY) with L_PARTKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_linenumber": { "name": "l_linenumber", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_quantity": { "name": "l_quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_extendedprice": { "name": "l_extendedprice", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_discount": { "name": "l_discount", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_tax": { "name": "l_tax", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_returnflag": { "name": "l_returnflag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_linestatus": { "name": "l_linestatus", "description": "status code of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_shipdate": { "name": "l_shipdate", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_commitdate": { "name": "l_commitdate", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_receiptdate": { "name": "l_receiptdate", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_shipinstruct": { "name": "l_shipinstruct", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_shipmode": { "name": "l_shipmode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_comment": { "name": "l_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.lineitem", "created_at": 1675283575.0738535 }, "source.tpch.tpch.nation": { "database": "doug_demo_v2", "schema": "tpch", "name": "nation", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.nation", "fqn": [ "tpch", "staging", "tpch", "tpch", "nation" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "nation", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "nation mapping", "columns": { "n_nationkey": { "name": "n_nationkey", "description": "25 nations are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "n_name": { "name": "n_name", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "n_regionkey": { "name": "n_regionkey", "description": "Foreign Key to R_REGIONKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "n_comment": { "name": "n_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.nation", "created_at": 1675283575.084012 }, "source.tpch.tpch.part": { "database": "doug_demo_v2", "schema": "tpch", "name": "part", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.part", "fqn": [ "tpch", "staging", "tpch", "tpch", "part" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "part", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main part table", "columns": { "p_partkey": { "name": "p_partkey", "description": "SF*200,000 are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_name": { "name": "p_name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_mfgr": { "name": "p_mfgr", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_brand": { "name": "p_brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_type": { "name": "p_type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_size": { "name": "p_size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_container": { "name": "p_container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_retailprice": { "name": "p_retailprice", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_comment": { "name": "p_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.part", "created_at": 1675283575.1026478 }, "source.tpch.tpch.partsupp": { "database": "doug_demo_v2", "schema": "tpch", "name": "partsupp", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.partsupp", "fqn": [ "tpch", "staging", "tpch", "tpch", "partsupp" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "partsupp", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main part supplier table", "columns": { "ps_partkey": { "name": "ps_partkey", "description": "Foreign Key to P_PARTKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_suppkey": { "name": "ps_suppkey", "description": "Foreign Key to S_SUPPKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_availqty": { "name": "ps_availqty", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_supplycost": { "name": "ps_supplycost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_comment": { "name": "ps_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.partsupp", "created_at": 1675283575.121395 }, "source.tpch.tpch.region": { "database": "doug_demo_v2", "schema": "tpch", "name": "region", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.region", "fqn": [ "tpch", "staging", "tpch", "tpch", "region" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "region", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "region mapping", "columns": { "r_regionkey": { "name": "r_regionkey", "description": "5 regions are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "r_name": { "name": "r_name", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "r_comment": { "name": "r_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.region", "created_at": 1675283575.1365528 }, "source.tpch.tpch.supplier": { "database": "doug_demo_v2", "schema": "tpch", "name": "supplier", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch.supplier", "fqn": [ "tpch", "staging", "tpch", "tpch", "supplier" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "supplier", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "main supplier table", "columns": { "s_suppkey": { "name": "s_suppkey", "description": "SF*10,000 are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_name": { "name": "s_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_address": { "name": "s_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_nationkey": { "name": "s_nationkey", "description": "Foreign Key to N_NATIONKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_phone": { "name": "s_phone", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_acctbal": { "name": "s_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_comment": { "name": "s_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.supplier", "created_at": 1675283575.1464212 }, "source.tpch.tpch_snapshot.customer_snapshot_src": { "database": "analytics", "schema": "dbt_mwinkler", "name": "customer_snapshot_src", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/tpch_sources.yml", "original_file_path": "models/staging/tpch/tpch_sources.yml", "unique_id": "source.tpch.tpch_snapshot.customer_snapshot_src", "fqn": [ "tpch", "staging", "tpch", "tpch_snapshot", "customer_snapshot_src" ], "source_name": "tpch_snapshot", "source_description": "", "loader": "", "identifier": "customer_snapshot_src", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "slowly changing dimension table", "columns": { "c_custkey": { "name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_name": { "name": "c_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_address": { "name": "c_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_nationkey": { "name": "c_nationkey", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_phone": { "name": "c_phone", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_acctbal": { "name": "c_acctbal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_mktsegment": { "name": "c_mktsegment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_comment": { "name": "c_comment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.dbt_mwinkler.customer_snapshot_src", "created_at": 1675283575.1516101 } }, "macros": { "macro.tpch.omit_soft_deletions": { "name": "omit_soft_deletions", "resource_type": "macro", "package_name": "tpch", "path": "macros/omit_soft_deletions.sql", "original_file_path": "macros/omit_soft_deletions.sql", "unique_id": "macro.tpch.omit_soft_deletions", "macro_sql": "{% macro omit_soft_deletions(table, columns) %}\n\n select {{ ', '.join(columns) }}\n from {{ table }}\n where not is_deleted\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.5904255, "supported_languages": null }, "macro.tpch.create_area_of_circle": { "name": "create_area_of_circle", "resource_type": "macro", "package_name": "tpch", "path": "macros/udf_area_of_circle.sql", "original_file_path": "macros/udf_area_of_circle.sql", "unique_id": "macro.tpch.create_area_of_circle", "macro_sql": "{% macro create_area_of_circle() %}\n\nuse database {{target.database}};\n\ndrop function if exists {{target.schema}}.area_of_circle(float);\n\ncreate function {{target.schema}}.area_of_circle(radius float)\n returns float\n as\n $$\n pi() README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests radius README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests radius\n $$\n ;\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "Continuation of UDF example", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1675283574.3608744, "supported_languages": null }, "macro.tpch.drop_ci_schemas": { "name": "drop_ci_schemas", "resource_type": "macro", "package_name": "tpch", "path": "macros/drop_ci_schemas.sql", "original_file_path": "macros/drop_ci_schemas.sql", "unique_id": "macro.tpch.drop_ci_schemas", "macro_sql": "{% macro drop_ci_schemas(database=target.database, dryrun=True) %}\n\n {% set all_schemas_to_drop = [] %}\n\n {% set drop_schema_sql %}\n\n {% set find_schemas_sql %}\n SELECT SCHEMA_NAME\n FROM {{ database | upper }}.INFORMATION_SCHEMA.SCHEMATA\n WHERE SCHEMA_NAME LIKE 'DBT_CLOUD_PR_%';\n {% endset %}\n\n {% set schemas_to_drop = run_query(find_schemas_sql) %}\n\n {% for row in schemas_to_drop %}\n DROP SCHEMA {{ database | upper }}.{{ row[0] | upper }};\n {% do all_schemas_to_drop.append('{}.{}'.format(database.upper(), row[0].upper())) %}\n {% endfor %}\n\n {% endset %}\n\n {% if all_schemas_to_drop %}\n {% if dryrun %}\n {% do log('*NOT* dropping {}'.format(all_schemas_to_drop), info=True) %}\n {% else %}\n {% do log('Dropping: {} ...'.format(all_schemas_to_drop), info=True) %}\n {% do run_query(drop_schema_sql) %}\n {% do log('Done.', info=True) %}\n {% endif %}\n {% else %}\n {% do log('No schemas to drop!', info=True) %}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.594545, "supported_languages": null }, "macro.tpch.unit_test_mode": { "name": "unit_test_mode", "resource_type": "macro", "package_name": "tpch", "path": "macros/unit_test_mode.sql", "original_file_path": "macros/unit_test_mode.sql", "unique_id": "macro.tpch.unit_test_mode", "macro_sql": "{% macro unit_test_mode() %}\n \n {% if var is not defined %}\n {{ return(False) }}\n\n {% elif var('test') == 'true' %}\n {{ return(True) }}\n\n {% else %}\n {{ return(False) }}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "An example of how to create a unit test", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1675283574.3602424, "supported_languages": null }, "macro.tpch.drop_old_nodes": { "name": "drop_old_nodes", "resource_type": "macro", "package_name": "tpch", "path": "macros/drop_old_nodes.sql", "original_file_path": "macros/drop_old_nodes.sql", "unique_id": "macro.tpch.drop_old_nodes", "macro_sql": "{% macro drop_old_nodes(dryrun=True) %}\n\n {% set nodes = graph.nodes.values() | list %}\n\n {% set dbs = nodes | map(attribute='database') | unique %}\n\n {% set all_tables_to_drop = [] %}\n\n {% set drop_table_sql %}\n\n {% for db in dbs %}\n\n -- Database: {{ db }}\n\n {% set schemas = nodes | selectattr('database', '==', db) | map(attribute='schema') | unique %}\n\n {% for schema in schemas %}\n\n -- Schema: {{ schema }}\n\n {% set model_names = nodes | selectattr('database', '==', db) | selectattr('schema', '==', schema) | map(attribute='name') | map('upper') | join(\"', '\") %}\n\n {% set find_tables_sql %}\n USE DATABASE {{ db }};\n SELECT DISTINCT TABLE_NAME, TABLE_TYPE\n FROM INFORMATION_SCHEMA.TABLES\n WHERE TABLE_SCHEMA = '{{ schema | upper }}'\n AND TABLE_TYPE IN ('VIEW', 'BASE TABLE')\n AND TABLE_NAME NOT IN ('{{ model_names }}');\n {% endset %}\n {% set tables_to_drop = run_query(find_tables_sql) %}\n\n {% for row in tables_to_drop %}\n DROP {% if row[1] == 'BASE TABLE' %}TABLE{% else %}VIEW{% endif %} {{ db | upper }}.{{ schema | upper }}.{{ row[0] }};\n {% do all_tables_to_drop.append('{}.{}.{}'.format(db.upper(), schema.upper(), row[0].upper())) %}\n {% endfor %}\n\n\n {% endfor %}\n {% endfor %}\n\n {% endset %}\n\n {% if all_tables_to_drop %}\n {% if dryrun %}\n {% do log('*NOT* dropping {}'.format(all_tables_to_drop), info=True) %}\n {% else %}\n {% do log('Dropping: {} ...'.format(all_tables_to_drop), info=True) %}\n {% do run_query(drop_table_sql) %}\n {% do log('Done.', info=True) %}\n {% endif %}\n {% else %}\n {% do log('No tables to drop!', info=True) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.601696, "supported_languages": null }, "macro.tpch.create_udfs": { "name": "create_udfs", "resource_type": "macro", "package_name": "tpch", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.tpch.create_udfs", "macro_sql": "{% macro create_udfs() %}\n\n{% do run_query(create_area_of_circle()) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.tpch.create_area_of_circle" ] }, "description": "An example of how to create UDFs via macros", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1675283574.3569987, "supported_languages": null }, "macro.tpch.block_on_tests": { "name": "block_on_tests", "resource_type": "macro", "package_name": "tpch", "path": "macros/block_on_tests.sql", "original_file_path": "macros/block_on_tests.sql", "unique_id": "macro.tpch.block_on_tests", "macro_sql": "{% macro block_on_tests(list_of_test_macros) %}\n\n {% if execute %}\n {% for test in list_of_test_macros %}\n {% set results = run_query(test) %}\n {% if results[0][0] == 0 %}\n -- TEST {{loop.index}}: PASS\n {% else %}\n {% set msg %} TEST {{loop.index}}: FAIL {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {% endfor %}\n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.603634, "supported_languages": null }, "macro.tpch.generate_models_yaml": { "name": "generate_models_yaml", "resource_type": "macro", "package_name": "tpch", "path": "macros/generate_models_yaml.sql", "original_file_path": "macros/generate_models_yaml.sql", "unique_id": "macro.tpch.generate_models_yaml", "macro_sql": "{% macro generate_models_yaml(model_names) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n\n{% for model_name in model_names %}\n\n {% do model_yaml.append(' - name: ' ~ model_name | lower) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% do model_yaml.append(' columns:') %}\n\n {% set relation=ref(model_name) %}\n {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n {% for column in columns %}\n {% do model_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% endfor %}\n\n {% do model_yaml.append('') %}\n\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = model_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6068187, "supported_languages": null }, "macro.tpch.money": { "name": "money", "resource_type": "macro", "package_name": "tpch", "path": "macros/convert_money.sql", "original_file_path": "macros/convert_money.sql", "unique_id": "macro.tpch.money", "macro_sql": "{% macro money(col) -%}\n::decimal(16,4)\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to convert a column to consistent precision", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "col", "type": "INTEGER", "description": "column getting converted to decimal(16,4)" } ], "created_at": 1675283574.3563662, "supported_languages": null }, "macro.tpch.standard_account_fields": { "name": "standard_account_fields", "resource_type": "macro", "package_name": "tpch", "path": "macros/standard_account_fields.sql", "original_file_path": "macros/standard_account_fields.sql", "unique_id": "macro.tpch.standard_account_fields", "macro_sql": "{% macro standard_account_fields() %}\n\n{# How to use\n\nselect {{ standard_account_fields() }}\nfrom {{ ref('fct_orders') }}\n\n#}\n\n{%- set return_fields = [\"gross_item_sales_amount\", \n \"item_discount_amount\",\n \"item_tax_amount\",\n \"net_item_sales_amount\"]\n -%}\n\n {%- for field in return_fields %}\n {{ field }}{% if not loop.last %},{% endif %}{% endfor -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "An example of using a macro to standardize the fiels within the analysis", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "return_fields", "type": "STRING", "description": "fields you would like returned for analysis" } ], "created_at": 1675283574.3654678, "supported_languages": null }, "macro.tpch.limit_data_in_dev": { "name": "limit_data_in_dev", "resource_type": "macro", "package_name": "tpch", "path": "macros/limit_data_in_dev.sql", "original_file_path": "macros/limit_data_in_dev.sql", "unique_id": "macro.tpch.limit_data_in_dev", "macro_sql": "{% macro limit_data_in_dev(filter_column_name, lookback_days=7) %}\n\n{% if target.name == 'dev' %}\n\n\nwhere {{ filter_column_name }} >= dateadd('day', -{{ lookback_days }}, current_timestamp)\n{% endif %}\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to show conditional logic to limit data when working in dev.", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "filter_column_name", "type": "DATE", "description": "The name of the column you want to convert" }, { "name": "lookback_days", "type": "NUMBER", "description": "Number of lookback days. Defaults to 7." } ], "created_at": 1675283574.3546152, "supported_languages": null }, "macro.tpch.generate_base_models": { "name": "generate_base_models", "resource_type": "macro", "package_name": "tpch", "path": "macros/generate_base_models.sql", "original_file_path": "macros/generate_base_models.sql", "unique_id": "macro.tpch.generate_base_models", "macro_sql": "{% macro generate_base_models(source_name, exclude=[], include=[], leading_commas=False, case_sensitive_cols=False) %}\n\n {%- if include | length > 0 and exclude | length > 0 -%}\n -- You cannot use both include and exclude arguments\n {%- elif execute -%}\n\n {% set sources = graph.sources.values() | selectattr('source_name', '==', source_name) %}\n\n {%- if exclude | length > 0 -%}\n {%- set sources = sources | rejectattr('name', 'in', exclude) -%}\n {%- endif -%}\n\n {%- if include | length > 0 -%}\n {%- set sources = sources | selectattr('name', 'in', include) -%}\n {%- endif -%}\n\n {%- for source in sources -%}\n\n -- ______________________ stg_{{ source_name }}__{{ source.name }}.sql ______________________\n\n {{ codegen.generate_base_model(source_name, source.name, leading_commas, case_sensitive_cols) }}\n\n {%- endfor -%}\n\n -- ______________________ END ______________________\n\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.generate_base_model" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6118598, "supported_languages": null }, "macro.tpch.grant_all_on_schemas": { "name": "grant_all_on_schemas", "resource_type": "macro", "package_name": "tpch", "path": "macros/grant_all_on_schemas.sql", "original_file_path": "macros/grant_all_on_schemas.sql", "unique_id": "macro.tpch.grant_all_on_schemas", "macro_sql": "{% macro grant_all_on_schemas(schemas, role) %}\n {% for schema in schemas %}\n grant usage on schema {{ schema }} to role {{ role }};\n grant select on all tables in schema {{ schema }} to role {{ role }};\n grant select on all views in schema {{ schema }} to role {{ role }};\n grant select on future tables in schema {{ schema }} to role {{ role }};\n grant select on future views in schema {{ schema }} to role {{ role }};\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "An example of how to grant permissions on schema", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "schemas", "type": "STRING", "description": "name of the schema you would like to give the role access to" }, { "name": "role", "type": "STRING", "description": "user/role within your warehouse you would like to give dbt access to" } ], "created_at": 1675283574.3596072, "supported_languages": null }, "macro.tpch._select_extremes": { "name": "_select_extremes", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch._select_extremes", "macro_sql": "{% macro _select_extremes(fn, table_name, key_columns, timestamp_column='loaded_at') %}\nselect a.* from {{ table_name }} as a\ninner join (\n select {{ ','.join(key_columns) }}, {{ fn }}({{ timestamp_column }}) as last_update\n from {{ table_name }}\n group by {{ ','.join(key_columns) }}\n) as b on (\n {% for key_column in key_columns %}\n a.{{ key_column }} = b.{{ key_column }}\n and\n {% endfor %}\n a.{{ timestamp_column }} = b.last_update\n)\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.614623, "supported_languages": null }, "macro.tpch.select_latest": { "name": "select_latest", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch.select_latest", "macro_sql": "{% macro select_latest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('max', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.tpch._select_extremes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6150663, "supported_languages": null }, "macro.tpch.select_earliest": { "name": "select_earliest", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch.select_earliest", "macro_sql": "{% macro select_earliest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('min', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.tpch._select_extremes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6154892, "supported_languages": null }, "macro.tpch.cents_to_dollars": { "name": "cents_to_dollars", "resource_type": "macro", "package_name": "tpch", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "unique_id": "macro.tpch.cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, precision=2) -%}\n ({{ column_name }} / 100)::numeric(16, {{ precision }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to convert cents to dollars", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "column_name", "type": "STRING", "description": "The name of the column you want to convert" }, { "name": "precision", "type": "INTEGER", "description": "Number of decimal places. Defaults to 2." } ], "created_at": 1675283574.3519711, "supported_languages": null }, "macro.tpch.test_all_values_gte_zero": { "name": "test_all_values_gte_zero", "resource_type": "macro", "package_name": "tpch", "path": "macros/test_all_values_gte_zero.sql", "original_file_path": "macros/test_all_values_gte_zero.sql", "unique_id": "macro.tpch.test_all_values_gte_zero", "macro_sql": "{% macro test_all_values_gte_zero(table, column) %}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref(table) }} where {{ column }} < 0\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "Macro to ensure values are greater than zero -- perfect for data tests", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "table", "type": "STRING", "description": "name of the table being tested" }, { "name": "column", "type": "STRING", "description": "name of the column being tested" } ], "created_at": 1675283574.363748, "supported_languages": null }, "macro.tpch.share_view": { "name": "share_view", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/share_view.sql", "original_file_path": "macros/snowflake/share_view.sql", "unique_id": "macro.tpch.share_view", "macro_sql": "{% macro share_view() %}\n\n{#\n\nUsage:\n\nThis would be used as a post-hook in the config block at the top of a model\n\nExample:\n\n{{ config(post_hook='{{ share_view() }}') }}\n\n#}\n\n -- Only run in production\n {% if target.name == 'prod' %}\n\n {% set sql %}\n -- Create a table with all data to be shared\n create or replace table share_db.private.{{ this.name }} as\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ this }};\n \n grant select on share_db.private.{{ this.name }} to role transformer;\n\n -- Create a secure view which selects based on current account\n create or replace secure view share_db.public.{{ this.name }} as\n select a.*\n from share_db.private.{{ this.name }} as a\n inner join share_db.private.company_shares as b on (\n a.customer_id = b.customer_id\n and b.snowflake_account = current_account()\n );\n \n grant select on share_db.public.{{ this.name }} to share customer_share;\n {% endset %}\n\n {% set table = run_query(sql) %}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.61798, "supported_languages": null }, "macro.dbt_snowflake.snowflake__copy_grants": { "name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n {% set copy_grants = config.get('copy_grants', False) %}\n {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6186116, "supported_languages": null }, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": { "name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n {{ return(False) }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6188676, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_catalog": { "name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n {% set query %}\n with tables as (\n\n select\n table_catalog as \"table_database\",\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n table_type as \"table_type\",\n comment as \"table_comment\",\n\n -- note: this is the _role_ that owns the table\n table_owner as \"table_owner\",\n\n 'Clustering Key' as \"stats:clustering_key:label\",\n clustering_key as \"stats:clustering_key:value\",\n 'The key used to cluster this table' as \"stats:clustering_key:description\",\n (clustering_key is not null) as \"stats:clustering_key:include\",\n\n 'Row Count' as \"stats:row_count:label\",\n row_count as \"stats:row_count:value\",\n 'An approximate count of rows in this table' as \"stats:row_count:description\",\n (row_count is not null) as \"stats:row_count:include\",\n\n 'Approximate Size' as \"stats:bytes:label\",\n bytes as \"stats:bytes:value\",\n 'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n (bytes is not null) as \"stats:bytes:include\",\n\n 'Last Modified' as \"stats:last_modified:label\",\n to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n 'The timestamp for last update/change' as \"stats:last_modified:description\",\n (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n from {{ information_schema }}.tables\n\n ),\n\n columns as (\n\n select\n table_catalog as \"table_database\",\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n\n column_name as \"column_name\",\n ordinal_position as \"column_index\",\n data_type as \"column_type\",\n comment as \"column_comment\"\n\n from {{ information_schema }}.columns\n )\n\n select *\n from tables\n join columns using (\"table_database\", \"table_schema\", \"table_name\")\n where (\n {%- for schema in schemas -%}\n upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n )\n order by \"column_index\"\n {%- endset -%}\n\n {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6204524, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_table_as": { "name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n {%- if language == 'sql' -%}\n {%- set transient = config.get('transient', default=true) -%}\n {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n {%- set cluster_by_keys = [cluster_by_keys] -%}\n {%- endif -%}\n {%- if cluster_by_keys is not none -%}\n {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n {% else %}\n {%- set cluster_by_string = none -%}\n {%- endif -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n\n create or replace {% if temporary -%}\n temporary\n {%- elif transient -%}\n transient\n {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n (\n {%- if cluster_by_string is not none -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from(\n {{ compiled_code }}\n ) order by ({{ cluster_by_string }})\n {%- else -%}\n {{ compiled_code }}\n {%- endif %}\n );\n {% if cluster_by_string is not none and not temporary -%}\n alter table {{relation}} cluster by ({{cluster_by_string}});\n {%- endif -%}\n {% if enable_automatic_clustering and cluster_by_string is not none and not temporary -%}\n alter table {{relation}} resume recluster;\n {%- endif -%}\n\n {%- elif language == 'python' -%}\n {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n {%- else -%}\n {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.py_write_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6431675, "supported_languages": null }, "macro.dbt_snowflake.get_column_comment_sql": { "name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n {% if (column_name|upper in column_dict) -%}\n {% set matched_column = column_name|upper -%}\n {% elif (column_name|lower in column_dict) -%}\n {% set matched_column = column_name|lower -%}\n {% elif (column_name in column_dict) -%}\n {% set matched_column = column_name -%}\n {% else -%}\n {% set matched_column = None -%}\n {% endif -%}\n {% if matched_column -%}\n {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n {%- else -%}\n {{ adapter.quote(column_name) }} COMMENT $$$$\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6447408, "supported_languages": null }, "macro.dbt_snowflake.get_persist_docs_column_list": { "name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n {% for column_name in query_columns %}\n {{ get_column_comment_sql(column_name, model_columns) }}\n {{- \", \" if not loop.last else \"\" }}\n {% endfor %}\n)\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.get_column_comment_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6453438, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": { "name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n {%- set secure = config.get('secure', default=false) -%}\n {%- set copy_grants = config.get('copy_grants', default=false) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n create or replace {% if secure -%}\n secure\n {%- endif %} {% if is_temporary -%}\n temporary\n {%- endif %} view {{ relation }}\n {% if config.persist_column_docs() -%}\n {% set model_columns = model.columns %}\n {% set query_columns = get_columns_in_query(sql) %}\n {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n {%- endif %}\n {% if copy_grants -%} copy grants {%- endif %} as (\n {{ sql }}\n );\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.647057, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_view_as": { "name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6473947, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_columns_in_relation": { "name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n {%- set sql -%}\n describe table {{ relation }}\n {%- endset -%}\n {%- set result = run_query(sql) -%}\n\n {% set maximum = 10000 %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many columns in relation {{ relation }}! dbt can only get\n information about relations with fewer than {{ maximum }} columns.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n\n {% set columns = [] %}\n {% for row in result %}\n {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n {% endfor %}\n {% do return(columns) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6494153, "supported_languages": null }, "macro.dbt_snowflake.snowflake__list_schemas": { "name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n {% set maximum = 10000 %}\n {% set sql -%}\n show terse schemas in database {{ database }}\n limit {{ maximum }}\n {%- endset %}\n {% set result = run_query(sql) %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many schemas in database {{ database }}! dbt can only get\n information about databases with fewer than {{ maximum }} schemas.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {{ return(result) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6506486, "supported_languages": null }, "macro.dbt_snowflake.snowflake__list_relations_without_caching": { "name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n {%- set sql -%}\n show terse objects in {{ schema_relation }}\n {%- endset -%}\n\n {%- set result = run_query(sql) -%}\n {% set maximum = 10000 %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many schemas in schema {{ schema_relation }}! dbt can only get\n information about schemas with fewer than {{ maximum }} objects.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {%- do return(result) -%}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6517358, "supported_languages": null }, "macro.dbt_snowflake.snowflake__check_schema_exists": { "name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n {% call statement('check_schema_exists', fetch_result=True) -%}\n select count(*)\n from {{ information_schema }}.schemata\n where upper(schema_name) = upper('{{ schema }}')\n and upper(catalog_name) = upper('{{ information_schema.database }}')\n {%- endcall %}\n {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6524363, "supported_languages": null }, "macro.dbt_snowflake.snowflake__rename_relation": { "name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n {% call statement('rename_relation') -%}\n alter table {{ from_relation }} rename to {{ to_relation }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.652867, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_column_type": { "name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n {% call statement('alter_column_type') %}\n alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.653413, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_relation_comment": { "name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6538992, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_column_comment": { "name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n alter {{ relation.type }} {{ relation }} alter\n {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.get_column_comment_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6550012, "supported_languages": null }, "macro.dbt_snowflake.get_current_query_tag": { "name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6554062, "supported_languages": null }, "macro.dbt_snowflake.set_query_tag": { "name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__set_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.655761, "supported_languages": null }, "macro.dbt_snowflake.snowflake__set_query_tag": { "name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n {% set new_query_tag = config.get('query_tag') %}\n {% if new_query_tag %}\n {% set original_query_tag = get_current_query_tag() %}\n {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n {{ return(original_query_tag)}}\n {% endif %}\n {{ return(none)}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6567545, "supported_languages": null }, "macro.dbt_snowflake.unset_query_tag": { "name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6571531, "supported_languages": null }, "macro.dbt_snowflake.snowflake__unset_query_tag": { "name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n {% set new_query_tag = config.get('query_tag') %}\n {% if new_query_tag %}\n {% if original_query_tag %}\n {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n {% else %}\n {{ log(\"No original query_tag, unsetting parameter.\") }}\n {% do run_query(\"alter session unset query_tag\") %}\n {% endif %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6582177, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": { "name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n {% if add_columns %}\n\n {% set sql -%}\n alter {{ relation.type }} {{ relation }} add column\n {% for column in add_columns %}\n {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n {% endfor %}\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n {% endif %}\n\n {% if remove_columns %}\n\n {% set sql -%}\n alter {{ relation.type }} {{ relation }} drop column\n {% for column in remove_columns %}\n {{ column.name }}{{ ',' if not loop.last }}\n {% endfor %}\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6598182, "supported_languages": null }, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": { "name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n {#\n Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n statements before passing them into run_query(), or calling in the 'main' statement\n of a materialization\n #}\n {% set dml_transaction -%}\n begin;\n {{ dml }};\n commit;\n {%- endset %}\n\n {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.660299, "supported_languages": null }, "macro.dbt_snowflake.snowflake__truncate_relation": { "name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n {% set truncate_dml %}\n truncate table {{ relation }}\n {% endset %}\n {% call statement('truncate_relation') -%}\n {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6608298, "supported_languages": null }, "macro.dbt_snowflake.snowflake__load_csv_rows": { "name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n {% set batch_size = get_batch_size() %}\n {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n {% set bindings = [] %}\n\n {% set statements = [] %}\n\n {% for chunk in agate_table.rows | batch(batch_size) %}\n {% set bindings = [] %}\n\n {% for row in chunk %}\n {% do bindings.extend(row) %}\n {% endfor %}\n\n {% set sql %}\n insert into {{ this.render() }} ({{ cols_sql }}) values\n {% for row in chunk -%}\n ({%- for column in agate_table.column_names -%}\n %s\n {%- if not loop.last%},{%- endif %}\n {%- endfor -%})\n {%- if not loop.last%},{%- endif %}\n {%- endfor %}\n {% endset %}\n\n {% do adapter.add_query('BEGIN', auto_begin=False) %}\n {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n {% if loop.index0 == 0 %}\n {% do statements.append(sql) %}\n {% endif %}\n {% endfor %}\n\n {# Return SQL so we can render it out into the compiled files #}\n {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6652184, "supported_languages": null }, "macro.dbt_snowflake.materialization_seed_snowflake": { "name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n {% set original_query_tag = set_query_tag() %}\n\n {% set relations = materialization_seed_default() %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return(relations) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6659365, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": { "name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var {#\n High-level principles:\n If we are running multiple statements (DELETE + INSERT),\n and we want to guarantee identical inputs to both statements,\n then we must first save the model query results as a temporary table\n (which presumably comes with a performance cost).\n If we are running a single statement (MERGE or INSERT alone),\n we _may_ save the model query definition as a view instead,\n for (presumably) faster overall incremental processing.\n\n Low-level specifics:\n If an invalid option is specified, then we will raise an\n excpetion with corresponding message.\n\n Languages other than SQL (like Python) will use a temporary table.\n With the default strategy of merge, the user may choose between a temporary\n table and view (defaulting to view).\n\n The append strategy can use a view because it will run a single INSERT statement.\n\n When unique_key is none, the delete+insert strategy can use a view beacuse a\n single INSERT statement is run with no DELETES as part of the statement.\n Otherwise, play it safe by using a temporary table.\n #} */\n\n {% if language == \"python\" and tmp_relation_type is not none %}\n {% do exceptions.raise_compiler_error(\n \"Python models currently only support 'table' for tmp_relation_type but \"\n ~ tmp_relation_type ~ \" was specified.\"\n ) %}\n {% endif %}\n\n {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n {% do exceptions.raise_compiler_error(\n \"In order to maintain consistent results when `unique_key` is not none,\n the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n ~ tmp_relation_type ~ \" was specified.\"\n )\n %}\n {% endif %}\n\n {% if language != \"sql\" %}\n {{ return(\"table\") }}\n {% elif tmp_relation_type == \"table\" %}\n {{ return(\"table\") }}\n {% elif tmp_relation_type == \"view\" %}\n {{ return(\"view\") }}\n {% elif strategy in (\"default\", \"merge\", \"append\") %}\n {{ return(\"view\") }}\n {% elif strategy == \"delete+insert\" and unique_key is none %}\n {{ return(\"view\") }}\n {% else %}\n {{ return(\"table\") }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6705604, "supported_languages": null }, "macro.dbt_snowflake.materialization_incremental_snowflake": { "name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {#-- Set vars --#}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n {%- set language = model['language'] -%}\n {% set target_relation = this %}\n {% set existing_relation = load_relation(this) %}\n\n {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n {%- set unique_key = config.get('unique_key') -%}\n {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n {% set grant_config = config.get('grants') %}\n\n {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n {{ run_hooks(pre_hooks) }}\n\n {% if existing_relation is none %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n\n {% elif existing_relation.is_view %}\n {#-- Can't overwrite a view with a table - we must drop --#}\n {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n {% do adapter.drop_relation(existing_relation) %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n {% elif full_refresh_mode %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n\n {% else %}\n {#-- Create the temp relation, either as a view or as a temp table --#}\n {% if tmp_relation_type == 'view' %}\n {%- call statement('create_tmp_relation') -%}\n {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n {%- endcall -%}\n {% else %}\n {%- call statement('create_tmp_relation', language=language) -%}\n {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n {%- endcall -%}\n {% endif %}\n\n {% do adapter.expand_target_column_types(\n from_relation=tmp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n\n {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n {%- call statement('main') -%}\n {{ strategy_sql_macro_func(strategy_arg_dict) }}\n {%- endcall -%}\n {% endif %}\n\n {% do drop_relation_if_exists(tmp_relation) %}\n\n {{ run_hooks(post_hooks) }}\n\n {% set target_relation = target_relation.incorporate(type='table') %}\n\n {% set should_revoke =\n should_revoke(existing_relation.is_table, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.677545, "supported_languages": [ "sql", "python" ] }, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": { "name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_incremental_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6779652, "supported_languages": null }, "macro.dbt_snowflake.materialization_test_snowflake": { "name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n {% set relations = materialization_test_default() %}\n {% do unset_query_tag(original_query_tag) %}\n {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.elementary.materialization_test_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.678725, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.materialization_snapshot_snowflake": { "name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n {% set original_query_tag = set_query_tag() %}\n {% set relations = materialization_snapshot_default() %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return(relations) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.679469, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__get_merge_sql": { "name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n {#\n Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n When no unique_key is provided, this macro will do a regular insert. If a unique_key\n is provided, then this macro will do a proper merge instead.\n #}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {%- set dml -%}\n {%- if unique_key is none -%}\n\n {{ sql_header if sql_header is not none }}\n\n insert into {{ target }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ source_sql }}\n )\n\n {%- else -%}\n\n {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n {%- endif -%}\n {%- endset -%}\n\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6817462, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": { "name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6824336, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": { "name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.682985, "supported_languages": null }, "macro.dbt_snowflake.materialization_table_snowflake": { "name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {%- set identifier = models -%}\n {%- set language = model['language'] -%}\n\n {% set grant_config = config.get('grants') %}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set target_relation = api.Relation.create(identifier=identifier,\n schema=schema,\n database=database, type='table') -%}\n\n {{ run_hooks(pre_hooks) }}\n\n {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n -- downtime, but it should be a relatively infrequent occurrence #}\n {% if old_relation is not none and not old_relation.is_table %}\n {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n {{ drop_relation_if_exists(old_relation) }}\n {% endif %}\n\n {% call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall %}\n\n {{ run_hooks(post_hooks) }}\n\n {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6874063, "supported_languages": [ "sql", "python" ] }, "macro.dbt_snowflake.py_write_table": { "name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n # make sure pandas exists\n import importlib.util\n package_name = 'pandas'\n if importlib.util.find_spec(package_name):\n import pandas\n if isinstance(df, pandas.core.frame.DataFrame):\n # session.write_pandas does not have overwrite function\n df = session.createDataFrame(df)\n df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n dbt = dbtObj(session.table)\n df = model(dbt, session)\n materialize(session, df, dbt.this)\n return \"OK\"\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.687874, "supported_languages": null }, "macro.dbt_snowflake.py_script_comment": { "name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n# return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6880908, "supported_languages": null }, "macro.dbt_snowflake.materialization_view_snowflake": { "name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n {% set to_return = create_or_replace_view() %}\n\n {% set target_relation = this.incorporate(type='view') %}\n\n {% do persist_docs(target_relation, model, for_columns=false) %}\n\n {% do return(to_return) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6892, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__escape_single_quotes": { "name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.689622, "supported_languages": null }, "macro.dbt_snowflake.snowflake__safe_cast": { "name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6900337, "supported_languages": null }, "macro.dbt_snowflake.snowflake__array_construct": { "name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6904306, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp": { "name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6909642, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": { "name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n {{ return(result) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6913517, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_get_time": { "name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6915948, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": { "name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6918292, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": { "name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6921248, "supported_languages": null }, "macro.dbt_snowflake.snowflake__right": { "name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n case when {{ length_expression }} = 0\n then ''\n else\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n end\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6926057, "supported_languages": null }, "macro.dbt_snowflake.snowflake__bool_or": { "name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6929102, "supported_languages": null }, "macro.dbt.statement": { "name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n {%- if execute: -%}\n {%- set compiled_code = caller() -%}\n\n {%- if name == 'main' -%}\n {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n {{ write(compiled_code) }}\n {%- endif -%}\n {%- if language == 'sql'-%}\n {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n {%- elif language == 'python' -%}\n {%- set res = submit_python_job(model, compiled_code) -%}\n {#-- TODO: What should table be for python models? --#}\n {%- set table = None -%}\n {%- else -%}\n {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n {%- endif -%}\n\n {%- if name is not none -%}\n {{ store_result(name, response=res, agate_table=table) }}\n {%- endif -%}\n\n {%- endif -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6959896, "supported_languages": null }, "macro.dbt.noop_statement": { "name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n {%- set sql = caller() -%}\n\n {%- if name == 'main' -%}\n {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n {{ write(sql) }}\n {%- endif -%}\n\n {%- if name is not none -%}\n {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6971858, "supported_languages": null }, "macro.dbt.run_query": { "name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n {{ sql }}\n {% endcall %}\n\n {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.6978273, "supported_languages": null }, "macro.dbt.convert_datetime": { "name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n {% set error_msg -%}\n The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n {%- endset %}\n\n {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n {{ return(res) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7007964, "supported_languages": null }, "macro.dbt.dates_in_range": { "name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n {% set day_count = (end_date - start_date).days %}\n {% if day_count < 0 %}\n {% set msg -%}\n Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n {%- endset %}\n\n {{ exceptions.raise_compiler_error(msg, model) }}\n {% endif %}\n\n {% set date_list = [] %}\n {% for i in range(0, day_count + 1) %}\n {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n {% if not out_fmt %}\n {% set _ = date_list.append(the_date) %}\n {% else %}\n {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n {% endif %}\n {% endfor %}\n\n {{ return(date_list) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.convert_datetime" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7033432, "supported_languages": null }, "macro.dbt.partition_range": { "name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n {% if (partition_range | length) == 1 %}\n {% set start_date = partition_range[0] %}\n {% set end_date = none %}\n {% elif (partition_range | length) == 2 %}\n {% set start_date = partition_range[0] %}\n {% set end_date = partition_range[1] %}\n {% else %}\n {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n {% endif %}\n\n {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.dates_in_range" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7050607, "supported_languages": null }, "macro.dbt.py_current_timestring": { "name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n {% set dt = modules.datetime.datetime.now() %}\n {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7056286, "supported_languages": null }, "macro.dbt.copy_grants": { "name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__copy_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7085392, "supported_languages": null }, "macro.dbt.default__copy_grants": { "name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n {{ return(True) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.70881, "supported_languages": null }, "macro.dbt.support_multiple_grantees_per_dcl_statement": { "name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.709177, "supported_languages": null }, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": { "name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7094505, "supported_languages": null }, "macro.dbt.should_revoke": { "name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n {% if not existing_relation %}\n {#-- The table doesn't already exist, so no grants to copy over --#}\n {{ return(False) }}\n {% elif full_refresh_mode %}\n {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n {{ return(copy_grants()) }}\n {% else %}\n {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n {{ return(True) }}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.copy_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.710231, "supported_languages": null }, "macro.dbt.get_show_grant_sql": { "name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_show_grant_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7106476, "supported_languages": null }, "macro.dbt.default__get_show_grant_sql": { "name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n show grants on {{ relation }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7108953, "supported_languages": null }, "macro.dbt.get_grant_sql": { "name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_grant_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.711411, "supported_languages": null }, "macro.dbt.default__get_grant_sql": { "name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7118413, "supported_languages": null }, "macro.dbt.get_revoke_sql": { "name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_revoke_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7123468, "supported_languages": null }, "macro.dbt.default__get_revoke_sql": { "name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7127655, "supported_languages": null }, "macro.dbt.get_dcl_statement_list": { "name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_dcl_statement_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7132523, "supported_languages": null }, "macro.dbt.default__get_dcl_statement_list": { "name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n {#\n -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n #}\n {%- set dcl_statements = [] -%}\n {%- for privilege, grantees in grant_config.items() %}\n {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n {%- do dcl_statements.append(dcl) -%}\n {%- else -%}\n {%- for grantee in grantees -%}\n {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n {%- do dcl_statements.append(dcl) -%}\n {% endfor -%}\n {%- endif -%}\n {%- endfor -%}\n {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.support_multiple_grantees_per_dcl_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.714792, "supported_languages": null }, "macro.dbt.call_dcl_statements": { "name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__call_dcl_statements" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7152193, "supported_languages": null }, "macro.dbt.default__call_dcl_statements": { "name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n {#\n -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n -- so that they're all processed together.\n\n -- Some databases do not support this. Those adapters will need to override this macro\n -- to run each statement individually.\n #}\n {% call statement('grants') %}\n {% for dcl_statement in dcl_statement_list %}\n {{ dcl_statement }};\n {% endfor %}\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7157683, "supported_languages": null }, "macro.dbt.apply_grants": { "name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__apply_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7162585, "supported_languages": null }, "macro.dbt.default__apply_grants": { "name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n {#-- If grant_config is {} or None, this is a no-op --#}\n {% if grant_config %}\n {% if should_revoke %}\n {#-- We think previous grants may have carried over --#}\n {#-- Show current grants and calculate diffs --#}\n {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n {% if not (needs_granting or needs_revoking) %}\n {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n {% endif %}\n {% else %}\n {#-- We don't think there's any chance of previous grants having carried over. --#}\n {#-- Jump straight to granting what the user has configured. --#}\n {% set needs_revoking = {} %}\n {% set needs_granting = grant_config %}\n {% endif %}\n {% if needs_granting or needs_revoking %}\n {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n {% if dcl_statement_list %}\n {{ call_dcl_statements(dcl_statement_list) }}\n {% endif %}\n {% endif %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7188084, "supported_languages": null }, "macro.dbt.collect_freshness": { "name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__collect_freshness" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.719653, "supported_languages": null }, "macro.dbt.default__collect_freshness": { "name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n select\n max({{ loaded_at_field }}) as max_loaded_at,\n {{ current_timestamp() }} as snapshotted_at\n from {{ source }}\n {% if filter %}\n where {{ filter }}\n {% endif %}\n {% endcall %}\n {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7205446, "supported_languages": null }, "macro.dbt.get_columns_in_relation": { "name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.72325, "supported_languages": null }, "macro.dbt.default__get_columns_in_relation": { "name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n {{ exceptions.raise_not_implemented(\n 'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7236314, "supported_languages": null }, "macro.dbt.sql_convert_columns_in_relation": { "name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n {% set columns = [] %}\n {% for row in table %}\n {% do columns.append(api.Column(*row)) %}\n {% endfor %}\n {{ return(columns) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7243743, "supported_languages": null }, "macro.dbt.get_columns_in_query": { "name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_columns_in_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.724789, "supported_languages": null }, "macro.dbt.default__get_columns_in_query": { "name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from (\n {{ select_sql }}\n ) as __dbt_sbq\n where false\n limit 0\n {% endcall %}\n\n {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.725514, "supported_languages": null }, "macro.dbt.alter_column_type": { "name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_column_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.726038, "supported_languages": null }, "macro.dbt.default__alter_column_type": { "name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n {#\n 1. Create a new column (w/ temp name and correct type)\n 2. Copy data over to it\n 3. Drop the existing column (cascade!)\n 4. Rename the new column to existing column\n #}\n {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n {% call statement('alter_column_type') %}\n alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n {% endcall %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7277632, "supported_languages": null }, "macro.dbt.alter_relation_add_remove_columns": { "name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7283275, "supported_languages": null }, "macro.dbt.default__alter_relation_add_remove_columns": { "name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n {% if add_columns is none %}\n {% set add_columns = [] %}\n {% endif %}\n {% if remove_columns is none %}\n {% set remove_columns = [] %}\n {% endif %}\n\n {% set sql -%}\n\n alter {{ relation.type }} {{ relation }}\n\n {% for column in add_columns %}\n add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n {% for column in remove_columns %}\n drop column {{ column.name }}{{ ',' if not loop.last }}\n {% endfor %}\n\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7300146, "supported_languages": null }, "macro.dbt.current_timestamp": { "name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7309358, "supported_languages": null }, "macro.dbt.default__current_timestamp": { "name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n {{ exceptions.raise_not_implemented(\n 'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.731268, "supported_languages": null }, "macro.dbt.snapshot_get_time": { "name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_get_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7315862, "supported_languages": null }, "macro.dbt.default__snapshot_get_time": { "name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n {{ current_timestamp() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7318268, "supported_languages": null }, "macro.dbt.current_timestamp_backcompat": { "name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.732188, "supported_languages": null }, "macro.dbt.default__current_timestamp_backcompat": { "name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n current_timestamp::timestamp\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7323651, "supported_languages": null }, "macro.dbt.current_timestamp_in_utc_backcompat": { "name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7327213, "supported_languages": null }, "macro.dbt.default__current_timestamp_in_utc_backcompat": { "name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.733085, "supported_languages": null }, "macro.dbt.make_intermediate_relation": { "name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_intermediate_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7382908, "supported_languages": null }, "macro.dbt.default__make_intermediate_relation": { "name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_temp_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.738664, "supported_languages": null }, "macro.dbt.make_temp_relation": { "name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_temp_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7392776, "supported_languages": null }, "macro.dbt.default__make_temp_relation": { "name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n {%- set temp_relation = base_relation.incorporate(\n path={\"identifier\": temp_identifier}) -%}\n\n {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7398992, "supported_languages": null }, "macro.dbt.make_backup_relation": { "name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_backup_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7404108, "supported_languages": null }, "macro.dbt.default__make_backup_relation": { "name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n {%- set backup_relation = base_relation.incorporate(\n path={\"identifier\": backup_identifier},\n type=backup_relation_type\n ) -%}\n {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7410862, "supported_languages": null }, "macro.dbt.drop_relation": { "name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__drop_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7414846, "supported_languages": null }, "macro.dbt.default__drop_relation": { "name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n {% call statement('drop_relation', auto_begin=False) -%}\n drop {{ relation.type }} if exists {{ relation }} cascade\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.741983, "supported_languages": null }, "macro.dbt.truncate_relation": { "name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__truncate_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.742389, "supported_languages": null }, "macro.dbt.default__truncate_relation": { "name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n {% call statement('truncate_relation') -%}\n truncate table {{ relation }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7427557, "supported_languages": null }, "macro.dbt.rename_relation": { "name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__rename_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7431915, "supported_languages": null }, "macro.dbt.default__rename_relation": { "name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n {% call statement('rename_relation') -%}\n alter table {{ from_relation }} rename to {{ target_name }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7438402, "supported_languages": null }, "macro.dbt.get_or_create_relation": { "name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_or_create_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.744387, "supported_languages": null }, "macro.dbt.default__get_or_create_relation": { "name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n {% if target_relation %}\n {% do return([true, target_relation]) %}\n {% endif %}\n\n {%- set new_relation = api.Relation.create(\n database=database,\n schema=schema,\n identifier=identifier,\n type=type\n ) -%}\n {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7455401, "supported_languages": null }, "macro.dbt.load_cached_relation": { "name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n {% do return(adapter.get_relation(\n database=relation.database,\n schema=relation.schema,\n identifier=relation.identifier\n )) -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7460651, "supported_languages": null }, "macro.dbt.load_relation": { "name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7463858, "supported_languages": null }, "macro.dbt.drop_relation_if_exists": { "name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n {% if relation is not none %}\n {{ adapter.drop_relation(relation) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7468107, "supported_languages": null }, "macro.dbt.create_schema": { "name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7475524, "supported_languages": null }, "macro.dbt.default__create_schema": { "name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n {%- call statement('create_schema') -%}\n create schema if not exists {{ relation.without_identifier() }}\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7479591, "supported_languages": null }, "macro.dbt.drop_schema": { "name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__drop_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7483196, "supported_languages": null }, "macro.dbt.default__drop_schema": { "name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n {%- call statement('drop_schema') -%}\n drop schema if exists {{ relation.without_identifier() }} cascade\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7487273, "supported_languages": null }, "macro.dbt.alter_column_comment": { "name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_column_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7499533, "supported_languages": null }, "macro.dbt.default__alter_column_comment": { "name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n {{ exceptions.raise_not_implemented(\n 'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7503464, "supported_languages": null }, "macro.dbt.alter_relation_comment": { "name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_relation_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7508197, "supported_languages": null }, "macro.dbt.default__alter_relation_comment": { "name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n {{ exceptions.raise_not_implemented(\n 'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7511897, "supported_languages": null }, "macro.dbt.persist_docs": { "name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7517734, "supported_languages": null }, "macro.dbt.default__persist_docs": { "name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n {% if for_relation and config.persist_relation_docs() and model.description %}\n {% do run_query(alter_relation_comment(relation, model.description)) %}\n {% endif %}\n\n {% if for_columns and config.persist_column_docs() and model.columns %}\n {% do run_query(alter_column_comment(relation, model.columns)) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.752948, "supported_languages": null }, "macro.dbt.get_catalog": { "name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_catalog" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.75562, "supported_languages": null }, "macro.dbt.default__get_catalog": { "name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n {% set typename = adapter.type() %}\n {% set msg -%}\n get_catalog not implemented for {{ typename }}\n {%- endset %}\n\n {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7561958, "supported_languages": null }, "macro.dbt.information_schema_name": { "name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__information_schema_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7565966, "supported_languages": null }, "macro.dbt.default__information_schema_name": { "name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n {%- if database -%}\n {{ database }}.INFORMATION_SCHEMA\n {%- else -%}\n INFORMATION_SCHEMA\n {%- endif -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7569506, "supported_languages": null }, "macro.dbt.list_schemas": { "name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__list_schemas" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7573395, "supported_languages": null }, "macro.dbt.default__list_schemas": { "name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n {% set sql %}\n select distinct schema_name\n from {{ information_schema_name(database) }}.SCHEMATA\n where catalog_name ilike '{{ database }}'\n {% endset %}\n {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.information_schema_name", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7578762, "supported_languages": null }, "macro.dbt.check_schema_exists": { "name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__check_schema_exists" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.758341, "supported_languages": null }, "macro.dbt.default__check_schema_exists": { "name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n {% set sql -%}\n select count(*)\n from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n where catalog_name='{{ information_schema.database }}'\n and schema_name='{{ schema }}'\n {%- endset %}\n {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.replace", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7590177, "supported_languages": null }, "macro.dbt.list_relations_without_caching": { "name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__list_relations_without_caching" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.759424, "supported_languages": null }, "macro.dbt.default__list_relations_without_caching": { "name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n {{ exceptions.raise_not_implemented(\n 'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7597806, "supported_languages": null }, "macro.dbt.get_create_index_sql": { "name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_index_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7606604, "supported_languages": null }, "macro.dbt.default__get_create_index_sql": { "name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n {% do return(None) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7609682, "supported_languages": null }, "macro.dbt.create_indexes": { "name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7613435, "supported_languages": null }, "macro.dbt.default__create_indexes": { "name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n {%- set _indexes = config.get('indexes', default=[]) -%}\n\n {% for _index_dict in _indexes %}\n {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n {% if create_index_sql %}\n {% do run_query(create_index_sql) %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_create_index_sql", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.762252, "supported_languages": null }, "macro.dbt.generate_database_name": { "name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__generate_database_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.763044, "supported_languages": null }, "macro.dbt.default__generate_database_name": { "name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n {%- set default_database = target.database -%}\n {%- if custom_database_name is none -%}\n\n {{ default_database }}\n\n {%- else -%}\n\n {{ custom_database_name }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7635927, "supported_languages": null }, "macro.dbt.generate_schema_name": { "name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__generate_schema_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.764554, "supported_languages": null }, "macro.dbt.default__generate_schema_name": { "name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n {%- set default_schema = target.schema -%}\n {%- if custom_schema_name is none -%}\n\n {{ default_schema }}\n\n {%- else -%}\n\n {{ default_schema }}_{{ custom_schema_name | trim }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7651217, "supported_languages": null }, "macro.dbt.generate_schema_name_for_env": { "name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n {%- set default_schema = target.schema -%}\n {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n {{ custom_schema_name | trim }}\n\n {%- else -%}\n\n {{ default_schema }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7657459, "supported_languages": null }, "macro.dbt.generate_alias_name": { "name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__generate_alias_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7665145, "supported_languages": null }, "macro.dbt.default__generate_alias_name": { "name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n {%- if custom_alias_name is none -%}\n\n {{ node.name }}\n\n {%- else -%}\n\n {{ custom_alias_name | trim }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7670133, "supported_languages": null }, "macro.dbt.build_ref_function": { "name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n {%- set ref_dict = {} -%}\n {%- for _ref in model.refs -%}\n {%- set resolved = ref(*_ref) -%}\n {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n refs = {{ ref_dict | tojson }}\n key = \".\".join(args)\n return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.quote" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.769691, "supported_languages": null }, "macro.dbt.build_source_function": { "name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n {%- set source_dict = {} -%}\n {%- for _source in model.sources -%}\n {%- set resolved = source(*_source) -%}\n {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n sources = {{ source_dict | tojson }}\n key = \".\".join(args)\n return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.quote" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7707248, "supported_languages": null }, "macro.dbt.build_config_dict": { "name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n {%- set config_dict = {} -%}\n {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n {%- for key, default in config_dbt_used -%}\n {# weird type testing with enum, would be much easier to write this logic in Python! #}\n {%- if key == 'language' -%}\n {%- set value = 'python' -%}\n {%- endif -%}\n {%- set value = model.config.get(key, default) -%}\n {%- do config_dict.update({key: value}) -%}\n {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7720017, "supported_languages": null }, "macro.dbt.py_script_postfix": { "name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n def __init__(self, *args, **kwargs):\n pass\n\n @staticmethod\n def get(key, default=None):\n return config_dict.get(key, default)\n\nclass this:\n \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n database = '{{ this.database }}'\n schema = '{{ this.schema }}'\n identifier = '{{ this.identifier }}'\n def __repr__(self):\n return '{{ this }}'\n\n\nclass dbtObj:\n def __init__(self, load_df_function) -> None:\n self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n self.config = config\n self.this = this()\n self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.772863, "supported_languages": null }, "macro.dbt.py_script_comment": { "name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7730389, "supported_languages": null }, "macro.dbt.run_hooks": { "name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction) %}\n {% if not inside_transaction and loop.first %}\n {% call statement(auto_begin=inside_transaction) %}\n commit;\n {% endcall %}\n {% endif %}\n {% set rendered = render(hook.get('sql')) | trim %}\n {% if (rendered | length) > 0 %}\n {% call statement(auto_begin=inside_transaction) %}\n {{ rendered }}\n {% endcall %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7751184, "supported_languages": null }, "macro.dbt.make_hook_config": { "name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7755497, "supported_languages": null }, "macro.dbt.before_begin": { "name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7758706, "supported_languages": null }, "macro.dbt.in_transaction": { "name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.776187, "supported_languages": null }, "macro.dbt.after_commit": { "name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7765014, "supported_languages": null }, "macro.dbt.set_sql_header": { "name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.77722, "supported_languages": null }, "macro.dbt.should_full_refresh": { "name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n {% set config_full_refresh = config.get('full_refresh') %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7778847, "supported_languages": null }, "macro.dbt.should_store_failures": { "name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n {% set config_store_failures = config.get('store_failures') %}\n {% if config_store_failures is none %}\n {% set config_store_failures = flags.STORE_FAILURES %}\n {% endif %}\n {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7785876, "supported_languages": null }, "macro.dbt.materialization_seed_default": { "name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n {%- set identifier = models -%}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n {%- set grant_config = config.get('grants') -%}\n {%- set agate_table = load_agate_table() -%}\n -- grab current tables grants config for comparision later on\n\n {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% set create_table_sql = \"\" %}\n {% if exists_as_view %}\n {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n {% elif exists_as_table %}\n {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n {% else %}\n {% set create_table_sql = create_csv_table(model, agate_table) %}\n {% endif %}\n\n {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n {% set rows_affected = (agate_table.rows | length) %}\n {% set sql = load_csv_rows(model, agate_table) %}\n\n {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n {{ get_csv_sql(create_table_sql, sql) }};\n {% endcall %}\n\n {% set target_relation = this.incorporate(type='table') %}\n\n {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if full_refresh_mode or not exists_as_table %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n -- `COMMIT` happens here\n {{ adapter.commit() }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7847614, "supported_languages": [ "sql" ] }, "macro.dbt.create_csv_table": { "name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7921503, "supported_languages": null }, "macro.dbt.default__create_csv_table": { "name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n {%- set column_override = model['config'].get('column_types', {}) -%}\n {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n {% set sql %}\n create table {{ this.render() }} (\n {%- for col_name in agate_table.column_names -%}\n {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n {%- set type = column_override.get(col_name, inferred_type) -%}\n {%- set column_name = (col_name | string) -%}\n {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n {%- endfor -%}\n )\n {% endset %}\n\n {% call statement('_') -%}\n {{ sql }}\n {%- endcall %}\n\n {{ return(sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7940826, "supported_languages": null }, "macro.dbt.reset_csv_table": { "name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__reset_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7946, "supported_languages": null }, "macro.dbt.default__reset_csv_table": { "name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n {% set sql = \"\" %}\n {% if full_refresh %}\n {{ adapter.drop_relation(old_relation) }}\n {% set sql = create_csv_table(model, agate_table) %}\n {% else %}\n {{ adapter.truncate_relation(old_relation) }}\n {% set sql = \"truncate table \" ~ old_relation %}\n {% endif %}\n\n {{ return(sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.create_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7956188, "supported_languages": null }, "macro.dbt.get_csv_sql": { "name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_csv_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7960417, "supported_languages": null }, "macro.dbt.default__get_csv_sql": { "name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n {{ create_or_truncate_sql }};\n -- dbt seed --\n {{ insert_sql }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.796339, "supported_languages": null }, "macro.dbt.get_binding_char": { "name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_binding_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7966459, "supported_languages": null }, "macro.dbt.default__get_binding_char": { "name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n {{ return('%s') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7969077, "supported_languages": null }, "macro.dbt.get_batch_size": { "name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_batch_size" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7972503, "supported_languages": null }, "macro.dbt.default__get_batch_size": { "name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n {{ return(10000) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7975125, "supported_languages": null }, "macro.dbt.get_seed_column_quoted_csv": { "name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n {% set quoted = [] %}\n {% for col in column_names -%}\n {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n {%- endfor %}\n\n {%- set dest_cols_csv = quoted | join(', ') -%}\n {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7985594, "supported_languages": null }, "macro.dbt.load_csv_rows": { "name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__load_csv_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.7989693, "supported_languages": null }, "macro.dbt.default__load_csv_rows": { "name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n {% set batch_size = get_batch_size() %}\n\n {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n {% set bindings = [] %}\n\n {% set statements = [] %}\n\n {% for chunk in agate_table.rows | batch(batch_size) %}\n {% set bindings = [] %}\n\n {% for row in chunk %}\n {% do bindings.extend(row) %}\n {% endfor %}\n\n {% set sql %}\n insert into {{ this.render() }} ({{ cols_sql }}) values\n {% for row in chunk -%}\n ({%- for column in agate_table.column_names -%}\n {{ get_binding_char() }}\n {%- if not loop.last%},{%- endif %}\n {%- endfor -%})\n {%- if not loop.last%},{%- endif %}\n {%- endfor %}\n {% endset %}\n\n {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n {% if loop.index0 == 0 %}\n {% do statements.append(sql) %}\n {% endif %}\n {% endfor %}\n\n {# Return SQL so we can render it out into the compiled files #}\n {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8014925, "supported_languages": null }, "macro.dbt.materialization_test_default": { "name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n {% set relations = [] %}\n\n {% if should_store_failures() %}\n\n {% set identifier = models %}\n {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n {% set target_relation = api.Relation.create(\n identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n {% if old_relation %}\n {% do adapter.drop_relation(old_relation) %}\n {% endif %}\n\n {% call statement(auto_begin=True) %}\n {{ create_table_as(False, target_relation, sql) }}\n {% endcall %}\n\n {% do relations.append(target_relation) %}\n\n {% set main_sql %}\n select *\n from {{ target_relation }}\n {% endset %}\n\n {{ adapter.commit() }}\n\n {% else %}\n\n {% set main_sql = sql %}\n\n {% endif %}\n\n {% set limit = config.get('limit') %}\n {% set fail_calc = config.get('fail_calc') %}\n {% set warn_if = config.get('warn_if') %}\n {% set error_if = config.get('error_if') %}\n\n {% call statement('main', fetch_result=True) -%}\n\n {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n {%- endcall %}\n\n {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.805599, "supported_languages": [ "sql" ] }, "macro.dbt.get_test_sql": { "name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_test_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8065221, "supported_languages": null }, "macro.dbt.default__get_test_sql": { "name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n select\n {{ fail_calc }} as failures,\n {{ fail_calc }} {{ warn_if }} as should_warn,\n {{ fail_calc }} {{ error_if }} as should_error\n from (\n {{ main_sql }}\n {{ \"limit \" ~ limit if limit != none }}\n ) dbt_internal_test\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.807178, "supported_languages": null }, "macro.dbt.get_where_subquery": { "name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_where_subquery" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8079047, "supported_languages": null }, "macro.dbt.default__get_where_subquery": { "name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n {% set where = config.get('where', '') %}\n {% if where %}\n {%- set filtered -%}\n (select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ relation }} where {{ where }}) dbt_subquery\n {%- endset -%}\n {% do return(filtered) %}\n {%- else -%}\n {% do return(relation) %}\n {%- endif -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8087163, "supported_languages": null }, "macro.dbt.handle_existing_table": { "name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__handle_existing_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8093207, "supported_languages": null }, "macro.dbt.default__handle_existing_table": { "name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.809805, "supported_languages": null }, "macro.dbt.create_or_replace_view": { "name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n {%- set identifier = models -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n {%- set target_relation = api.Relation.create(\n identifier=identifier, schema=schema, database=database,\n type='view') -%}\n {% set grant_config = config.get('grants') %}\n\n {{ run_hooks(pre_hooks) }}\n\n -- If there's a table with the same name and we weren't told to full refresh,\n -- that's an error. If we were told to full refresh, drop it. This behavior differs\n -- for Snowflake and BigQuery, so multiple dispatch is used.\n {%- if old_relation is not none and old_relation.is_table -%}\n {{ handle_existing_table(should_full_refresh(), old_relation) }}\n {%- endif -%}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_view_as_sql(target_relation, sql) }}\n {%- endcall %}\n\n {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n {{ run_hooks(post_hooks) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8127322, "supported_languages": null }, "macro.dbt.get_create_view_as_sql": { "name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8134725, "supported_languages": null }, "macro.dbt.default__get_create_view_as_sql": { "name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.create_view_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8138568, "supported_languages": null }, "macro.dbt.create_view_as": { "name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_view_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8143094, "supported_languages": null }, "macro.dbt.default__create_view_as": { "name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n create view {{ relation }} as (\n {{ sql }}\n );\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8148785, "supported_languages": null }, "macro.dbt.materialization_view_default": { "name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='view') -%}\n {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n\n -- the intermediate_relation should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n /bin /imagegeneration /run /sbin This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n a previous run, and we're going to try to drop it immediately. At the end of this\n materialization, we're going to rename the \"existing_relation\" to this identifier,\n and then we're going to drop it. In order to make sure we run the correct one of:\n - drop view ...\n - drop table ...\n\n We need to set the type of this relation to be the type of the existing_relation, if it exists,\n or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n this relation will be effectively unused.\n */\n {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n -- as above, the backup_relation should not already exist\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_view_as_sql(intermediate_relation, sql) }}\n {%- endcall %}\n\n -- cleanup\n -- move the existing view out of the way\n {% if existing_relation is not none %}\n {{ adapter.rename_relation(existing_relation, backup_relation) }}\n {% endif %}\n {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n {{ drop_relation_if_exists(backup_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8196576, "supported_languages": [ "sql" ] }, "macro.dbt.get_incremental_append_sql": { "name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_append_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8212194, "supported_languages": null }, "macro.dbt.default__get_incremental_append_sql": { "name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_insert_into_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8217306, "supported_languages": null }, "macro.dbt.get_incremental_delete_insert_sql": { "name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_delete_insert_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8221564, "supported_languages": null }, "macro.dbt.default__get_incremental_delete_insert_sql": { "name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8227806, "supported_languages": null }, "macro.dbt.get_incremental_merge_sql": { "name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.823184, "supported_languages": null }, "macro.dbt.default__get_incremental_merge_sql": { "name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8238223, "supported_languages": null }, "macro.dbt.get_incremental_insert_overwrite_sql": { "name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_insert_overwrite_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8242357, "supported_languages": null }, "macro.dbt.default__get_incremental_insert_overwrite_sql": { "name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_insert_overwrite_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8248003, "supported_languages": null }, "macro.dbt.get_incremental_default_sql": { "name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_incremental_default_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8252048, "supported_languages": null }, "macro.dbt.default__get_incremental_default_sql": { "name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_incremental_append_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8255398, "supported_languages": null }, "macro.dbt.get_insert_into_sql": { "name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n insert into {{ target_relation }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ temp_relation }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.826311, "supported_languages": null }, "macro.dbt.get_quoted_csv": { "name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n {% set quoted = [] %}\n {% for col in column_names -%}\n {%- do quoted.append(adapter.quote(col)) -%}\n {%- endfor %}\n\n {%- set dest_cols_csv = quoted | join(', ') -%}\n {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8289847, "supported_languages": null }, "macro.dbt.diff_columns": { "name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n {% set result = [] %}\n {% set source_names = source_columns | map(attribute = 'column') | list %}\n {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n {% for sc in source_columns %}\n {% if sc.name not in target_names %}\n {{ result.append(sc) }}\n {% endif %}\n {% endfor %}\n\n {{ return(result) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8301778, "supported_languages": null }, "macro.dbt.diff_column_data_types": { "name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n {% set result = [] %}\n {% for sc in source_columns %}\n {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n {% if tc %}\n {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n {% endif %}\n {% endif %}\n {% endfor %}\n\n {{ return(result) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8315666, "supported_languages": null }, "macro.dbt.get_merge_update_columns": { "name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_merge_update_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8320699, "supported_languages": null }, "macro.dbt.default__get_merge_update_columns": { "name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n {%- if merge_update_columns and merge_exclude_columns -%}\n {{ exceptions.raise_compiler_error(\n 'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n )}}\n {%- elif merge_update_columns -%}\n {%- set update_columns = merge_update_columns -%}\n {%- elif merge_exclude_columns -%}\n {%- set update_columns = [] -%}\n {%- for column in dest_columns -%}\n {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n {%- do update_columns.append(column.quoted) -%}\n {% endif %}\n {%- endfor -%}\n {%- else -%}\n {%- set update_columns = default_cols -%}\n {%- endif -%}\n\n {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8335729, "supported_languages": null }, "macro.dbt.materialization_incremental_default": { "name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n -- relations\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='table') -%}\n {%- set temp_relation = make_temp_relation(target_relation)-%}\n {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n -- configs\n {%- set unique_key = config.get('unique_key') -%}\n {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n -- the temp_ and backup_ relations should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation. This has to happen before\n -- BEGIN, in a separate transaction\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set to_drop = [] %}\n\n {% if existing_relation is none %}\n {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n {% elif full_refresh_mode %}\n {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n {% set need_swap = true %}\n {% else %}\n {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n {% do adapter.expand_target_column_types(\n from_relation=temp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n\n {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n {% endif %}\n\n {% call statement(\"main\") %}\n {{ build_sql }}\n {% endcall %}\n\n {% if need_swap %}\n {% do adapter.rename_relation(target_relation, backup_relation) %}\n {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n {% do to_drop.append(backup_relation) %}\n {% endif %}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n -- `COMMIT` happens here\n {% do adapter.commit() %}\n\n {% for rel in to_drop %}\n {% do adapter.drop_relation(rel) %}\n {% endfor %}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8429763, "supported_languages": [ "sql" ] }, "macro.dbt.incremental_validate_on_schema_change": { "name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n {% do log(log_message) %}\n\n {{ return(default) }}\n\n {% else %}\n\n {{ return(on_schema_change) }}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.851281, "supported_languages": null }, "macro.dbt.check_for_schema_changes": { "name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n {% set schema_changed = False %}\n\n {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n {% if source_not_in_target != [] %}\n {% set schema_changed = True %}\n {% elif target_not_in_source != [] or new_target_types != [] %}\n {% set schema_changed = True %}\n {% elif new_target_types != [] %}\n {% set schema_changed = True %}\n {% endif %}\n\n {% set changes_dict = {\n 'schema_changed': schema_changed,\n 'source_not_in_target': source_not_in_target,\n 'target_not_in_source': target_not_in_source,\n 'source_columns': source_columns,\n 'target_columns': target_columns,\n 'new_target_types': new_target_types\n } %}\n\n {% set msg %}\n In {{ target_relation }}:\n Schema changed: {{ schema_changed }}\n Source columns not in target: {{ source_not_in_target }}\n Target columns not in source: {{ target_not_in_source }}\n New column types: {{ new_target_types }}\n {% endset %}\n\n {% do log(msg) %}\n\n {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.diff_columns", "macro.dbt.diff_column_data_types" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8538005, "supported_languages": null }, "macro.dbt.sync_column_schemas": { "name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n {%- if on_schema_change == 'append_new_columns'-%}\n {%- if add_to_target_arr | length > 0 -%}\n {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n {%- endif -%}\n\n {% elif on_schema_change == 'sync_all_columns' %}\n {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n {% endif %}\n\n {% if new_target_types != [] %}\n {% for ntt in new_target_types %}\n {% set column_name = ntt['column_name'] %}\n {% set new_type = ntt['new_type'] %}\n {% do alter_column_type(target_relation, column_name, new_type) %}\n {% endfor %}\n {% endif %}\n\n {% endif %}\n\n {% set schema_change_message %}\n In {{ target_relation }}:\n Schema change approach: {{ on_schema_change }}\n Columns added: {{ add_to_target_arr }}\n Columns removed: {{ remove_from_target_arr }}\n Data types changed: {{ new_target_types }}\n {% endset %}\n\n {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.856339, "supported_languages": null }, "macro.dbt.process_schema_changes": { "name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n {% if on_schema_change == 'ignore' %}\n\n {{ return({}) }}\n\n {% else %}\n\n {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n {% if schema_changes_dict['schema_changed'] %}\n\n {% if on_schema_change == 'fail' %}\n\n {% set fail_msg %}\n The source and target schemas on this incremental model are out of sync!\n They can be reconciled in several ways:\n - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n - Re-run the incremental model with `full_refresh: True` to update the target schema.\n - update the schema manually and re-run the process.\n\n Additional troubleshooting context:\n Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n New column types: {{ schema_changes_dict['new_target_types'] }}\n {% endset %}\n\n {% do exceptions.raise_compiler_error(fail_msg) %}\n\n {# -- unless we ignore, run the sync operation per the config #}\n {% else %}\n\n {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n {% endif %}\n\n {% endif %}\n\n {{ return(schema_changes_dict['source_columns']) }}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.858175, "supported_languages": null }, "macro.dbt.is_incremental": { "name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n {#-- do not run introspective queries in parsing #}\n {% if not execute %}\n {{ return(False) }}\n {% else %}\n {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n {{ return(relation is not none\n and relation.type == 'table'\n and model.config.materialized == 'incremental'\n and not should_full_refresh()) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_full_refresh" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8594537, "supported_languages": null }, "macro.dbt.get_merge_sql": { "name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n -- back compat for old kwarg name\n {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8682072, "supported_languages": null }, "macro.dbt.default__get_merge_sql": { "name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n {%- set merge_update_columns = config.get('merge_update_columns') -%}\n {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {% if unique_key %}\n {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n {% for key in unique_key %}\n {% set this_key_match %}\n DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n {% endset %}\n {% do predicates.append(this_key_match) %}\n {% endfor %}\n {% else %}\n {% set unique_key_match %}\n DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n {% endset %}\n {% do predicates.append(unique_key_match) %}\n {% endif %}\n {% else %}\n {% do predicates.append('FALSE') %}\n {% endif %}\n\n {{ sql_header if sql_header is not none }}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n {% if unique_key %}\n when matched then update set\n {% for column_name in update_columns -%}\n {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n {%- if not loop.last %}, {%- endif %}\n {%- endfor %}\n {% endif %}\n\n when not matched then insert\n ({{ dest_cols_csv }})\n values\n ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.871626, "supported_languages": null }, "macro.dbt.get_delete_insert_merge_sql": { "name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8721845, "supported_languages": null }, "macro.dbt.default__get_delete_insert_merge_sql": { "name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n {% if unique_key %}\n {% if unique_key is sequence and unique_key is not string %}\n delete from {{target }}\n using {{ source }}\n where (\n {% for key in unique_key %}\n {{ source }}.{{ key }} = {{ target }}.{{ key }}\n {{ \"and \" if not loop.last}}\n {% endfor %}\n {% if incremental_predicates %}\n {% for predicate in incremental_predicates %}\n and {{ predicate }}\n {% endfor %}\n {% endif %}\n );\n {% else %}\n delete from {{ target }}\n where (\n {{ unique_key }}) in (\n select ({{ unique_key }})\n from {{ source }}\n )\n {%- if incremental_predicates %}\n {% for predicate in incremental_predicates %}\n and {{ predicate }}\n {% endfor %}\n {%- endif -%};\n\n {% endif %}\n {% endif %}\n\n insert into {{ target }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ source }}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.874325, "supported_languages": null }, "macro.dbt.get_insert_overwrite_merge_sql": { "name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_insert_overwrite_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8749008, "supported_languages": null }, "macro.dbt.default__get_insert_overwrite_merge_sql": { "name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n {#-- The only time include_sql_header is True: --#}\n {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n {#-- We should consider including the sql header at the materialization level instead --#}\n\n {%- set predicates = [] if predicates is none else [] + predicates -%}\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none and include_sql_header }}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on FALSE\n\n when not matched by source\n {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n then delete\n\n when not matched then insert\n ({{ dest_cols_csv }})\n values\n ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.87624, "supported_languages": null }, "macro.dbt.get_create_table_as_sql": { "name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_table_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.877187, "supported_languages": null }, "macro.dbt.default__get_create_table_as_sql": { "name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.877583, "supported_languages": null }, "macro.dbt.create_table_as": { "name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n {# backward compatibility for create_table_as that does not support language #}\n {% if language == \"sql\" %}\n {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n {% else %}\n {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n {% endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8787017, "supported_languages": null }, "macro.dbt.default__create_table_as": { "name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n\n create {% if temporary: -%}temporary{%- endif %} table\n {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n as (\n {{ sql }}\n );\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8795846, "supported_languages": null }, "macro.dbt.materialization_table_default": { "name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='table') %}\n {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n -- the intermediate_relation should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n /bin /imagegeneration /run /sbin See ../view/view.sql for more information about this relation.\n */\n {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n -- as above, the backup_relation should not already exist\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n {%- endcall %}\n\n -- cleanup\n {% if existing_relation is not none %}\n {{ adapter.rename_relation(existing_relation, backup_relation) }}\n {% endif %}\n\n {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n {% do create_indexes(target_relation) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n -- `COMMIT` happens here\n {{ adapter.commit() }}\n\n -- finally, drop the existing/backup relation after the commit\n {{ drop_relation_if_exists(backup_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8845587, "supported_languages": [ "sql" ] }, "macro.dbt.strategy_dispatch": { "name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n {% if '.' in name %}\n {% set package_name, name = name.split(\".\", 1) %}\n {% else %}\n {% set package_name = none %}\n {% endif %}\n\n {% if package_name is none %}\n {% set package_context = context %}\n {% elif package_name in context %}\n {% set package_context = context[package_name] %}\n {% else %}\n {% set error_msg %}\n Could not find package '{{package_name}}', called with '{{original_name}}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n\n {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n {% if search_name not in package_context %}\n {% set error_msg %}\n The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8905482, "supported_languages": null }, "macro.dbt.snapshot_hash_arguments": { "name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.89093, "supported_languages": null }, "macro.dbt.default__snapshot_hash_arguments": { "name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n md5({%- for arg in args -%}\n coalesce(cast({{ arg }} as varchar ), '')\n {% if not loop.last %} || '|' || {% endif %}\n {%- endfor -%})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8914206, "supported_languages": null }, "macro.dbt.snapshot_timestamp_strategy": { "name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n {% set primary_key = config['unique_key'] %}\n {% set updated_at = config['updated_at'] %}\n {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n {#/*\n The snapshot relation might not have an {{ updated_at }} value if the\n snapshot strategy is changed from `check` to `timestamp`. We\n should use a dbt-created column for the comparison in the snapshot\n table instead of assuming that the user-supplied {{ updated_at }}\n will be present in the historical data.\n\n See https://github.com/dbt-labs/dbt-core/issues/2350\n analyses/ assets/ macros/ models/ prod/ scripts/ seeds/ snapshots/ tests/ #}\n {% set row_changed_expr -%}\n ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n {%- endset %}\n\n {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n {% do return({\n \"unique_key\": primary_key,\n \"updated_at\": updated_at,\n \"row_changed\": row_changed_expr,\n \"scd_id\": scd_id_expr,\n \"invalidate_hard_deletes\": invalidate_hard_deletes\n }) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8928728, "supported_languages": null }, "macro.dbt.snapshot_string_as_time": { "name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_string_as_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8932357, "supported_languages": null }, "macro.dbt.default__snapshot_string_as_time": { "name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n {% do exceptions.raise_not_implemented(\n 'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n ) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8936064, "supported_languages": null }, "macro.dbt.snapshot_check_all_get_existing_columns": { "name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n {%- if not target_exists -%}\n {#-- no table yet -> return whatever the query does --#}\n {{ return((false, query_columns)) }}\n {%- endif -%}\n\n {#-- handle any schema changes --#}\n {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n {% if check_cols_config == 'all' %}\n {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n {#-- query for proper casing/quoting, to support comparison below --#}\n {%- set select_check_cols_from_target -%}\n select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n {%- endset -%}\n {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n {% else %}\n {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n {% endif %}\n\n {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n {%- set ns.column_added = false -%}\n\n {%- set intersection = [] -%}\n {%- for col in query_columns -%}\n {%- if col in existing_cols -%}\n {%- do intersection.append(adapter.quote(col)) -%}\n {%- else -%}\n {% set ns.column_added = true %}\n {%- endif -%}\n {%- endfor -%}\n {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_columns_in_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8965282, "supported_languages": null }, "macro.dbt.snapshot_check_strategy": { "name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n {% set check_cols_config = config['check_cols'] %}\n {% set primary_key = config['unique_key'] %}\n {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n {% set column_added = false %}\n\n {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n {%- set row_changed_expr -%}\n (\n {%- if column_added -%}\n {{ get_true_sql() }}\n {%- else -%}\n {%- for col in check_cols -%}\n {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n or\n (\n (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n or\n ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n )\n {%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n {%- endif -%}\n )\n {%- endset %}\n\n {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n {% do return({\n \"unique_key\": primary_key,\n \"updated_at\": updated_at,\n \"row_changed\": row_changed_expr,\n \"scd_id\": scd_id_expr,\n \"invalidate_hard_deletes\": invalidate_hard_deletes\n }) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.8996923, "supported_languages": null }, "macro.dbt.snapshot_merge_sql": { "name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9005268, "supported_languages": null }, "macro.dbt.default__snapshot_merge_sql": { "name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n when matched\n and DBT_INTERNAL_DEST.dbt_valid_to is null\n and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n then update\n set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n when not matched\n and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n then insert ({{ insert_cols_csv }})\n values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.901087, "supported_languages": null }, "macro.dbt.materialization_snapshot_default": { "name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n {%- set config = model['config'] -%}\n\n {%- set target_table = model.get('alias', model.get('name')) -%}\n\n {%- set strategy_name = config.get('strategy') -%}\n {%- set unique_key = config.get('unique_key') %}\n -- grab current tables grants config for comparision later on\n {%- set grant_config = config.get('grants') -%}\n\n {% set target_relation_exists, target_relation = get_or_create_relation(\n database=model.database,\n schema=model.schema,\n identifier=target_table,\n type='table') -%}\n\n {%- if not target_relation.is_table -%}\n {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n {%- endif -%}\n\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set strategy_macro = strategy_dispatch(strategy_name) %}\n {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n {% if not target_relation_exists %}\n\n {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n {% else %}\n\n {{ adapter.valid_snapshot_target(target_relation) }}\n\n {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n -- this may no-op if the database does not require column expansion\n {% do adapter.expand_target_column_types(from_relation=staging_table,\n to_relation=target_relation) %}\n\n {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n | rejectattr('name', 'equalto', 'dbt_change_type')\n | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n | rejectattr('name', 'equalto', 'dbt_unique_key')\n | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n | list %}\n\n {% do create_columns(target_relation, missing_columns) %}\n\n {% set source_columns = adapter.get_columns_in_relation(staging_table)\n | rejectattr('name', 'equalto', 'dbt_change_type')\n | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n | rejectattr('name', 'equalto', 'dbt_unique_key')\n | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n | list %}\n\n {% set quoted_source_columns = [] %}\n {% for column in source_columns %}\n {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n {% endfor %}\n\n {% set final_sql = snapshot_merge_sql(\n target = target_relation,\n source = staging_table,\n insert_cols = quoted_source_columns\n )\n %}\n\n {% endif %}\n\n {% call statement('main') %}\n {{ final_sql }}\n {% endcall %}\n\n {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if not target_relation_exists %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n {% if staging_table is defined %}\n {% do post_snapshot(staging_table) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.911398, "supported_languages": [ "sql" ] }, "macro.dbt.create_columns": { "name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.91733, "supported_languages": null }, "macro.dbt.default__create_columns": { "name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n {% for column in columns %}\n {% call statement() %}\n alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n {% endcall %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9179707, "supported_languages": null }, "macro.dbt.post_snapshot": { "name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__post_snapshot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.918348, "supported_languages": null }, "macro.dbt.default__post_snapshot": { "name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n {# no-op #}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9185576, "supported_languages": null }, "macro.dbt.get_true_sql": { "name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_true_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9188783, "supported_languages": null }, "macro.dbt.default__get_true_sql": { "name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n {{ return('TRUE') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.919141, "supported_languages": null }, "macro.dbt.snapshot_staging_table": { "name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__snapshot_staging_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.919583, "supported_languages": null }, "macro.dbt.default__snapshot_staging_table": { "name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n with snapshot_query as (\n\n {{ source_sql }}\n\n ),\n\n snapshotted_data as (\n\n select *,\n {{ strategy.unique_key }} as dbt_unique_key\n\n from {{ target_relation }}\n where dbt_valid_to is null\n\n ),\n\n insertions_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n {{ strategy.scd_id }} as dbt_scd_id\n\n from snapshot_query\n ),\n\n updates_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n {{ strategy.updated_at }} as dbt_valid_to\n\n from snapshot_query\n ),\n\n {%- if strategy.invalidate_hard_deletes %}\n\n deletes_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key\n from snapshot_query\n ),\n {% endif %}\n\n insertions as (\n\n select\n 'insert' as dbt_change_type,\n source_data.*\n\n from insertions_source_data as source_data\n left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where snapshotted_data.dbt_unique_key is null\n or (\n snapshotted_data.dbt_unique_key is not null\n and (\n {{ strategy.row_changed }}\n )\n )\n\n ),\n\n updates as (\n\n select\n 'update' as dbt_change_type,\n source_data.*,\n snapshotted_data.dbt_scd_id\n\n from updates_source_data as source_data\n join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where (\n {{ strategy.row_changed }}\n )\n )\n\n {%- if strategy.invalidate_hard_deletes -%}\n ,\n\n deletes as (\n\n select\n 'delete' as dbt_change_type,\n source_data.*,\n {{ snapshot_get_time() }} as dbt_valid_from,\n {{ snapshot_get_time() }} as dbt_updated_at,\n {{ snapshot_get_time() }} as dbt_valid_to,\n snapshotted_data.dbt_scd_id\n\n from snapshotted_data\n left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where source_data.dbt_unique_key is null\n )\n {%- endif %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from insertions\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from updates\n {%- if strategy.invalidate_hard_deletes %}\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from deletes\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.snapshot_get_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9213662, "supported_languages": null }, "macro.dbt.build_snapshot_table": { "name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__build_snapshot_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.921793, "supported_languages": null }, "macro.dbt.default__build_snapshot_table": { "name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n select *,\n {{ strategy.scd_id }} as dbt_scd_id,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n from (\n {{ sql }}\n ) sbq\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9223568, "supported_languages": null }, "macro.dbt.build_snapshot_staging_table": { "name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n {% set temp_relation = make_temp_relation(target_relation) %}\n\n {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n {% call statement('build_snapshot_staging_relation') %}\n {{ create_table_as(True, temp_relation, select) }}\n {% endcall %}\n\n {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.923276, "supported_languages": null }, "macro.dbt.default__test_not_null": { "name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_store_failures" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.92393, "supported_languages": null }, "macro.dbt.default__test_relationships": { "name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n select {{ column_name }} as from_field\n from {{ model }}\n where {{ column_name }} is not null\n),\n\nparent as (\n select {{ field }} as to_field\n from {{ to }}\n)\n\nselect\n from_field\n\nfrom child\nleft join parent\n on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.924611, "supported_languages": null }, "macro.dbt.default__test_unique": { "name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n {{ column_name }} as unique_field,\n count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9251246, "supported_languages": null }, "macro.dbt.default__test_accepted_values": { "name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n select\n {{ column_name }} as value_field,\n count(*) as n_records\n\n from {{ model }}\n group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n {% for value in values -%}\n {% if quote -%}\n '{{ value }}'\n {%- else -%}\n {{ value }}\n {%- endif -%}\n {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9262893, "supported_languages": null }, "macro.dbt.intersect": { "name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__intersect" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9267914, "supported_languages": null }, "macro.dbt.default__intersect": { "name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n intersect\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9269729, "supported_languages": null }, "macro.dbt.position": { "name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__position" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.927576, "supported_languages": null }, "macro.dbt.default__position": { "name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n position(\n {{ substring_text }} in {{ string_text }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9278815, "supported_languages": null }, "macro.dbt.escape_single_quotes": { "name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__escape_single_quotes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9284372, "supported_languages": null }, "macro.dbt.default__escape_single_quotes": { "name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9287453, "supported_languages": null }, "macro.dbt.safe_cast": { "name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__safe_cast" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9293404, "supported_languages": null }, "macro.dbt.default__safe_cast": { "name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n {# most databases don't support this function yet\n so we just need to use cast #}\n cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9296536, "supported_languages": null }, "macro.dbt.array_construct": { "name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__array_construct" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9306018, "supported_languages": null }, "macro.dbt.default__array_construct": { "name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n {% if inputs|length > 0 %}\n array[ {{ inputs|join(' , ') }} ]\n {% else %}\n array[]::{{data_type}}[]\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9311404, "supported_languages": null }, "macro.dbt.cast_bool_to_text": { "name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9316683, "supported_languages": null }, "macro.dbt.default__cast_bool_to_text": { "name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.932021, "supported_languages": null }, "macro.dbt.datediff": { "name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9327009, "supported_languages": null }, "macro.dbt.default__datediff": { "name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n datediff(\n {{ datepart }},\n {{ first_date }},\n {{ second_date }}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.933067, "supported_languages": null }, "macro.dbt.concat": { "name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9335952, "supported_languages": null }, "macro.dbt.default__concat": { "name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9338875, "supported_languages": null }, "macro.dbt.length": { "name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__length" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.934464, "supported_languages": null }, "macro.dbt.default__length": { "name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n length(\n {{ expression }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9347098, "supported_languages": null }, "macro.dbt.any_value": { "name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__any_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9352372, "supported_languages": null }, "macro.dbt.default__any_value": { "name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.935477, "supported_languages": null }, "macro.dbt.type_string": { "name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9372072, "supported_languages": null }, "macro.dbt.default__type_string": { "name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9375463, "supported_languages": null }, "macro.dbt.type_timestamp": { "name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.937912, "supported_languages": null }, "macro.dbt.default__type_timestamp": { "name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9382677, "supported_languages": null }, "macro.dbt.type_float": { "name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9386322, "supported_languages": null }, "macro.dbt.default__type_float": { "name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9389594, "supported_languages": null }, "macro.dbt.type_numeric": { "name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.939316, "supported_languages": null }, "macro.dbt.default__type_numeric": { "name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9396977, "supported_languages": null }, "macro.dbt.type_bigint": { "name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_bigint" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9400473, "supported_languages": null }, "macro.dbt.default__type_bigint": { "name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9403782, "supported_languages": null }, "macro.dbt.type_int": { "name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.940723, "supported_languages": null }, "macro.dbt.default__type_int": { "name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9411764, "supported_languages": null }, "macro.dbt.type_boolean": { "name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_boolean" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9415462, "supported_languages": null }, "macro.dbt.default__type_boolean": { "name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9418745, "supported_languages": null }, "macro.dbt.array_concat": { "name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__array_concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.942481, "supported_languages": null }, "macro.dbt.default__array_concat": { "name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.94278, "supported_languages": null }, "macro.dbt.right": { "name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__right" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.943389, "supported_languages": null }, "macro.dbt.default__right": { "name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9436944, "supported_languages": null }, "macro.dbt.array_append": { "name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__array_append" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9442804, "supported_languages": null }, "macro.dbt.default__array_append": { "name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9445767, "supported_languages": null }, "macro.dbt.last_day": { "name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.945259, "supported_languages": null }, "macro.dbt.default_last_day": { "name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n cast(\n {{dbt.dateadd('day', '-1',\n dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n )}}\n as date)\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.dateadd", "macro.dbt.date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9458315, "supported_languages": null }, "macro.dbt.default__last_day": { "name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default_last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9461794, "supported_languages": null }, "macro.dbt.split_part": { "name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9471338, "supported_languages": null }, "macro.dbt.default__split_part": { "name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n {{ part_number }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9474995, "supported_languages": null }, "macro.dbt._split_part_negative": { "name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n length({{ string_text }})\n - length(\n replace({{ string_text }}, {{ delimiter_text }}, '')\n ) + 2 {{ part_number }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9479835, "supported_languages": null }, "macro.dbt.date_trunc": { "name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9485643, "supported_languages": null }, "macro.dbt.default__date_trunc": { "name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9488568, "supported_languages": null }, "macro.dbt.string_literal": { "name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__string_literal" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9493756, "supported_languages": null }, "macro.dbt.default__string_literal": { "name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n '{{ value }}'\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.949613, "supported_languages": null }, "macro.dbt.hash": { "name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__hash" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9501817, "supported_languages": null }, "macro.dbt.default__hash": { "name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9505367, "supported_languages": null }, "macro.dbt.except": { "name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.951033, "supported_languages": null }, "macro.dbt.default__except": { "name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n except\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.951223, "supported_languages": null }, "macro.dbt.bool_or": { "name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__bool_or" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9517589, "supported_languages": null }, "macro.dbt.default__bool_or": { "name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9520028, "supported_languages": null }, "macro.dbt.replace": { "name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9528017, "supported_languages": null }, "macro.dbt.default__replace": { "name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n replace(\n {{ field }},\n {{ old_chars }},\n {{ new_chars }}\n )\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9531856, "supported_languages": null }, "macro.dbt.dateadd": { "name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9538777, "supported_languages": null }, "macro.dbt.default__dateadd": { "name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n dateadd(\n {{ datepart }},\n {{ interval }},\n {{ from_date_or_timestamp }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.954261, "supported_languages": null }, "macro.dbt.listagg": { "name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__listagg" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9553776, "supported_languages": null }, "macro.dbt.default__listagg": { "name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n {% if limit_num -%}\n array_to_string(\n array_slice(\n array_agg(\n {{ measure }}\n ){% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n ,0\n ,{{ limit_num }}\n ),\n {{ delimiter_text }}\n )\n {%- else %}\n listagg(\n {{ measure }},\n {{ delimiter_text }}\n )\n {% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.95624, "supported_languages": null }, "macro.dbt.test_unique": { "name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_unique" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.957222, "supported_languages": null }, "macro.dbt.test_not_null": { "name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_not_null" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9577324, "supported_languages": null }, "macro.dbt.test_accepted_values": { "name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_accepted_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9583604, "supported_languages": null }, "macro.dbt.test_relationships": { "name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_relationships" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9589584, "supported_languages": null }, "macro.elementary.generate_schema_baseline_test": { "name": "generate_schema_baseline_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test", "macro_sql": "{% macro generate_schema_baseline_test(name=none, include_sources=True, include_models=False, fail_on_added=False, enforce_types=False) %}\n {% if name %}\n {{ generate_schema_baseline_test_for_node(name, fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n {% else %}\n {{ generate_schema_baseline_test_for_all_nodes(include_sources=include_sources, include_models=include_models,\n fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.generate_schema_baseline_test_for_node", "macro.elementary.generate_schema_baseline_test_for_all_nodes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9622455, "supported_languages": null }, "macro.elementary.generate_schema_baseline_test_for_all_nodes": { "name": "generate_schema_baseline_test_for_all_nodes", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test_for_all_nodes", "macro_sql": "{% macro generate_schema_baseline_test_for_all_nodes(include_sources=True, include_models=False, fail_on_added=False, enforce_types=False) %}\n {% set nodes = elementary.get_nodes_from_graph() %}\n {% for node in nodes %}\n {% if node.package_name != 'elementary' and\n ((include_sources and node.resource_type == 'source') or\n (include_models and node.resource_type == 'model')) %}\n {% do print(\"Generating schema changes from baseline test for {} '{}':\".format(node.resource_type, node.name)) %}\n {{ generate_schema_baseline_test_for_node(node, fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n {% do print('----------------------------------') %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_nodes_from_graph", "macro.elementary.generate_schema_baseline_test_for_node" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.963733, "supported_languages": null }, "macro.elementary.generate_schema_baseline_test_for_node": { "name": "generate_schema_baseline_test_for_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test_for_node", "macro_sql": "{% macro generate_schema_baseline_test_for_node(node, fail_on_added=False, enforce_types=False) %}\n {% if node is string %}\n {% set node_name = node %}\n {% set node = elementary.get_node_by_name(node_name) %}\n\n {% if not node %}\n {% do print(\"Could not find any model or source by the name '{}'!\".format(node_name)) %}\n {% do return(none) %}\n {% endif %}\n {% endif %}\n\n {% if node.resource_type not in [\"source\", \"model\"] %}\n {% do print(\"Only sources and models are supported for this macro, supplied node type: '{}'\".format(node.resource_type)) %}\n {% do return(none) %}\n {% endif %}\n\n {% set node_relation = get_relation_from_node(node) %}\n {% if not node_relation %}\n {% do print(\"Table not found in the DB! Cannot create schema test.\") %}\n {% do return(none) %}\n {% endif %}\n\n {% set columns = adapter.get_columns_in_relation(node_relation) %}\n\n {% set test_params = {} %}\n {% if fail_on_added %}\n {% do test_params.update({\"fail_on_added\": \"true\"}) %}\n {% endif %}\n {% if enforce_types %}\n {% do test_params.update({\"enforce_types\": \"true\"}) %}\n {% endif %}\n\n {# Common yaml for sources and models #}\n {% set common_yaml %}\n - name: {{ node.name }}\n columns:\n {%- for column in columns %}\n - name: {{ column.name }}\n data_type: {{ column.dtype }}\n {% endfor %}\n tests:\n - elementary.schema_changes_from_baseline\n {%- if test_params %}:\n {%- for param, param_val in test_params.items() %}\n {{param}}: {{param_val}}\n {%- endfor -%}\n {% endif -%}\n {% endset %}\n\n {% set full_yaml %}\n {%- if node.resource_type == 'source' %}\nsources:\n - name: {{ node.source_name }}\n tables:\n {{- common_yaml }}\n {% else %}\nmodels:\n {{- common_yaml }}\n {% endif -%}\n {% endset %}\n\n {% do print(full_yaml) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_node_by_name", "macro.elementary.get_relation_from_node" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9678211, "supported_languages": null }, "macro.elementary.generate_json_schema_test": { "name": "generate_json_schema_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_json_schema_test.sql", "original_file_path": "macros/commands/generate_json_schema_test.sql", "unique_id": "macro.elementary.generate_json_schema_test", "macro_sql": "{% macro generate_json_schema_test(node_name, column_name) %}\n {% if target.type not in ['snowflake', 'bigquery'] %}\n {% do exceptions.raise_compiler_error(\"JSON schema test generation is not supported for target: {}\".format(target.type)) %}\n {% endif %}\n\n {% set node = elementary.get_node_by_name(node_name) %}\n {% if node.resource_type not in [\"source\", \"model\"] %}\n {% do exceptions.raise_compiler_error(\"Only sources and models are supported for this macro, supplied node type: '{}'\".format(node.resource_type)) %}\n {% endif %}\n\n {% set node_relation = get_relation_from_node(node) %}\n {% if not elementary.column_exists_in_relation(node_relation, column_name) %}\n {% do exceptions.raise_compiler_error(\"Column '{}' does not exist in {} '{}'!\".format(column_name, node.resource_type, node_name)) %}\n {% endif %}\n\n {% set elementary_database_name, elementary_schema_name = elementary.get_package_database_and_schema() %}\n\n {% do node.config.update({\"packages\": [\"genson\"]}) %}\n {% do node.update({'database': elementary_database_name, 'schema': elementary_schema_name}) %}\n {% if node.resource_type == 'source' %}\n {# Source nodes don't have alias, and submit_python_job expects it #}\n {% do node.update({'alias': \"jsonschemagen_{}_{}\".format(node.source_name, node.name)}) %}\n {% endif %}\n\n {% set output_table = api.Relation.create(database=elementary_database_name, schema=elementary_schema_name,\n identifier='json_schema_tmp__' ~ node.alias).quote(false, false, false) %}\n\n {% set gen_json_schema_func = elementary.generate_json_schema_py_func(column_name) %}\n {% set node_relation = node_relation.quote(false, false, false) %}\n {% set compiled_py_code = adapter.dispatch('compile_py_code', 'elementary')(node_relation, gen_json_schema_func,\n output_table, code_type='function') %}\n\n {% do elementary.run_python(node, compiled_py_code) %}\n {% set json_schema = elementary.result_value('select result from {}'.format(output_table)) %}\n {% if json_schema == 'genson_not_installed' %}\n {% do exceptions.raise_compiler_error(\"The 'genson' python library is missing from your warehouse.\\n\\n\"\n \"This macro relies on the 'genson' python library for generating JSON schemas. Please follow dbt's instructions here: \\n\"\n \"https://docs.getdbt.com/docs/building-a-dbt-project/building-models/python-models#specific-data-warehouses\\n\"\n \"regarding how to install python packages for a {} warehouse.\".format(target.type)\n ) %}\n {% endif %}\n\n {% if not json_schema %}\n {% do exceptions.raise_compiler_error(\"Not a valid JSON column: {}\".format(column_name)) %}\n {% endif %}\n\n {% set json_schema = fromjson(json_schema) %}\n {% do json_schema.pop('$schema', None) %}\n\n {% set testyaml %}\ncolumns:\n - name: {{ column_name }}\n tests:\n - elementary.json_schema:\n {{ toyaml(json_schema) | indent(10) }}\n {% endset %}\n\n {% do print(\"Please add the following test to your {} configuration for the column {}:\".format(node.resource_type, column_name)) %}\n {% do print(testyaml) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_node_by_name", "macro.elementary.get_relation_from_node", "macro.elementary.column_exists_in_relation", "macro.elementary.get_package_database_and_schema", "macro.elementary.generate_json_schema_py_func", "macro.elementary.quote", "macro.elementary.snowflake__compile_py_code", "macro.elementary.run_python", "macro.elementary.result_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.975825, "supported_languages": null }, "macro.elementary.generate_json_schema_py_func": { "name": "generate_json_schema_py_func", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_json_schema_test.sql", "original_file_path": "macros/commands/generate_json_schema_test.sql", "unique_id": "macro.elementary.generate_json_schema_py_func", "macro_sql": "{% macro generate_json_schema_py_func(column_name) %}\nimport json\ntry:\n import genson\nexcept ImportError:\n genson = None\n\ndef get_column_name_in_df(df, column_name):\n matching = [col for col in df.columns if col.lower() == column_name.lower()]\n if len(matching) > 1:\n # Case matters, switch to case-sensitive match\n matching = [col for col in df.columns if col == column_name]\n\n if len(matching) == 0:\n raise Exception(\"No column with the name: {}\".format(col))\n return matching[0]\n\ndef func(model_df, ref, session):\n if genson is None:\n return \"genson_not_installed\"\n\n model_df = model_df.toPandas()\n builder = genson.SchemaBuilder()\n column_name = get_column_name_in_df(model_df, \"{{ column_name }}\")\n for val in set(model_df[column_name]):\n if val == \"\" or val is None:\n continue\n try:\n builder.add_object(json.loads(val))\n except json.JSONDecodeError:\n # Not a valid json column, no schema\n return None\n return builder.to_schema()\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9762883, "supported_languages": null }, "macro.elementary.dbt_model_run_result_description": { "name": "dbt_model_run_result_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/dbt_run_results_description.sql", "original_file_path": "macros/edr/alerts/dbt_run_results_description.sql", "unique_id": "macro.elementary.dbt_model_run_result_description", "macro_sql": "{% macro dbt_model_run_result_description() %}\n 'The model ' || name || ' returned ' || status || ' at ' || generated_at || ' on run ' || invocation_id\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.976555, "supported_languages": null }, "macro.elementary.anomaly_detection_description": { "name": "anomaly_detection_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.anomaly_detection_description", "macro_sql": "{% macro anomaly_detection_description() %}\n case\n when dimension is not null then {{ elementary.dimension_metric_description() }}\n when metric_name = 'freshness' then {{ elementary.freshness_description() }}\n when column_name is null then {{ elementary.table_metric_description() }}\n when column_name is not null then {{ elementary.column_metric_description() }}\n else null\n end as anomaly_description\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.dimension_metric_description", "macro.elementary.freshness_description", "macro.elementary.table_metric_description", "macro.elementary.column_metric_description" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9780288, "supported_languages": null }, "macro.elementary.freshness_description": { "name": "freshness_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.freshness_description", "macro_sql": "{% macro freshness_description() %}\n 'Last update was at ' || anomalous_value || ', ' || abs(round({{ elementary.cast_as_numeric('metric_value/3600') }}, 2)) || ' hours ago. Usually the table is updated within ' || abs(round({{ elementary.cast_as_numeric('training_avg/3600') }}, 2)) || ' hours.'\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9784405, "supported_languages": null }, "macro.elementary.table_metric_description": { "name": "table_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.table_metric_description", "macro_sql": "{% macro table_metric_description() %}\n 'The last ' || metric_name || ' value is ' || round({{ elementary.cast_as_numeric('metric_value') }}, 3) ||\n '. The average for this metric is ' || round({{ elementary.cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9788337, "supported_languages": null }, "macro.elementary.column_metric_description": { "name": "column_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.column_metric_description", "macro_sql": "{% macro column_metric_description() %}\n 'In column ' || column_name || ', the last ' || metric_name || ' value is ' || round({{ elementary.cast_as_numeric('metric_value') }}, 3) ||\n '. The average for this metric is ' || round({{ elementary.cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9792168, "supported_languages": null }, "macro.elementary.dimension_metric_description": { "name": "dimension_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.dimension_metric_description", "macro_sql": "{% macro dimension_metric_description() %}\n 'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || round({{ elementary.cast_as_numeric('metric_value') }}, 3) ||\n '. The average for this metric is ' || round({{ elementary.cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9796064, "supported_languages": null }, "macro.elementary.generate_elementary_cli_profile": { "name": "generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.generate_elementary_cli_profile", "macro_sql": "{% macro generate_elementary_cli_profile(method=none) %}\n {% set elementary_database, elementary_schema = elementary.get_package_database_and_schema() %}\n {{ log('\\n' ~ adapter.dispatch('generate_elementary_cli_profile')(method, elementary_database, elementary_schema), info=True) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_package_database_and_schema", "macro.elementary.snowflake__generate_elementary_cli_profile" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9831145, "supported_languages": null }, "macro.elementary.snowflake__generate_elementary_cli_profile": { "name": "snowflake__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.snowflake__generate_elementary_cli_profile", "macro_sql": "{% macro snowflake__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n outputs:\n default:\n type: {{ target.type }}\n account: {{ target.account }}\n user: {{ target.user }}\n password: <PASSWORD>\n role: {{ target.role }}\n warehouse: {{ target.warehouse }}\n database: {{ elementary_database }}\n schema: {{ elementary_schema }}\n threads: {{ target.threads }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9837859, "supported_languages": null }, "macro.elementary.bigquery__generate_elementary_cli_profile": { "name": "bigquery__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.bigquery__generate_elementary_cli_profile", "macro_sql": "{% macro bigquery__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n outputs:\n default:\n type: {{ target.type }}\n method: <AUTH_METHOD>\n project: {{ elementary_database }}\n {%- if method == 'github-actions' %}\n keyfile: /tmp/bigquery_keyfile.json # Do not change this, supply `bigquery-keyfile` in `.github/workflows/elementary.yml`.\n {%- endif %}\n dataset: {{ elementary_schema }}\n threads: {{ target.threads }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9843946, "supported_languages": null }, "macro.elementary.postgres__generate_elementary_cli_profile": { "name": "postgres__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.postgres__generate_elementary_cli_profile", "macro_sql": "{% macro postgres__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n outputs:\n default:\n type: {{ target.type }}\n host: {{ target.host }}\n port: {{ target.port }}\n user: {{ target.user }}\n password: <PASSWORD>\n dbname: {{ elementary_database }}\n schema: {{ elementary_schema }}\n threads: {{ target.threads }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9849956, "supported_languages": null }, "macro.elementary.databricks__generate_elementary_cli_profile": { "name": "databricks__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.databricks__generate_elementary_cli_profile", "macro_sql": "{% macro databricks__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n outputs:\n default:\n type: {{ target.type }}\n host: {{ target.host }}\n http_path: {{ target.http_path }}\n {%- if elementary_database %}\n catalog: {{ elementary_database }}\n {% endif %}\n schema: {{ elementary_schema }}\n token: <TOKEN>\n threads: {{ target.threads }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9856372, "supported_languages": null }, "macro.elementary.spark__generate_elementary_cli_profile": { "name": "spark__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.spark__generate_elementary_cli_profile", "macro_sql": "{% macro spark__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n outputs:\n default:\n type: databricks\n host: {{ target.host }}\n http_path: <HTTP PATH>\n {%- if elementary_database %}\n catalog: {{ elementary_database }}\n {% endif %}\n schema: {{ elementary_schema }}\n token: <TOKEN>\n threads: {{ target.threads }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9862149, "supported_languages": null }, "macro.elementary.default__generate_elementary_cli_profile": { "name": "default__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "original_file_path": "macros/edr/system/configuration/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.default__generate_elementary_cli_profile", "macro_sql": "{% macro default__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nAdapter \"{{ target.type }}\" is not supported on Elementary.\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9865131, "supported_languages": null }, "macro.elementary.get_configured_schemas_from_graph": { "name": "get_configured_schemas_from_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "original_file_path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "unique_id": "macro.elementary.get_configured_schemas_from_graph", "macro_sql": "{% macro get_configured_schemas_from_graph() %}\n {% set configured_schemas = [] %}\n {% if execute %}\n {% for test_node in graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n {% set test_metadata = test_node.get('test_metadata') %}\n {% if test_metadata %}\n {% set test_name = test_metadata.get('name') %}\n {% if test_name.startswith('schema_changes') %}\n {% set test_depends_on_unique_ids = test_node.depends_on.nodes %}\n {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n {% for node in depends_on_nodes %}\n {% set node_package_name = node.get('package_name') %}\n {% if node_package_name != 'elementary' %}\n {% if adapter.check_schema_exists(node['database'], node['schema']) %}\n {% do configured_schemas.append((node['database'], node['schema'])) %}\n {% endif %}\n {% endif %}\n {% endfor %}\n {% endif %}\n {% endif %}\n {% endfor %}\n {% endif %}\n {{ return(configured_schemas | unique | list ) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_nodes_by_unique_ids" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9902003, "supported_languages": null }, "macro.elementary.is_elementary_enabled": { "name": "is_elementary_enabled", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/is_elementary_enabled.sql", "original_file_path": "macros/edr/system/configuration/is_elementary_enabled.sql", "unique_id": "macro.elementary.is_elementary_enabled", "macro_sql": "{% macro is_elementary_enabled() %}\n {% do return(\"elementary\" in graph) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9906428, "supported_languages": null }, "macro.elementary.on_run_start": { "name": "on_run_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/hooks/on_run_start.sql", "original_file_path": "macros/edr/system/hooks/on_run_start.sql", "unique_id": "macro.elementary.on_run_start", "macro_sql": "{% macro on_run_start() %}\n {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n {% if not execute or edr_cli_run %}\n {{ return('') }}\n {% endif %}\n\n {% do elementary.init_elementary_graph() %}\n\n {% if flags.WHICH in ['test', 'build'] %}\n {{ elementary.create_elementary_tests_schema() }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.init_elementary_graph", "macro.elementary.create_elementary_tests_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9917688, "supported_languages": null }, "macro.elementary.on_run_end": { "name": "on_run_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/hooks/on_run_end.sql", "original_file_path": "macros/edr/system/hooks/on_run_end.sql", "unique_id": "macro.elementary.on_run_end", "macro_sql": "{% macro on_run_end() %}\n {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n {% if not execute or edr_cli_run %}\n {{ return('') }}\n {% endif %}\n\n {% if not elementary.get_config_var('disable_dbt_artifacts_autoupload') %}\n {{ elementary.upload_dbt_artifacts() }}\n {% endif %}\n\n {% if not elementary.get_config_var('disable_run_results') %}\n {{ elementary.upload_run_results() }}\n {% endif %}\n\n {% if flags.WHICH in ['test', 'build'] and not elementary.get_config_var('disable_tests_results') %}\n {{ elementary.handle_tests_results() }}\n {% endif %}\n\n {% if not elementary.get_config_var('disable_dbt_invocation_autoupload') %}\n {{ elementary.upload_dbt_invocation() }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.upload_dbt_artifacts", "macro.elementary.upload_run_results", "macro.elementary.handle_tests_results", "macro.elementary.upload_dbt_invocation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9938488, "supported_languages": null }, "macro.elementary.edr_log": { "name": "edr_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.edr_log", "macro_sql": "{% macro edr_log(msg) %}\n {%- if execute %}\n {% do log('Elementary: ' ~ msg, info=True) %}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9951713, "supported_languages": null }, "macro.elementary.debug_log": { "name": "debug_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.debug_log", "macro_sql": "{% macro debug_log(msg) %}\n {%- if execute %}\n {% set debug_logs_enabled = elementary.get_config_var('debug_logs') %}\n {% if debug_logs_enabled %}\n {{ elementary.edr_log(msg) }}\n {% endif %}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.edr_log" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9958029, "supported_languages": null }, "macro.elementary.test_log": { "name": "test_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.test_log", "macro_sql": "{% macro test_log(msg_type, table_name, column_name=none) %}\n {%- if column_name %}\n {%- set start = 'Started running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n {%- set end = 'Finished running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n {%- else %}\n {%- set start = 'Started running data monitors on: ' ~ table_name %}\n {%- set end = 'Finished running data monitors on: ' ~ table_name %}\n {%- endif %}\n\n {%- if msg_type == 'start' %}\n {% do elementary.edr_log(start) %}\n {%- elif msg_type == 'end' %}\n {% do elementary.edr_log(end) %}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.edr_log" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.997072, "supported_languages": null }, "macro.elementary.get_test_argument": { "name": "get_test_argument", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_test_argument.sql", "original_file_path": "macros/edr/system/system_utils/get_test_argument.sql", "unique_id": "macro.elementary.get_test_argument", "macro_sql": "{% macro get_test_argument(argument_name, value=none) %}\n {% if value %}\n {{ return(value) }}\n {% else %}\n {{ return(elementary.get_config_var(argument_name)) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9978166, "supported_languages": null }, "macro.elementary.monitors_run_end": { "name": "monitors_run_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/data_monitors_end.sql", "original_file_path": "macros/edr/system/system_utils/data_monitors_end.sql", "unique_id": "macro.elementary.monitors_run_end", "macro_sql": "{% macro monitors_run_end() %}\n\n {%- set monitors_run_end_query %}\n update {{ ref('elementary_runs') }}\n set monitors_run_end = {{ elementary.current_timestamp_in_utc() }}\n where run_id = '{{ invocation_id }}'\n {%- endset %}\n\n {%- do run_query(monitors_run_end_query) -%}\n {%- do edr_log('Finished running data monitors') -%}\n\n {{ return('') }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.current_timestamp_in_utc", "macro.dbt.run_query", "macro.elementary.edr_log" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9988077, "supported_languages": null }, "macro.elementary.get_elementary_package_version": { "name": "get_elementary_package_version", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_elementary_package_version.sql", "original_file_path": "macros/edr/system/system_utils/get_elementary_package_version.sql", "unique_id": "macro.elementary.get_elementary_package_version", "macro_sql": "{% macro get_elementary_package_version() %}\n {% set conf = elementary.get_runtime_config() %}\n {% do return(conf.dependencies[\"elementary\"].version) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_runtime_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283570.9993832, "supported_languages": null }, "macro.elementary.get_compiled_model_code_text": { "name": "get_compiled_model_code_text", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_compiled_model_code_text.sql", "original_file_path": "macros/edr/system/system_utils/get_compiled_model_code_text.sql", "unique_id": "macro.elementary.get_compiled_model_code_text", "macro_sql": "{% macro get_compiled_model_code_text(node) %}\n {% set should_collect_model_sql = elementary.get_config_var('collect_model_sql') %}\n {% if not should_collect_model_sql %}\n {{ return(none) }}\n {% endif %}\n\n {% set model_sql_max_size = elementary.get_config_var('model_sql_max_size') %}\n {% set long_string_size = elementary.get_config_var('long_string_size') %}\n {% set model_sql_size_limit = [model_sql_max_size, long_string_size] | min %}\n {% set model_code = elementary.get_compiled_code(node) %}\n\n {# Seeds do not have compiled code. #}\n {% if not model_code %}\n {{ return(none) }}\n {% endif %}\n\n {% if model_sql_size_limit < model_code | length %}\n {{ return('Model code is too long - over ' ~ model_sql_size_limit ~ ' bytes') }}\n {% else %}\n {{ return(model_code) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.get_compiled_code" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0014834, "supported_languages": null }, "macro.elementary.from": { "name": "from", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "unique_id": "macro.elementary.from", "macro_sql": "{% macro from(full_table_name) %}\n {{ adapter.dispatch('from','elementary')(full_table_name) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__from" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0023212, "supported_languages": null }, "macro.elementary.default__from": { "name": "default__from", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "unique_id": "macro.elementary.default__from", "macro_sql": "{% macro default__from(full_table_name) %}\n {%- set upper_full_name = full_table_name | upper %}\n {%- set split_full_name = upper_full_name.split('.') %}\n {%- set from_name = '\"'~ split_full_name[0] ~'\".\"'~ split_full_name[1] ~'\".\"'~ split_full_name[2] ~'\"' %}\n {{ return(from_name) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.003192, "supported_languages": null }, "macro.elementary.bigquery__from": { "name": "bigquery__from", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "unique_id": "macro.elementary.bigquery__from", "macro_sql": "{% macro bigquery__from(full_table_name) %}\n {%- set lower_full_name = full_table_name | lower %}\n {%- set split_full_name = lower_full_name.split('.') %}\n {%- set from_name = '`'~ split_full_name[0] ~'`.`'~ split_full_name[1] ~'`.`'~ split_full_name[2] ~'`' %}\n {{ return(from_name) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.004041, "supported_languages": null }, "macro.elementary.get_target_path": { "name": "get_target_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_target_path.sql", "original_file_path": "macros/edr/system/system_utils/get_target_path.sql", "unique_id": "macro.elementary.get_target_path", "macro_sql": "{% macro get_target_path(identifier=none) %}\n {% set runtime_conf = elementary.get_runtime_config() %}\n {% set elementary_target_path = flags.Path(runtime_conf.target_path) / 'elementary' %}\n {% if identifier %}\n {{ return(elementary_target_path / identifier) }}\n {% else %}\n {{ return(elementary_target_path) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_runtime_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.005094, "supported_languages": null }, "macro.elementary.complete_buckets_cte": { "name": "complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.complete_buckets_cte", "macro_sql": "{% macro complete_buckets_cte(time_bucket) %}\n {{ adapter.dispatch('complete_buckets_cte','elementary')(time_bucket) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.snowflake__complete_buckets_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0109787, "supported_languages": null }, "macro.elementary.spark__complete_buckets_cte": { "name": "spark__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.spark__complete_buckets_cte", "macro_sql": "{% macro spark__complete_buckets_cte(time_bucket) %}\n {% set edr_bucket_end_expr = elementary.timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n {%- set complete_buckets_cte %}\n select\n edr_bucket_start,\n {{ edr_bucket_end_expr }} as edr_bucket_end\n from (select explode(sequence({{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())) }}, {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start)\n where {{ edr_bucket_end_expr }} <= {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}\n {%- endset %}\n {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.timeadd", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0123212, "supported_languages": null }, "macro.elementary.snowflake__complete_buckets_cte": { "name": "snowflake__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.snowflake__complete_buckets_cte", "macro_sql": "{% macro snowflake__complete_buckets_cte(time_bucket) -%}\n {% set edr_bucket_end_expr = elementary.timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n {%- set complete_buckets_cte %}\n with timestamps as (\n select {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())) }} as edr_bucket_start\n union all\n select {{ edr_bucket_end_expr }} as next_bucket\n from timestamps\n where next_bucket < {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}\n )\n select\n edr_bucket_start,\n {{ edr_bucket_end_expr }} as edr_bucket_end\n from timestamps\n where {{ edr_bucket_end_expr }} <= {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}\n {%- endset %}\n {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.timeadd", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0137534, "supported_languages": null }, "macro.elementary.bigquery__complete_buckets_cte": { "name": "bigquery__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.bigquery__complete_buckets_cte", "macro_sql": "{% macro bigquery__complete_buckets_cte(time_bucket) %}\n {% set edr_bucket_end_expr = elementary.timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n {%- set complete_buckets_cte %}\n select\n edr_bucket_start,\n {{ edr_bucket_end_expr }} as edr_bucket_end\n from unnest(generate_timestamp_array({{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())) }}, {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start\n where {{ edr_bucket_end_expr }} <= {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}\n {%- endset %}\n {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.timeadd", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0152774, "supported_languages": null }, "macro.elementary.redshift__complete_buckets_cte": { "name": "redshift__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.redshift__complete_buckets_cte", "macro_sql": "{% macro redshift__complete_buckets_cte(time_bucket) %}\n {%- set complete_buckets_cte %}\n with integers as (\n select (row_number() over (order by 1)) - 1 as num\n from pg_catalog.pg_class\n limit {{ elementary.timediff(time_bucket.period, elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())), elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end()))) }} / {{ time_bucket.count }} + 1\n )\n select\n {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())) }} + (num README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests interval '{{ time_bucket.count }} {{ time_bucket.period }}') as edr_bucket_start,\n {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())) }} + ((num + 1) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests interval '{{ time_bucket.count }} {{ time_bucket.period }}') as edr_bucket_end\n from integers\n where edr_bucket_end <= {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}\n {%- endset %}\n {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.timediff", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0169024, "supported_languages": null }, "macro.elementary.postgres__complete_buckets_cte": { "name": "postgres__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.postgres__complete_buckets_cte", "macro_sql": "{% macro postgres__complete_buckets_cte(time_bucket) %}\n {% set edr_bucket_end_expr = elementary.timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n {%- set complete_buckets_cte %}\n select\n edr_bucket_start,\n {{ edr_bucket_end_expr }} as edr_bucket_end\n from generate_series({{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_start())) }}, {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}, interval '{{ time_bucket.count }} {{ time_bucket.period }}') edr_bucket_start\n where {{ edr_bucket_end_expr }} <= {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }}\n {%- endset %}\n {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.timeadd", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0182652, "supported_languages": null }, "macro.elementary.full_table_name": { "name": "full_table_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_table_name", "macro_sql": "{% macro full_table_name(alias) -%}\n {% if alias is defined %}{%- set alias_dot = alias ~ '.' %}{% endif %}\n upper({{ alias_dot }}database_name || '.' || {{ alias_dot }}schema_name || '.' || {{ alias_dot }}table_name)\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.022231, "supported_languages": null }, "macro.elementary.full_schema_name": { "name": "full_schema_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_schema_name", "macro_sql": "{% macro full_schema_name() -%}\n upper(database_name || '.' || schema_name)\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.022421, "supported_languages": null }, "macro.elementary.full_column_name": { "name": "full_column_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_column_name", "macro_sql": "{% macro full_column_name() -%}\n upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name)\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0225976, "supported_languages": null }, "macro.elementary.split_full_table_name_to_vars": { "name": "split_full_table_name_to_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.split_full_table_name_to_vars", "macro_sql": "{% macro split_full_table_name_to_vars(full_table_name) %}\n {% set split_full_table_name = full_table_name.split('.') %}\n {# Databricks full name sometimes is schema.table, no db #}\n {%- if split_full_table_name | length == 2 %}\n {% set database_name = None %}\n {% set schema_name = split_full_table_name[0] %}\n {% set table_name = split_full_table_name[1] %}\n {%- else %}\n {% set database_name = split_full_table_name[0] %}\n {% set schema_name = split_full_table_name[1] %}\n {% set table_name = split_full_table_name[2] %}\n {%- endif %}\n {{ return((database_name, schema_name, table_name)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0239549, "supported_languages": null }, "macro.elementary.full_name_split": { "name": "full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_name_split", "macro_sql": "{% macro full_name_split(part_name) %}\n {{ adapter.dispatch('full_name_split','elementary')(part_name) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__full_name_split" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0243304, "supported_languages": null }, "macro.elementary.default__full_name_split": { "name": "default__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.default__full_name_split", "macro_sql": "{% macro default__full_name_split(part_name) %}\n {%- if part_name == 'database_name' -%}\n {%- set part_index = 0 -%}\n {%- elif part_name == 'schema_name' -%}\n {%- set part_index = 1 -%}\n {%- elif part_name == 'table_name' -%}\n {%- set part_index = 2 -%}\n {%- else -%}\n {{ return('') }}\n {%- endif -%}\n trim(split(full_table_name,'.')[{{ part_index }}],'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0252182, "supported_languages": null }, "macro.elementary.bigquery__full_name_split": { "name": "bigquery__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.bigquery__full_name_split", "macro_sql": "{% macro bigquery__full_name_split(part_name) %}\n {%- if part_name == 'database_name' -%}\n {%- set part_index = 0 %}\n {%- elif part_name == 'schema_name' -%}\n {%- set part_index = 1 %}\n {%- elif part_name == 'table_name' -%}\n {%- set part_index = 2 -%}\n {%- else -%}\n {{ return('') }}\n {%- endif -%}\n trim(split(full_table_name,'.')[OFFSET({{ part_index }})],'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.026152, "supported_languages": null }, "macro.elementary.postgres__full_name_split": { "name": "postgres__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.postgres__full_name_split", "macro_sql": "{% macro postgres__full_name_split(part_name) %}\n {%- if part_name == 'database_name' -%}\n {%- set part_index = 1 -%}\n {%- elif part_name == 'schema_name' -%}\n {%- set part_index = 2 -%}\n {%- elif part_name == 'table_name' -%}\n {%- set part_index = 3 -%}\n {%- else -%}\n {{ return('') }}\n {%- endif -%}\n trim(split_part(full_table_name,'.',{{ part_index }}),'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.027053, "supported_languages": null }, "macro.elementary.relation_to_full_name": { "name": "relation_to_full_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.relation_to_full_name", "macro_sql": "{% macro relation_to_full_name(relation) %}\n {%- if relation.database %}\n {%- set full_table_name = relation.database | upper ~'.'~ relation.schema | upper ~'.'~ relation.identifier | upper %}\n {%- else %}\n {# Databricks doesn't always have a database #}\n {%- set full_table_name = relation.schema | upper ~'.'~ relation.identifier | upper %}\n {%- endif %}\n {{ return(full_table_name) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0279317, "supported_languages": null }, "macro.elementary.model_node_to_full_name": { "name": "model_node_to_full_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.model_node_to_full_name", "macro_sql": "{% macro model_node_to_full_name(model_node) %}\n {% set identifier = model_node.identifier or model_node.alias %}\n {%- if model_node.database %}\n {%- set full_table_name = model_node.database | upper ~'.'~ model_node.schema | upper ~'.'~ identifier | upper %}\n {%- else %}\n {# Databricks doesn't always have a database #}\n {%- set full_table_name = model_node.schema | upper ~'.'~ identifier | upper %}\n {%- endif %}\n {{ return(full_table_name) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.028921, "supported_languages": null }, "macro.elementary.configured_schemas_from_graph_as_tuple": { "name": "configured_schemas_from_graph_as_tuple", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.configured_schemas_from_graph_as_tuple", "macro_sql": "{% macro configured_schemas_from_graph_as_tuple() %}\n\n {%- set configured_schema_tuples = elementary.get_configured_schemas_from_graph() %}\n {%- set schemas_list = [] %}\n\n {%- for configured_schema_tuple in configured_schema_tuples %}\n {%- set database_name, schema_name = configured_schema_tuple %}\n {%- set full_schema_name = database_name | upper ~ '.' ~ schema_name | upper %}\n {%- do schemas_list.append(full_schema_name) -%}\n {%- endfor %}\n\n {% set schemas_tuple = elementary.strings_list_to_tuple(schemas_list) %}\n {{ return(schemas_tuple) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_configured_schemas_from_graph", "macro.elementary.strings_list_to_tuple" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0300415, "supported_languages": null }, "macro.elementary.empty_elementary_test_results": { "name": "empty_elementary_test_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_elementary_test_results", "macro_sql": "{% macro empty_elementary_test_results() %}\n {{ elementary.empty_table([\n ('id','long_string'),\n ('data_issue_id','string'),\n ('test_execution_id','long_string'),\n ('test_unique_id','long_string'),\n ('model_unique_id','long_string'),\n ('invocation_id', 'string'),\n ('detected_at','timestamp'),\n ('database_name','string'),\n ('schema_name','string'),\n ('table_name','string'),\n ('column_name','string'),\n ('test_type','string'),\n ('test_sub_type','string'),\n ('test_results_description','long_string'),\n ('owners','string'),\n ('tags','string'),\n ('test_results_query','long_string'),\n ('other','string'),\n ('test_name','long_string'),\n ('test_params','long_string'),\n ('severity','string'),\n ('status','string'),\n ('failures', 'bigint'),\n ('test_short_name', 'string'),\n ('test_alias', 'string'),\n ('result_rows', 'long_string')\n ]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0370567, "supported_languages": null }, "macro.elementary.empty_dbt_source_freshness_results": { "name": "empty_dbt_source_freshness_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_dbt_source_freshness_results", "macro_sql": "{% macro empty_dbt_source_freshness_results() %}\n {{ elementary.empty_table([\n ('source_freshness_execution_id','string'),\n ('unique_id','string'),\n ('max_loaded_at','string'),\n ('snapshotted_at','string'),\n ('generated_at', 'string'),\n ('max_loaded_at_time_ago_in_s','float'),\n ('status','string'),\n ('error','string'),\n ('compile_started_at', 'string'),\n ('compile_completed_at', 'string'),\n ('execute_started_at', 'string'),\n ('execute_completed_at', 'string'),\n ('invocation_id', 'string')\n ]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0383515, "supported_languages": null }, "macro.elementary.empty_data_monitoring_metrics": { "name": "empty_data_monitoring_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_data_monitoring_metrics", "macro_sql": "{% macro empty_data_monitoring_metrics() %}\n {{ elementary.empty_table([('id','string'),('full_table_name','string'),('column_name','string'),('metric_name','string'),('metric_value','float'),('source_value','string'),('bucket_start','timestamp'),('bucket_end','timestamp'),('bucket_duration_hours','int'),('updated_at','timestamp'),('dimension','string'),('dimension_value','string')]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0394843, "supported_languages": null }, "macro.elementary.empty_schema_columns_snapshot": { "name": "empty_schema_columns_snapshot", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_schema_columns_snapshot", "macro_sql": "{% macro empty_schema_columns_snapshot() %}\n {{ elementary.empty_table([('column_state_id','string'),('full_column_name','string'),('full_table_name','string'),('column_name','string'),('data_type','string'),('is_new','boolean'),('detected_at','timestamp')]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0402625, "supported_languages": null }, "macro.elementary.empty_column_monitors_cte": { "name": "empty_column_monitors_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_column_monitors_cte", "macro_sql": "{% macro empty_column_monitors_cte() %}\n {%- set column_monitors_list = elementary.all_column_monitors() %}\n {%- set columns_definition = [('column_name', 'string'), ('bucket', 'timestamp')] %}\n {%- for monitor in column_monitors_list %}\n {%- do columns_definition.append((monitor,'int'))-%}\n {%- endfor %}\n {{ elementary.empty_table(columns_definition) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.all_column_monitors", "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0411644, "supported_languages": null }, "macro.elementary.empty_table": { "name": "empty_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_table", "macro_sql": "{% macro empty_table(column_name_and_type_list) %}\n\n {%- set empty_table_query -%}\n with empty_table as (\n select\n {% for column in column_name_and_type_list %}\n {{ elementary.empty_column(column[0], column[1]) }} {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n )\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from empty_table\n where 1 = 0\n {%- endset -%}\n\n {{- return(empty_table_query)-}}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.042019, "supported_languages": null }, "macro.elementary.empty_column": { "name": "empty_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_column", "macro_sql": "{% macro empty_column(column_name, data_type) %}\n\n {%- set dummy_values = elementary.dummy_values() %}\n\n {%- if data_type == 'boolean' %}\n cast ({{ dummy_values['boolean'] }} as {{ elementary.type_bool()}}) as {{ column_name }}\n {%- elif data_type == 'timestamp' -%}\n cast('{{ dummy_values['timestamp'] }}' as {{ elementary.type_timestamp() }}) as {{ column_name }}\n {%- elif data_type == 'int' %}\n cast({{ dummy_values['int'] }} as {{ elementary.type_int() }}) as {{ column_name }}\n {%- elif data_type == 'bigint' %}\n cast({{ dummy_values['bigint'] }} as {{ elementary.type_bigint() }}) as {{ column_name }}\n {%- elif data_type == 'float' %}\n cast({{ dummy_values['float'] }} as {{ elementary.type_float() }}) as {{ column_name }}\n {%- elif data_type == 'long_string' %}\n cast('{{ dummy_values['long_string'] }}' as {{ elementary.type_long_string() }}) as {{ column_name }}\n {%- else %}\n cast('{{ dummy_values['string'] }}' as {{ elementary.type_string() }}) as {{ column_name }}\n {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.dummy_values", "macro.elementary.type_bool", "macro.elementary.type_timestamp", "macro.elementary.type_int", "macro.elementary.type_bigint", "macro.elementary.type_float", "macro.elementary.type_long_string", "macro.elementary.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0444891, "supported_languages": null }, "macro.elementary.dummy_values": { "name": "dummy_values", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.dummy_values", "macro_sql": "{% macro dummy_values() %}\n\n {%- set dummy_values = {\n 'string': \"dummy_string\",\n 'long_string': \"this_is_just_a_long_dummy_string\",\n 'boolean': 'True',\n 'int': 123456789,\n 'bigint': 31474836478,\n 'float': 123456789.99,\n 'timestamp': \"2091-02-17\"\n } %}\n\n {{ return(dummy_values) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.04534, "supported_languages": null }, "macro.elementary.not_edr_run": { "name": "not_edr_run", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/not_edr_run.sql", "original_file_path": "macros/edr/system/system_utils/not_edr_run.sql", "unique_id": "macro.elementary.not_edr_run", "macro_sql": "{% macro not_edr_run() %}\n {%- if elementary.get_config_var('edr_run') %}\n {{ return(false) }}\n {%- else %}\n {{ return(true) }}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.046045, "supported_languages": null }, "macro.elementary.run_start_column": { "name": "run_start_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "unique_id": "macro.elementary.run_start_column", "macro_sql": "{% macro run_start_column() %}\n cast ('{{ elementary.get_run_started_at().strftime(\"%Y-%m-%d %H:%M:%S\") }}' as {{ elementary.type_timestamp() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_run_started_at", "macro.elementary.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0466967, "supported_languages": null }, "macro.elementary.current_timestamp_column": { "name": "current_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "unique_id": "macro.elementary.current_timestamp_column", "macro_sql": "{% macro current_timestamp_column() %}\n cast ({{elementary.current_timestamp_in_utc()}} as {{ elementary.type_timestamp() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.current_timestamp_in_utc", "macro.elementary.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0470216, "supported_languages": null }, "macro.elementary.datetime_now_utc_as_timestamp_column": { "name": "datetime_now_utc_as_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "unique_id": "macro.elementary.datetime_now_utc_as_timestamp_column", "macro_sql": "{% macro datetime_now_utc_as_timestamp_column() %}\n cast ('{{ elementary.datetime_now_utc_as_string() }}' as {{ elementary.type_timestamp() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.datetime_now_utc_as_string", "macro.elementary.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0473464, "supported_languages": null }, "macro.elementary.no_results_query": { "name": "no_results_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/no_results_query.sql", "original_file_path": "macros/edr/system/system_utils/no_results_query.sql", "unique_id": "macro.elementary.no_results_query", "macro_sql": "{% macro no_results_query() %}\n with nothing as (select 1 as num)\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from nothing where num = 2\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0475922, "supported_languages": null }, "macro.elementary.get_config_var": { "name": "get_config_var", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.get_config_var", "macro_sql": "{% macro get_config_var(var_name) %}\n {% set default_config = elementary.get_default_config() %}\n {% set var_value = var(var_name, default_config.get(var_name)) %}\n {% if var_value is string %}\n {% if var_value.lower() == \"true\" %}\n {% do return(true) %}\n {% elif var_value.lower() == \"false\" %}\n {% do return(false) %}\n {% endif %}\n {% endif %}\n {% do return(var_value) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_default_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0497441, "supported_languages": null }, "macro.elementary.get_default_config": { "name": "get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.get_default_config", "macro_sql": "{% macro get_default_config(var_name) %}\n {{ return(adapter.dispatch('get_default_config', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.default__get_default_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0501661, "supported_languages": null }, "macro.elementary.default__get_default_config": { "name": "default__get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.default__get_default_config", "macro_sql": "{%- macro default__get_default_config() -%}\n{# We use this macro to define and call vars, as the global vars defined in dbt_project.yml\n of the package are not accesible at on-run-start and on-run-end #}\n {% set default_config = {\n 'days_back': 14,\n 'anomaly_sensitivity': 3,\n 'backfill_days': 2,\n 'tests_schema_name': '',\n 'debug_logs': false,\n 'disable_warn_alerts': false,\n 'disable_model_alerts': false,\n 'disable_test_alerts': false,\n 'disable_source_freshness_alerts': false,\n 'disable_run_results': false,\n 'disable_tests_results': false,\n 'disable_dbt_artifacts_autoupload': false,\n 'disable_dbt_invocation_autoupload': false,\n 'disable_skipped_model_alerts': true,\n 'disable_skipped_test_alerts': true,\n 'dbt_artifacts_chunk_size': 5000,\n 'test_sample_row_count': 5,\n 'edr_cli_run': false,\n 'max_int': 2147483647,\n 'custom_run_started_at': none,\n 'edr_monitors': {\n 'table': ['row_count', 'freshness'],\n 'column_any_type': ['null_count', 'null_percent'],\n 'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n 'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance']\n },\n 'long_string_size': 65535,\n 'collect_model_sql': true,\n 'model_sql_max_size': 10240,\n 'query_max_size': 1000000,\n 'insert_rows_method': 'max_query_size',\n 'project_name': none,\n 'elementary_full_refresh': false,\n 'min_training_set_size': 14\n } %}\n {{- return(default_config) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0526001, "supported_languages": null }, "macro.elementary.bigquery__get_default_config": { "name": "bigquery__get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.bigquery__get_default_config", "macro_sql": "{%- macro bigquery__get_default_config() -%}\n {% set default_config = elementary.default__get_default_config() %}\n {% do default_config.update({'query_max_size': 100000}) %}\n {{- return(default_config) -}}\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.elementary.default__get_default_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0531588, "supported_languages": null }, "macro.elementary.is_on_run_end": { "name": "is_on_run_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/is_hook.sql", "original_file_path": "macros/edr/system/system_utils/is_hook.sql", "unique_id": "macro.elementary.is_on_run_end", "macro_sql": "{% macro is_on_run_end() %}\n {% do return('on-run-end' in model.tags) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0536041, "supported_languages": null }, "macro.elementary.get_first_env_var": { "name": "get_first_env_var", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_first_not_none_var.sql", "original_file_path": "macros/edr/system/system_utils/get_first_not_none_var.sql", "unique_id": "macro.elementary.get_first_env_var", "macro_sql": "{% macro get_first_env_var(var_names) %}\n {% for var_name in var_names %}\n {% set value = env_var(var_name, \"\") %}\n {% if value %}\n {{ return(value) }}\n {% endif %}\n {% endfor %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0545728, "supported_languages": null }, "macro.elementary.get_runtime_config": { "name": "get_runtime_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_runtime_config.sql", "original_file_path": "macros/edr/system/system_utils/get_runtime_config.sql", "unique_id": "macro.elementary.get_runtime_config", "macro_sql": "{% macro get_runtime_config() %}\n {{ return(builtins.ref.config) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0549502, "supported_languages": null }, "macro.elementary.get_time_format": { "name": "get_time_format", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.get_time_format", "macro_sql": "{% macro get_time_format() %}\n {% do return(\"%Y-%m-%d %H:%M:%S\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.055427, "supported_languages": null }, "macro.elementary.run_started_at_as_string": { "name": "run_started_at_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.run_started_at_as_string", "macro_sql": "{% macro run_started_at_as_string() %}\n {% do return(elementary.get_run_started_at().strftime(elementary.get_time_format())) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_run_started_at", "macro.elementary.get_time_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0558236, "supported_languages": null }, "macro.elementary.datetime_now_utc_as_string": { "name": "datetime_now_utc_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.datetime_now_utc_as_string", "macro_sql": "{% macro datetime_now_utc_as_string() %}\n {% do return(modules.datetime.datetime.utcnow().strftime(elementary.get_time_format())) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_time_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0562456, "supported_languages": null }, "macro.elementary.get_run_started_at": { "name": "get_run_started_at", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_run_started_at.sql", "original_file_path": "macros/edr/system/system_utils/get_run_started_at.sql", "unique_id": "macro.elementary.get_run_started_at", "macro_sql": "{% macro get_run_started_at() %}\n {% set custom_run_started_at = elementary.get_config_var('custom_run_started_at') %}\n {% if custom_run_started_at %}\n {# dbt run_started_at is fromtype datetime, so we convert the given custom time to be datetime as well. #}\n {{ return(modules.datetime.datetime.fromisoformat(custom_run_started_at)) }}\n {% else %}\n {{ return(run_started_at) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0571773, "supported_languages": null }, "macro.elementary.upload_dbt_tests": { "name": "upload_dbt_tests", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.upload_dbt_tests", "macro_sql": "{%- macro upload_dbt_tests(should_commit=false) -%}\n {% set relation = elementary.get_elementary_relation('dbt_tests') %}\n {% if execute and relation %}\n {% set tests = graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n {% do elementary.upload_artifacts_to_table(relation, tests, elementary.flatten_test, should_commit=should_commit) %}\n {%- endif -%}\n {{- return('') -}}\n{%- endmacro -%}\n\n\n\n\n", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0766118, "supported_languages": null }, "macro.elementary.get_dbt_tests_empty_table_query": { "name": "get_dbt_tests_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_dbt_tests_empty_table_query", "macro_sql": "{% macro get_dbt_tests_empty_table_query() %}\n {% set dbt_tests_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n ('database_name', 'string'),\n ('schema_name', 'string'),\n ('name', 'string'),\n ('short_name', 'string'),\n ('alias', 'string'),\n ('test_column_name', 'string'),\n ('severity', 'string'),\n ('warn_if', 'string'),\n ('error_if', 'string'),\n ('test_params', 'long_string'),\n ('test_namespace', 'string'),\n ('tags', 'long_string'),\n ('model_tags', 'long_string'),\n ('model_owners', 'long_string'),\n ('meta', 'long_string'),\n ('depends_on_macros', 'long_string'),\n ('depends_on_nodes', 'long_string'),\n ('parent_model_unique_id', 'string'),\n ('description', 'long_string'),\n ('package_name', 'string'),\n ('type', 'string'),\n ('original_path', 'long_string'),\n ('path', 'string'),\n ('generated_at', 'string')]) %}\n {{ return(dbt_tests_empty_table_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0790815, "supported_languages": null }, "macro.elementary.flatten_test": { "name": "flatten_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.flatten_test", "macro_sql": "{% macro flatten_test(node_dict) %}\n {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n {% set test_metadata = elementary.safe_get_with_default(node_dict, 'test_metadata', {}) %}\n {% set test_namespace = test_metadata.get('namespace') %}\n {% set test_short_name = test_metadata.get('name') %}\n {% set default_description = elementary.get_default_description(test_short_name, test_namespace) %}\n\n {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n {% set meta_dict = {} %}\n {% if default_description %}\n {% set meta_dict = {'description': default_description} %} \n {% endif %}\n {% do meta_dict.update(elementary.safe_get_with_default(node_dict, 'meta', {})) %}\n {% do meta_dict.update(config_meta_dict) %}\n\n {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n {% set tags = elementary.union_lists(config_tags, global_tags) %}\n {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n {% set test_model_unique_ids = elementary.get_parent_model_unique_ids_from_test_node(node_dict) %}\n {% set test_model_nodes = elementary.get_nodes_by_unique_ids(test_model_unique_ids) %}\n {% set test_models_owners = [] %}\n {% set test_models_tags = [] %}\n {% for test_model_node in test_model_nodes %}\n {% set flatten_test_model_node = elementary.flatten_model(test_model_node) %}\n {% set test_model_owner = flatten_test_model_node.get('owner') %}\n {% if test_model_owner %}\n {% if test_model_owner is string %}\n {% set owners = test_model_owner.split(',') %}\n {% for owner in owners %}\n {% do test_models_owners.append(owner | trim) %} \n {% endfor %}\n {% elif test_model_owner is iterable %}\n {% do test_models_owners.extend(test_model_owner) %}\n {% endif %}\n {% endif %}\n {% set test_model_tags = flatten_test_model_node.get('tags') %}\n {% if test_model_tags and test_model_tags is sequence %}\n {% do test_models_tags.extend(test_model_tags) %}\n {% endif %}\n {% endfor %}\n {% set test_models_owners = test_models_owners | unique | list %}\n {% set test_models_tags = test_models_tags | unique | list %}\n\n {% set test_kwargs = elementary.safe_get_with_default(test_metadata, 'kwargs', {}) %}\n\n {% set primary_test_model_id = namespace(data=none) %}\n {% if test_model_unique_ids | length == 1 %}\n {# if only one parent model for this test, simply use this model #}\n {% set primary_test_model_id.data = test_model_unique_ids[0] %}\n {% else %}\n {% set test_model_jinja = test_kwargs.get('model') %}\n {% if test_model_jinja %}\n {% set test_model_name_matches = modules.re.findall(\"ref\\(['\\\"](\\w+)['\\\"]\\)\", test_model_jinja) %}\n {% if test_model_name_matches | length == 1 %}\n {% set test_model_name = test_model_name_matches[0] %}\n {% for test_model_unique_id in test_model_unique_ids %}\n {% set split_test_model_unique_id = test_model_unique_id.split('.') %}\n {% if split_test_model_unique_id and split_test_model_unique_id | length > 0 %}\n {% set test_node_model_name = split_test_model_unique_id[-1] %}\n {% if test_node_model_name == test_model_name %}\n {% set primary_test_model_id.data = test_model_unique_id %}\n {% endif %}\n {% endif %}\n {% endfor %}\n {% endif %}\n {% endif %}\n {% endif %}\n\n {% set primary_test_model_database = none %}\n {% set primary_test_model_schema = none %}\n {%- if primary_test_model_id.data is not none -%}\n {% set tested_model_node = elementary.get_node(primary_test_model_id.data) %}\n {%- if tested_model_node -%}\n {% set primary_test_model_database = tested_model_node.get('database') %}\n {% set primary_test_model_schema = tested_model_node.get('schema') %}\n {%- endif -%}\n {%- endif -%}\n\n {%- if primary_test_model_database is none or primary_test_model_schema is none -%}\n {# This is mainly here to support singular test cases with multiple referred models, in this case the tested node is being used to extract the db and schema #}\n {% set primary_test_model_database, primary_test_model_schema = elementary.get_model_database_and_schema_from_test_node(node_dict) %}\n {%- endif -%}\n\n {% set original_file_path = node_dict.get('original_file_path') %}\n {% set flatten_test_metadata_dict = {\n 'unique_id': node_dict.get('unique_id'),\n 'short_name': test_short_name,\n 'alias': node_dict.get('alias'),\n 'test_column_name': node_dict.get('column_name'),\n 'severity': config_dict.get('severity'),\n 'warn_if': config_dict.get('warn_if'),\n 'error_if': config_dict.get('error_if'),\n 'test_params': test_kwargs,\n 'test_namespace': test_namespace,\n 'tags': tags,\n 'model_tags': test_models_tags,\n 'model_owners': test_models_owners,\n 'meta': meta_dict,\n 'database_name': primary_test_model_database,\n 'schema_name': primary_test_model_schema,\n 'depends_on_macros': depends_on_dict.get('macros', []),\n 'depends_on_nodes': depends_on_dict.get('nodes', []),\n 'parent_model_unique_id': primary_test_model_id.data,\n 'description': meta_dict.get('description'),\n 'name': node_dict.get('name'),\n 'package_name': node_dict.get('package_name'),\n 'type': elementary.get_test_type(original_file_path, test_namespace),\n 'original_path': original_file_path,\n 'compiled_code': elementary.get_compiled_code(node_dict),\n 'path': node_dict.get('path'),\n 'generated_at': elementary.datetime_now_utc_as_string()\n }%}\n {{ return(flatten_test_metadata_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default", "macro.elementary.get_default_description", "macro.elementary.union_lists", "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro.elementary.get_nodes_by_unique_ids", "macro.elementary.flatten_model", "macro.elementary.get_node", "macro.elementary.get_model_database_and_schema_from_test_node", "macro.elementary.get_test_type", "macro.elementary.get_compiled_code", "macro.elementary.datetime_now_utc_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0908947, "supported_languages": null }, "macro.elementary.get_test_type": { "name": "get_test_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_test_type", "macro_sql": "{% macro get_test_type(test_path, test_namespace = none) %}\n {% set test_type = 'generic' %}\n {%- if test_namespace == 'dbt_expectations' -%}\n {% set test_type = 'expectation' %}\n {%- elif 'tests/generic' in test_path or 'macros/' in test_path -%}\n {% set test_type = 'generic' %}\n {%- elif 'tests/' in test_path -%}\n {% set test_type = 'singular' %}\n {%- endif -%}\n {{- return(test_type) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.091973, "supported_languages": null }, "macro.elementary.get_default_description": { "name": "get_default_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_default_description", "macro_sql": "{% macro get_default_description(short_name, test_namespace = none) %}\n {# Relevant for dbt_expectations 0.8.0 #}\n {% set dbt_expectations_descriptions_map = {\n \"expect_column_to_exist\": \"Expect the specified column to exist.\",\n \"expect_row_values_to_have_recent_data\": \"Expect the model to have rows that are at least as recent as the defined interval prior to the current timestamp. Optionally gives the possibility to apply filters on the results.\",\n \"expect_grouped_row_values_to_have_recent_data\": \"Expect the model to have grouped rows that are at least as recent as the defined interval prior to the current timestamp. Use this to test whether there is recent data for each grouped row defined by `group_by` (which is a list of columns) and a `timestamp_column`. Optionally gives the possibility to apply filters on the results.\",\n \"expect_table_column_count_to_be_between\": \"Expect the number of columns in a model to be between two values.\",\n \"expect_table_column_count_to_equal_other_table\": \"Expect the number of columns in a model to match another model.\",\n \"expect_table_columns_to_not_contain_set\": \"Expect the columns in a model not to contain a given list.\",\n \"expect_table_columns_to_contain_set\": \"Expect the columns in a model to contain a given list.\",\n \"expect_table_column_count_to_equal\": \"Expect the number of columns in a model to be equal to `expected_number_of_columns`.\",\n \"expect_table_columns_to_match_ordered_list\": \"Expect the columns to exactly match a specified list.\",\n \"expect_table_columns_to_match_set\": \"Expect the columns in a model to match a given list.\",\n \"expect_table_row_count_to_be_between\": \"Expect the number of rows in a model to be between two values.\",\n \"expect_table_row_count_to_equal_other_table\": \"Expect the number of rows in a model match another model.\",\n \"expect_table_row_count_to_equal_other_table_times_factor\": \"Expect the number of rows in a model to match another model times a preconfigured factor.\",\n \"expect_table_row_count_to_equal\": \"Expect the number of rows in a model to be equal to expected_number_of_rows.\",\n \"expect_column_values_to_be_unique\": \"Expect each column value to be unique.\",\n \"expect_column_values_to_not_be_null\": \"Expect column values to not be null.\",\n \"expect_column_values_to_be_null\": \"Expect column values to be null.\",\n \"expect_column_values_to_be_of_type\": \"Expect a column to be of a specified data type.\",\n \"expect_column_values_to_be_in_type_list\": \"Expect a column to be one of a specified type list.\",\n \"expect_column_values_to_have_consistent_casing\": \"Expect a column to have consistent casing. By setting `display_inconsistent_columns` to true, the number of inconsistent values in the column will be displayed in the terminal whereas the inconsistent values themselves will be returned if the SQL compiled test is run.\",\n \"expect_column_values_to_be_in_set\": \"Expect each column value to be in a given set.\",\n \"expect_column_values_to_be_between\": \"Expect each column value to be between two values.\",\n \"expect_column_values_to_not_be_in_set\": \"Expect each column value not to be in a given set.\",\n \"expect_column_values_to_be_increasing\": \"Expect column values to be increasing. If `strictly: True`, then this expectation is only satisfied if each consecutive value is strictly increasing – equal values are treated as failures.\",\n \"expect_column_values_to_be_decreasing\": \"Expect column values to be decreasing. If `strictly=True`, then this expectation is only satisfied if each consecutive value is strictly decreasing – equal values are treated as failures.\",\n \"expect_column_value_lengths_to_be_between\": \"Expect column entries to be strings with length between a min_value value and a max_value value (inclusive).\",\n \"expect_column_value_lengths_to_equal\": \"Expect column entries to be strings with length equal to the provided value.\",\n \"expect_column_values_to_match_regex\": 'Expect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\". Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.',\n \"expect_column_values_to_not_match_regex\": 'Expect column entries to be strings that do NOT match a given regular expression. The regex must not match any portion of the provided string. For example, \"[at]+\" would identify the following strings as expected: \"fish”, \"dog”, and the following as unexpected: \"cat”, \"hat”. Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.',\n \"expect_column_values_to_match_regex_list\": 'Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions. Matches can be anywhere in the string. Optionally, `is_raw` indicates the `regex` patterns are \"raw\" strings and should be escaped. The default is `False`.',\n \"expect_column_values_to_not_match_regex_list\": 'Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string. Optionally, `is_raw` indicates the `regex` patterns are \"raw\" strings and should be escaped. The default is `False`.',\n \"expect_column_values_to_match_like_pattern\": \"Expect column entries to be strings that match a given SQL like pattern.\",\n \"expect_column_values_to_not_match_like_pattern\": \"Expect column entries to be strings that do not match a given SQL like pattern.\",\n \"expect_column_values_to_match_like_pattern_list\": \"Expect the column entries to be strings that match any of a list of SQL like patterns.\",\n \"expect_column_values_to_not_match_like_pattern_list\": \"Expect the column entries to be strings that do not match any of a list of SQL like patterns.\",\n \"expect_column_distinct_count_to_equal\": \"Expect the number of distinct column values to be equal to a given value.\",\n \"expect_column_distinct_count_to_be_greater_than\": \"Expect the number of distinct column values to be greater than a given value.\",\n \"expect_column_distinct_count_to_be_less_than\": \"Expect the number of distinct column values to be less than a given value.\",\n \"expect_column_distinct_values_to_be_in_set\": \"Expect the set of distinct column values to be contained by a given set.\",\n \"expect_column_distinct_values_to_contain_set\": \"Expect the set of distinct column values to contain a given set. In contrast to `expect_column_values_to_be_in_set` this ensures not that all column values are members of the given set but that values from the set must be present in the column.\",\n \"expect_column_distinct_values_to_equal_set\": \"Expect the set of distinct column values to equal a given set. In contrast to `expect_column_distinct_values_to_contain_set` this ensures not only that a certain set of values are present in the column but that these and only these values are present.\",\n \"expect_column_distinct_count_to_equal_other_table\": \"Expect the number of distinct column values to be equal to number of distinct values in another model.\",\n \"expect_column_mean_to_be_between\": \"Expect the column mean to be between a min_value value and a max_value value (inclusive).\",\n \"expect_column_median_to_be_between\": \"Expect the column median to be between a min_value value and a max_value value (inclusive).\",\n \"expect_column_quantile_values_to_be_between\": \"Expect specific provided column quantiles to be between provided min_value and max_value values.\",\n \"expect_column_stdev_to_be_between\": \"Expect the column standard deviation to be between a min_value value and a max_value value. Uses sample standard deviation (normalized by N-1).\",\n \"expect_column_unique_value_count_to_be_between\": \"Expect the number of unique values to be between a min_value value and a max_value value.\",\n \"expect_column_proportion_of_unique_values_to_be_between\": \"Expect the proportion of unique values to be between a min_value value and a max_value value. For example, in a column containing [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], there are 4 unique values and 10 total values for a proportion of 0.4.\",\n \"expect_column_most_common_value_to_be_in_set\": \"Expect the most common value to be within the designated value set.\",\n \"expect_column_max_to_be_between\": \"Expect the column max to be between a min and max value.\",\n \"expect_column_min_to_be_between\": \"Expect the column min to be between a min and max value.\",\n \"expect_column_sum_to_be_between\": \"Expect the column to sum to be between a min and max value.\",\n \"expect_column_pair_values_A_to_be_greater_than_B\": \"Expect values in column A to be greater than column B.\",\n \"expect_column_pair_values_to_be_equal\": \"Expect the values in column A to be the same as column B.\",\n \"expect_column_pair_values_to_be_in_set\": \"Expect paired values from columns A and B to belong to a set of valid pairs. Note: value pairs are expressed as lists within lists\",\n \"expect_select_column_values_to_be_unique_within_record\": \"Expect the values for each record to be unique across the columns listed. Note that records can be duplicated.\",\n \"expect_multicolumn_sum_to_equal\": \"Expects that sum of all rows for a set of columns is equal to a specific value\",\n \"expect_compound_columns_to_be_unique\": \"Expect that the columns are unique together, e.g. a multi-column primary key.\",\n \"expect_column_values_to_be_within_n_moving_stdevs\": \"A simple anomaly test based on the assumption that differences between periods in a given time series follow a log-normal distribution. Thus, we would expect the logged differences (vs N periods ago) in metric values to be within Z sigma away from a moving average. By applying a list of columns in the `group_by` parameter, you can also test for deviations within a group.\",\n \"expect_column_values_to_be_within_n_stdevs\": \"Expects (optionally grouped & summed) metric values to be within Z sigma away from the column average\",\n \"expect_row_values_to_have_data_for_every_n_datepart\": \"Expects model to have values for every grouped `date_part`.\"\n } %}\n\n {% set dbt_tests_descriptions_map = {\n \"not_null\": \"This test validates that there are no `null` values present in a column.\",\n \"unique\": \"This test validates that there are no duplicate values present in a field.\",\n \"accepted_values\": \"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\",\n \"relationships\": 'This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".'\n } %}\n\n {% set default_description = none %}\n {% if test_namespace == 'dbt_expectations' %}\n {% set default_description = dbt_expectations_descriptions_map.get(short_name) %}\n {% elif test_namespace == 'dbt' or test_namespace is none %}\n {% set default_description = dbt_tests_descriptions_map.get(short_name) %}\n {% endif %}\n\n {{ return(default_description) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.096894, "supported_languages": null }, "macro.elementary.upload_source_freshness": { "name": "upload_source_freshness", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "unique_id": "macro.elementary.upload_source_freshness", "macro_sql": "{% macro upload_source_freshness() %}\n {% if not flags.Path %}\n {% do exceptions.raise_compiler_error(\"Unable to upload source freshness using this operation on dbt 1.3.2 onwards.\") %}\n {% endif %}\n\n {% set source_freshness_results_relation = ref('dbt_source_freshness_results') %}\n {% set sources_json_path = flags.Path(elementary.get_runtime_config().target_path).joinpath('sources.json') %}\n {% if not sources_json_path.exists() %}\n {% do exceptions.raise_compiler_error('Source freshness artifact (sources.json) does not exist, please run `dbt source freshness`.') %}\n {% endif %}\n {% set source_freshess_results_dicts = fromjson(sources_json_path.read_text())['results'] %}\n {% do elementary.upload_artifacts_to_table(source_freshness_results_relation, source_freshess_results_dicts, elementary.flatten_source_freshness, append=True, should_commit=True) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_runtime_config", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.0999815, "supported_languages": null }, "macro.elementary.flatten_source_freshness": { "name": "flatten_source_freshness", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "unique_id": "macro.elementary.flatten_source_freshness", "macro_sql": "{% macro flatten_source_freshness(node_dict) %}\n {% set compile_timing = {} %}\n {% set execute_timing = {} %}\n {% for timing in node_dict['timing'] %}\n {% if timing['name'] == 'compile' %}\n {% do compile_timing.update(timing) %}\n {% elif timing['name'] == 'execute' %}\n {% do execute_timing.update(timing) %}\n {% endif %}\n {% endfor %}\n {% set flatten_source_freshness_dict = {\n 'source_freshness_execution_id': [invocation_id, node_dict.get('unique_id')] | join('.'),\n 'unique_id': node_dict.get('unique_id'),\n 'max_loaded_at': node_dict.get('max_loaded_at'),\n 'snapshotted_at': node_dict.get('snapshotted_at'),\n 'max_loaded_at_time_ago_in_s': node_dict.get('max_loaded_at_time_ago_in_s'),\n 'status': node_dict.get('status'),\n 'error': node_dict.get('error'),\n 'generated_at': elementary.datetime_now_utc_as_string(),\n 'invocation_id': invocation_id,\n 'compile_started_at': compile_timing.get('started_at'),\n 'compile_completed_at': compile_timing.get('completed_at'),\n 'execute_started_at': execute_timing.get('started_at'),\n 'execute_completed_at': execute_timing.get('completed_at'),\n } %}\n {{ return(flatten_source_freshness_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.datetime_now_utc_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1026745, "supported_languages": null }, "macro.elementary.upload_dbt_metrics": { "name": "upload_dbt_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.upload_dbt_metrics", "macro_sql": "{%- macro upload_dbt_metrics(should_commit=false) -%}\n {% set relation = elementary.get_elementary_relation('dbt_metrics') %}\n {% if execute and relation %}\n {% set metrics = graph.metrics.values() | selectattr('resource_type', '==', 'metric') %}\n {% do elementary.upload_artifacts_to_table(relation, metrics, elementary.flatten_metric, should_commit=should_commit) %}\n {%- endif -%}\n {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1078665, "supported_languages": null }, "macro.elementary.get_dbt_metrics_empty_table_query": { "name": "get_dbt_metrics_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.get_dbt_metrics_empty_table_query", "macro_sql": "{% macro get_dbt_metrics_empty_table_query() %}\n {% set dbt_metrics_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n ('name', 'string'),\n ('label', 'string'),\n ('model', 'string'),\n ('type', 'string'),\n ('sql', 'long_string'),\n ('timestamp', 'string'),\n ('filters', 'long_string'),\n ('time_grains', 'long_string'),\n ('dimensions', 'long_string'),\n ('depends_on_macros', 'long_string'),\n ('depends_on_nodes', 'long_string'),\n ('description', 'long_string'),\n ('tags', 'long_string'),\n ('meta', 'long_string'),\n ('package_name', 'string'),\n ('original_path', 'long_string'),\n ('path', 'string'),\n ('generated_at', 'string')]) %}\n {{ return(dbt_metrics_empty_table_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1096728, "supported_languages": null }, "macro.elementary.flatten_metric": { "name": "flatten_metric", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.flatten_metric", "macro_sql": "{% macro flatten_metric(node_dict) %}\n {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n {% set flatten_metrics_metadata_dict = {\n 'unique_id': node_dict.get('unique_id'),\n 'name': node_dict.get('name'),\n 'label': node_dict.get('label'),\n 'model': node_dict.get('model'),\n 'type': node_dict.get('type'),\n 'sql': node_dict.get('sql'),\n 'timestamp': node_dict.get('timestamp'),\n 'filters': node_dict.get('filters', {}),\n 'time_grains': node_dict.get('time_grains', []),\n 'dimensions': node_dict.get('dimensions', []),\n 'depends_on_macros': depends_on_dict.get('macros', []),\n 'depends_on_nodes': depends_on_dict.get('nodes', []),\n 'description': node_dict.get('description'),\n 'tags': tags,\n 'meta': meta_dict,\n 'package_name': node_dict.get('package_name'),\n 'original_path': node_dict.get('original_file_path'),\n 'path': node_dict.get('path'),\n 'generated_at': elementary.datetime_now_utc_as_string()\n }%}\n {{ return(flatten_metrics_metadata_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default", "macro.elementary.datetime_now_utc_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.112617, "supported_languages": null }, "macro.elementary.upload_dbt_invocation": { "name": "upload_dbt_invocation", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.upload_dbt_invocation", "macro_sql": "{% macro upload_dbt_invocation() %}\n {% set relation = elementary.get_elementary_relation('dbt_invocations') %}\n {% if not execute or not relation %}\n {{ return('') }}\n {% endif %}\n\n {% do elementary.debug_log(\"Uploading dbt invocation.\") %}\n {% set now_str = elementary.datetime_now_utc_as_string() %}\n {% set dbt_invocation = {\n 'invocation_id': invocation_id,\n 'run_started_at': elementary.run_started_at_as_string(),\n 'run_completed_at': now_str,\n 'generated_at': now_str,\n 'command': flags.WHICH,\n 'dbt_version': dbt_version,\n 'elementary_version': elementary.get_elementary_package_version(),\n 'full_refresh': flags.FULL_REFRESH,\n 'invocation_vars': elementary.get_invocation_vars(),\n 'vars': elementary.get_all_vars(),\n 'target_name': target.name,\n 'target_database': elementary.target_database(),\n 'target_schema': target.schema,\n 'target_profile_name': target.profile_name,\n 'threads': target.threads,\n 'selected': elementary.get_invocation_select_filter(),\n 'yaml_selector': elementary.get_invocation_yaml_selector(),\n 'project_name': elementary.get_project_name(),\n 'job_id': elementary.get_first_env_var([\"DBT_JOB_ID\", \"DBT_CLOUD_JOB_ID\"]),\n 'job_run_id': elementary.get_first_env_var([\"DBT_JOB_RUN_ID\", \"DBT_CLOUD_RUN_ID\", \"GITHUB_RUN_ID\"]),\n 'job_name': elementary.get_first_env_var([\"DBT_JOB_NAME\"]),\n 'env': elementary.get_first_env_var([\"DBT_ENV\"]),\n 'env_id': elementary.get_first_env_var([\"DBT_ENV_ID\"]),\n 'project_id': elementary.get_first_env_var([\"DBT_PROJECT_ID\", \"DBT_CLOUD_PROJECT_ID\", \"GITHUB_REPOSITORY\"]),\n 'cause_category': elementary.get_first_env_var([\"DBT_CAUSE_CATEGORY\", \"DBT_CLOUD_RUN_REASON_CATEGORY\", \"GITHUB_EVENT_NAME\"]),\n 'cause': elementary.get_first_env_var([\"DBT_CAUSE\", \"DBT_CLOUD_RUN_REASON\"]),\n 'pull_request_id': elementary.get_first_env_var([\"DBT_PULL_REQUEST_ID\", \"DBT_CLOUD_PR_ID\", \"GITHUB_HEAD_REF\"]),\n 'git_sha': elementary.get_first_env_var([\"DBT_GIT_SHA\", \"DBT_CLOUD_GIT_SHA\", \"GITHUB_SHA\"]),\n 'orchestrator': elementary.get_orchestrator(),\n } %}\n {% do elementary.insert_rows(relation, [dbt_invocation], should_commit=true) %}\n {% do elementary.debug_log(\"Uploaded dbt invocation successfully.\") %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.debug_log", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.run_started_at_as_string", "macro.elementary.get_elementary_package_version", "macro.elementary.get_invocation_vars", "macro.elementary.get_all_vars", "macro.elementary.target_database", "macro.elementary.get_invocation_select_filter", "macro.elementary.get_invocation_yaml_selector", "macro.elementary.get_project_name", "macro.elementary.get_first_env_var", "macro.elementary.get_orchestrator", "macro.elementary.insert_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1251886, "supported_languages": null }, "macro.elementary.get_project_name": { "name": "get_project_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_project_name", "macro_sql": "{% macro get_project_name() %}\n {% set project_name = elementary.get_config_var(\"project_name\") %}\n {% if project_name %}\n {{ return(project_name) }}\n {% endif %}\n\n {% set config = elementary.get_runtime_config() %}\n {% do return(config.project_name) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.get_runtime_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.126225, "supported_languages": null }, "macro.elementary.get_invocation_select_filter": { "name": "get_invocation_select_filter", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_select_filter", "macro_sql": "\n\n{%- macro get_invocation_select_filter() -%}\n {% set config = elementary.get_runtime_config() %}\n {%- if invocation_args_dict and invocation_args_dict.select -%}\n {{- return(invocation_args_dict.select) -}}\n {%- elif config.args and config.args.select -%}\n {{- return(config.args.select) -}}\n {%- else -%}\n {{- return([]) -}}\n {%- endif -%})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.get_runtime_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1271849, "supported_languages": null }, "macro.elementary.get_invocation_yaml_selector": { "name": "get_invocation_yaml_selector", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_yaml_selector", "macro_sql": "{%- macro get_invocation_yaml_selector() -%}\n {% set config = elementary.get_runtime_config() %}\n {%- if invocation_args_dict and invocation_args_dict.selector_name -%}\n {{- return(invocation_args_dict.selector_name) -}}\n {%- elif config.args and config.args.selector_name -%}\n {{- return(config.args.selector_name) -}}\n {%- else -%}\n {{- return([]) -}}\n {%- endif -%})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.get_runtime_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1280856, "supported_languages": null }, "macro.elementary.get_invocation_vars": { "name": "get_invocation_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_vars", "macro_sql": "{% macro get_invocation_vars() %}\n {% set config = elementary.get_runtime_config() %}\n {% set invocation_vars = {} %}\n {% if invocation_args_dict and invocation_args_dict.vars %}\n {% set invocation_vars = fromyaml(invocation_args_dict.vars) %}\n {% elif config.cli_vars %}\n {% set invocation_vars = config.cli_vars %}\n {% endif %}\n {{ return(elementary.to_primitive(invocation_vars)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_runtime_config", "macro.elementary.to_primitive" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1290872, "supported_languages": null }, "macro.elementary.get_all_vars": { "name": "get_all_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_all_vars", "macro_sql": "\n\n{%- macro get_all_vars() -%}\n {% set all_vars = {} %}\n {% set config = elementary.get_runtime_config() %}\n {%- if config.vars -%}\n {% do all_vars.update(config.vars.to_dict()) %}\n {%- endif -%}\n {% do all_vars.update(elementary.get_invocation_vars()) %}\n {{- return(all_vars) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.get_runtime_config", "macro.elementary.get_invocation_vars" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.129975, "supported_languages": null }, "macro.elementary.get_orchestrator": { "name": "get_orchestrator", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_orchestrator", "macro_sql": "{% macro get_orchestrator() %}\n {% set orchestrator_env_map = {\n \"airflow\": [\"AIRFLOW_HOME\"],\n \"dbt_cloud\": [\"DBT_CLOUD_PROJECT_ID\"],\n \"github_actions\": [\"GITHUB_ACTIONS\"],\n } %}\n {% for orchestrator, env_vars in orchestrator_env_map.items() %}\n {% if elementary.get_first_env_var(env_vars) %}\n {% do return(orchestrator) %}\n {% endif %}\n {% endfor %}\n {% do return(none) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_first_env_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.131061, "supported_languages": null }, "macro.elementary.get_dbt_invocations_empty_table_query": { "name": "get_dbt_invocations_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_dbt_invocations_empty_table_query", "macro_sql": "{% macro get_dbt_invocations_empty_table_query() %}\n {{ return(elementary.empty_table([\n ('invocation_id', 'long_string'),\n ('job_id', 'long_string'),\n ('job_name', 'long_string'),\n ('job_run_id', 'long_string'),\n ('run_started_at', 'string'),\n ('run_completed_at', 'string'),\n ('generated_at', 'string'),\n ('command', 'string'),\n ('dbt_version', 'string'),\n ('elementary_version', 'string'),\n\t ('full_refresh', 'boolean'),\n ('invocation_vars', 'long_string'),\n ('vars', 'long_string'),\n ('target_name', 'string'),\n ('target_database', 'string'),\n ('target_schema', 'string'),\n ('target_profile_name', 'string'),\n ('threads', 'int'),\n ('selected', 'long_string'),\n ('yaml_selector', 'long_string'),\n ('project_id', 'string'),\n ('project_name', 'string'),\n ('env', 'string'),\n ('env_id', 'string'),\n ('cause_category', 'string'),\n ('cause', 'long_string'),\n ('pull_request_id', 'string'),\n ('git_sha', 'string'),\n ('orchestrator', 'string'),\n ])) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1334765, "supported_languages": null }, "macro.elementary.upload_dbt_sources": { "name": "upload_dbt_sources", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.upload_dbt_sources", "macro_sql": "{%- macro upload_dbt_sources(should_commit=false) -%}\n {% set relation = elementary.get_elementary_relation('dbt_sources') %}\n {% if execute and relation %}\n {% set sources = graph.sources.values() | selectattr('resource_type', '==', 'source') %}\n {% do elementary.upload_artifacts_to_table(relation, sources, elementary.flatten_source, should_commit=should_commit) %}\n {%- endif -%}\n {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1391869, "supported_languages": null }, "macro.elementary.get_dbt_sources_empty_table_query": { "name": "get_dbt_sources_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.get_dbt_sources_empty_table_query", "macro_sql": "{% macro get_dbt_sources_empty_table_query() %}\n {% set dbt_sources_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n ('database_name', 'string'),\n ('schema_name', 'string'),\n ('source_name', 'string'),\n ('name', 'string'),\n ('identifier', 'string'),\n ('loaded_at_field', 'string'),\n ('freshness_warn_after', 'string'),\n ('freshness_error_after', 'string'),\n ('freshness_filter', 'long_string'),\n ('relation_name', 'string'),\n ('tags', 'long_string'),\n ('meta', 'long_string'),\n ('owner', 'string'),\n ('package_name', 'string'),\n ('original_path', 'long_string'),\n ('path', 'string'),\n ('source_description', 'long_string'),\n ('description', 'long_string'),\n ('generated_at', 'string')]) %}\n {{ return(dbt_sources_empty_table_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.141068, "supported_languages": null }, "macro.elementary.flatten_source": { "name": "flatten_source", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.flatten_source", "macro_sql": "{% macro flatten_source(node_dict) %}\n {% set freshness_dict = elementary.safe_get_with_default(node_dict, 'freshness', {}) %}\n {% set source_meta_dict = elementary.safe_get_with_default(node_dict, 'source_meta', {}) %}\n {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n {% do meta_dict.update(source_meta_dict) %}\n {% set owner = meta_dict.get('owner') %}\n {% set node_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n {% set tags = elementary.union_lists(node_tags, meta_tags) %}\n {% set flatten_source_metadata_dict = {\n 'unique_id': node_dict.get('unique_id'),\n 'database_name': node_dict.get('database'),\n 'schema_name': node_dict.get('schema'),\n 'source_name': node_dict.get('source_name'),\n 'name': node_dict.get('name'),\n 'identifier': node_dict.get('identifier'),\n 'loaded_at_field': node_dict.get('loaded_at_field'),\n 'freshness_warn_after': freshness_dict.get('warn_after', {}),\n 'freshness_error_after': freshness_dict.get('error_after', {}),\n 'freshness_filter': freshness_dict.get('filter'),\n 'relation_name': node_dict.get('relation_name'),\n 'tags': tags,\n 'meta': meta_dict,\n 'owner': owner,\n 'package_name': node_dict.get('package_name'),\n 'original_path': node_dict.get('original_file_path'),\n 'path': node_dict.get('path'),\n 'source_description': node_dict.get('source_description'),\n 'description': node_dict.get('description'),\n 'generated_at': elementary.datetime_now_utc_as_string()\n }%}\n {{ return(flatten_source_metadata_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.datetime_now_utc_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1450315, "supported_languages": null }, "macro.elementary.upload_artifacts_to_table": { "name": "upload_artifacts_to_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "unique_id": "macro.elementary.upload_artifacts_to_table", "macro_sql": "{% macro upload_artifacts_to_table(table_relation, artifacts, flatten_artifact_callback, append=False, should_commit=False) %}\n {% set flatten_artifact_dicts = [] %}\n {% for artifact in artifacts %}\n {% set flatten_artifact_dict = flatten_artifact_callback(artifact) %}\n {% if flatten_artifact_dict is not none %}\n {% do flatten_artifact_dicts.append(flatten_artifact_dict) %}\n {% endif %}\n {% endfor %}\n\n {% if append %}\n {# In append mode, just insert, and no need to be atomic #}\n {% do elementary.insert_rows(table_relation, flatten_artifact_dicts, should_commit, elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n {% else %}\n {% do elementary.replace_table_data(table_relation, flatten_artifact_dicts) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.insert_rows", "macro.elementary.get_config_var", "macro.elementary.replace_table_data" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1468453, "supported_languages": null }, "macro.elementary.upload_dbt_snapshots": { "name": "upload_dbt_snapshots", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_snapshots.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_snapshots.sql", "unique_id": "macro.elementary.upload_dbt_snapshots", "macro_sql": "{%- macro upload_dbt_snapshots(should_commit=false) -%}\n {% set relation = elementary.get_elementary_relation('dbt_snapshots') %}\n {% if execute and relation %}\n {% set snapshots = graph.nodes.values() | selectattr('resource_type', '==', 'snapshot') %}\n {% do elementary.upload_artifacts_to_table(relation, snapshots, elementary.flatten_model, should_commit=should_commit) %}\n {%- endif -%}\n {{- return('') -}}\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1480663, "supported_languages": null }, "macro.elementary.upload_run_results": { "name": "upload_run_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.upload_run_results", "macro_sql": "{% macro upload_run_results() %}\n {% set relation = elementary.get_elementary_relation('dbt_run_results') %}\n {% if execute and relation %}\n {{ elementary.debug_log(\"Uploading run results.\") }}\n {% do elementary.upload_artifacts_to_table(relation, results, elementary.flatten_run_result, append=True, should_commit=True) %}\n {{ elementary.debug_log(\"Uploaded run results successfully.\") }}\n {% endif %}\n {{ return ('') }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.debug_log", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1544745, "supported_languages": null }, "macro.elementary.get_dbt_run_results_empty_table_query": { "name": "get_dbt_run_results_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.get_dbt_run_results_empty_table_query", "macro_sql": "{% macro get_dbt_run_results_empty_table_query() %}\n {% set dbt_run_results_empty_table_query = elementary.empty_table([('model_execution_id', 'long_string'),\n ('unique_id', 'long_string'),\n ('invocation_id', 'string'),\n ('generated_at', 'string'),\n ('name', 'long_string'),\n ('message', 'long_string'),\n ('status', 'string'),\n ('resource_type', 'string'),\n ('execution_time', 'float'),\n ('execute_started_at', 'string'),\n ('execute_completed_at', 'string'),\n ('compile_started_at', 'string'),\n ('compile_completed_at', 'string'),\n ('rows_affected', 'bigint'),\n ('full_refresh', 'boolean'),\n ('compiled_code', 'long_string'),\n ('failures', 'bigint'),\n ('query_id', 'string')\n ]) %}\n {{ return(dbt_run_results_empty_table_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1562285, "supported_languages": null }, "macro.elementary.flatten_run_result": { "name": "flatten_run_result", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.flatten_run_result", "macro_sql": "{% macro flatten_run_result(run_result) %}\n {% set run_result_dict = run_result.to_dict() %}\n {% set node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n {% set flatten_run_result_dict = {\n 'model_execution_id': elementary.get_node_execution_id(node),\n 'invocation_id': invocation_id,\n 'unique_id': node.get('unique_id'),\n 'name': node.get('name'),\n 'message': run_result_dict.get('message'),\n 'generated_at': elementary.datetime_now_utc_as_string(),\n 'rows_affected': run_result_dict.get('adapter_response', {}).get('rows_affected'),\n 'execution_time': run_result_dict.get('execution_time'),\n 'status': run_result_dict.get('status'),\n 'resource_type': node.get('resource_type'),\n 'execute_started_at': none,\n 'execute_completed_at': none,\n 'compile_started_at': none,\n 'compile_completed_at': none,\n 'full_refresh': flags.FULL_REFRESH,\n 'compiled_code': elementary.get_compiled_model_code_text(node),\n 'failures': run_result_dict.get('failures'),\n 'query_id': run_result_dict.get('adapter_response', {}).get('query_id')\n \n }%}\n\n {% set timings = elementary.safe_get_with_default(run_result_dict, 'timing', []) %}\n {% if timings %}\n {% for timing in timings %}\n {% if timing is mapping %}\n {% if timing.get('name') == 'execute' %}\n {% do flatten_run_result_dict.update({'execute_started_at': timing.get('started_at'), 'execute_completed_at': timing.get('completed_at')}) %}\n {% elif timing.get('name') == 'compile' %}\n {% do flatten_run_result_dict.update({'compile_started_at': timing.get('started_at'), 'compile_completed_at': timing.get('completed_at')}) %}\n {% endif %}\n {% endif %}\n {% endfor %}\n {% endif %}\n {{ return(flatten_run_result_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default", "macro.elementary.get_node_execution_id", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_compiled_model_code_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1602745, "supported_languages": null }, "macro.elementary.upload_dbt_models": { "name": "upload_dbt_models", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.upload_dbt_models", "macro_sql": "{%- macro upload_dbt_models(should_commit=false) -%}\n {% set relation = elementary.get_elementary_relation('dbt_models') %}\n {% if execute and relation %}\n {% set models = graph.nodes.values() | selectattr('resource_type', '==', 'model') %}\n {% do elementary.upload_artifacts_to_table(relation, models, elementary.flatten_model, should_commit=should_commit) %}\n {%- endif -%}\n {{- return('') -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.166497, "supported_languages": null }, "macro.elementary.get_dbt_models_empty_table_query": { "name": "get_dbt_models_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.get_dbt_models_empty_table_query", "macro_sql": "{% macro get_dbt_models_empty_table_query() %}\n {% set dbt_models_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n ('alias', 'string'),\n ('checksum', 'string'),\n ('materialization', 'string'),\n ('tags', 'long_string'),\n ('meta', 'long_string'),\n ('owner', 'string'),\n ('database_name', 'string'),\n ('schema_name', 'string'),\n ('depends_on_macros', 'long_string'),\n ('depends_on_nodes', 'long_string'),\n ('description', 'long_string'),\n ('name', 'string'),\n ('package_name', 'string'),\n ('original_path', 'long_string'),\n ('path', 'string'),\n ('generated_at', 'string')]) %}\n {{ return(dbt_models_empty_table_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.168172, "supported_languages": null }, "macro.elementary.flatten_model": { "name": "flatten_model", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.flatten_model", "macro_sql": "{% macro flatten_model(node_dict) %}\n {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n {% do meta_dict.update(config_meta_dict) %}\n {% set formatted_owner = [] %}\n {% set raw_owner = meta_dict.get('owner') %}\n {% if raw_owner is string %}\n {% set owners = raw_owner.split(',') %}\n {% for owner in owners %}\n {% do formatted_owner.append(owner | trim) %} \n {% endfor %}\n {% elif raw_owner is iterable %}\n {% do formatted_owner.extend(raw_owner) %}\n {% endif %}\n {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n {% set tags = elementary.union_lists(config_tags, global_tags) %}\n {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n {% set flatten_model_metadata_dict = {\n 'unique_id': node_dict.get('unique_id'),\n 'alias': node_dict.get('alias'),\n 'checksum': checksum_dict.get('checksum'),\n 'materialization': config_dict.get('materialized'),\n 'tags': tags,\n 'meta': meta_dict,\n 'owner': formatted_owner,\n 'database_name': node_dict.get('database'),\n 'schema_name': node_dict.get('schema'),\n 'depends_on_macros': depends_on_dict.get('macros', []),\n 'depends_on_nodes': depends_on_dict.get('nodes', []),\n 'description': node_dict.get('description'),\n 'name': node_dict.get('name'),\n 'package_name': node_dict.get('package_name'),\n 'original_path': node_dict.get('original_file_path'),\n 'path': node_dict.get('path'),\n 'generated_at': elementary.datetime_now_utc_as_string()\n }%}\n {{ return(flatten_model_metadata_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.datetime_now_utc_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1731765, "supported_languages": null }, "macro.elementary.upload_dbt_exposures": { "name": "upload_dbt_exposures", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.upload_dbt_exposures", "macro_sql": "{%- macro upload_dbt_exposures(should_commit=false) -%}\n {% set relation = elementary.get_elementary_relation('dbt_exposures') %}\n {% if execute and relation %}\n {% set exposures = graph.exposures.values() | selectattr('resource_type', '==', 'exposure') %}\n {% do elementary.upload_artifacts_to_table(relation, exposures, elementary.flatten_exposure, should_commit=should_commit) %}\n {%- endif -%}\n {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": { "macros": [ "macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1779103, "supported_languages": null }, "macro.elementary.get_dbt_exposures_empty_table_query": { "name": "get_dbt_exposures_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.get_dbt_exposures_empty_table_query", "macro_sql": "{% macro get_dbt_exposures_empty_table_query() %}\n {% set dbt_exposures_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n ('name', 'string'),\n ('maturity', 'string'),\n ('type', 'string'),\n ('owner_email', 'string'),\n ('owner_name', 'string'),\n ('url', 'long_string'),\n ('depends_on_macros', 'long_string'),\n ('depends_on_nodes', 'long_string'),\n ('description', 'long_string'),\n ('tags', 'long_string'),\n ('meta', 'long_string'),\n ('package_name', 'string'),\n ('original_path', 'long_string'),\n ('path', 'string'),\n ('generated_at', 'string')]) %}\n {{ return(dbt_exposures_empty_table_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1795263, "supported_languages": null }, "macro.elementary.flatten_exposure": { "name": "flatten_exposure", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.flatten_exposure", "macro_sql": "{% macro flatten_exposure(node_dict) %}\n {% set owner_dict = elementary.safe_get_with_default(node_dict, 'owner', {}) %}\n {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n {% set flatten_exposure_metadata_dict = {\n 'unique_id': node_dict.get('unique_id'),\n 'name': node_dict.get('name'),\n 'maturity': node_dict.get('maturity'),\n 'type': node_dict.get('type'),\n 'owner_email': owner_dict.get('email'),\n 'owner_name': owner_dict.get('name'),\n 'url': node_dict.get('url'),\n 'depends_on_macros': depends_on_dict.get('macros', []),\n 'depends_on_nodes': depends_on_dict.get('nodes', []),\n 'description': node_dict.get('description'),\n 'tags': tags,\n 'meta': meta_dict,\n 'package_name': node_dict.get('package_name'),\n 'original_path': node_dict.get('original_file_path'),\n 'path': node_dict.get('path'),\n 'generated_at': elementary.datetime_now_utc_as_string()\n }%}\n {{ return(flatten_exposure_metadata_dict) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default", "macro.elementary.datetime_now_utc_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.182279, "supported_languages": null }, "macro.elementary.upload_dbt_artifacts": { "name": "upload_dbt_artifacts", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "unique_id": "macro.elementary.upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts() %}\n {% if execute and results %}\n {% set model_upload_func_map = {\n \"dbt_models\": elementary.upload_dbt_models,\n \"dbt_tests\": elementary.upload_dbt_tests,\n \"dbt_sources\": elementary.upload_dbt_sources,\n \"dbt_snapshots\": elementary.upload_dbt_snapshots,\n \"dbt_metrics\": elementary.upload_dbt_metrics,\n \"dbt_exposures\": elementary.upload_dbt_exposures,\n }\n %}\n {% do elementary.debug_log(\"Uploading dbt artifacts.\") %}\n {% for artifacts_model, upload_artifacts_func in model_upload_func_map.items() %}\n {% if not elementary.get_result_node(artifacts_model) %}\n {% if elementary.get_elementary_relation(artifacts_model) %}\n {% do upload_artifacts_func(should_commit=true) %}\n {% endif %}\n {% else %}\n {% do elementary.debug_log('[{}] Artifacts already ran.'.format(artifacts_model)) %}\n {% endif %}\n {% endfor %}\n {% do elementary.debug_log(\"Uploaded dbt artifacts successfully.\") %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.debug_log", "macro.elementary.get_result_node", "macro.elementary.get_elementary_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1846967, "supported_languages": null }, "macro.elementary.test_schema_changes_from_baseline": { "name": "test_schema_changes_from_baseline", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_schema_changes_from_baseline.sql", "original_file_path": "macros/edr/tests/test_schema_changes_from_baseline.sql", "unique_id": "macro.elementary.test_schema_changes_from_baseline", "macro_sql": "{% test schema_changes_from_baseline(model, fail_on_added=False, enforce_types=False) %}\n -- depends_on: {{ ref('schema_columns_snapshot') }}\n -- depends_on: {{ ref('filtered_information_schema_columns') }}\n\n {%- if execute and flags.WHICH in ['test', 'build'] %}\n {% set test_table_name = elementary.get_elementary_test_table_name() %}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n {# Get baseline and store it in a table #}\n {% set baseline_columns = elementary.get_model_baseline_columns(model, enforce_types=enforce_types) %}\n {% set baseline_table_relation = elementary.create_model_baseline_table(baseline_columns, database_name, schema_name, test_table_name) %}\n\n {% set full_table_name = elementary.relation_to_full_name(model) %}\n {% set changes_from_baseline_query = elementary.get_column_changes_from_baseline_query(full_table_name, baseline_table_relation, include_added=fail_on_added) %}\n {{ changes_from_baseline_query }}\n {% else %}\n {# test must run an sql query #}\n {{ elementary.no_results_query() }}\n {% endif %}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.get_elementary_test_table_name", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.get_model_baseline_columns", "macro.elementary.create_model_baseline_table", "macro.elementary.relation_to_full_name", "macro.elementary.get_column_changes_from_baseline_query", "macro.elementary.no_results_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1872, "supported_languages": null }, "macro.elementary.test_all_columns_anomalies": { "name": "test_all_columns_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "unique_id": "macro.elementary.test_all_columns_anomalies", "macro_sql": "{% test all_columns_anomalies(model, column_anomalies, exclude_prefix, exclude_regexp, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n -- depends_on: {{ ref('monitors_runs') }}\n -- depends_on: {{ ref('data_monitoring_metrics') }}\n -- depends_on: {{ ref('alerts_anomaly_detection') }}\n -- depends_on: {{ ref('metrics_anomaly_score') }}\n -- depends_on: {{ ref('dbt_run_results') }}\n {%- if execute and flags.WHICH in ['test', 'build'] %}\n {% if not time_bucket %}\n {% set time_bucket = elementary.get_default_time_bucket() %}\n {% endif %}\n\n {%- set test_table_name = elementary.get_elementary_test_table_name() %}\n {{- elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n {#- creates temp relation for test metrics -#}\n {%- set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n {%- set empty_table_query = elementary.empty_data_monitoring_metrics() %}\n {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', empty_table_query) %}\n\n {#- get all columns configuration -#}\n {%- set full_table_name = elementary.relation_to_full_name(model) %}\n {%- set model_relation = dbt.load_relation(model) %}\n {%- if not model_relation %}\n {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n {%- endif %}\n\n {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n {{- elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n {% if timestamp_column and not is_timestamp %}\n {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(timestamp_column)) %}\n {% endif %}\n\n {%- set column_objs_and_monitors = elementary.get_all_column_obj_and_monitors(model_relation, column_anomalies) -%}\n {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n {#- execute table monitors and write to temp test table -#}\n {%- set monitors = [] %}\n {%- if column_objs_and_monitors | length > 0 %}\n {{- elementary.test_log('start', full_table_name, 'all columns') }}\n {%- for column_obj_and_monitors in column_objs_and_monitors %}\n {%- set column_obj = column_obj_and_monitors['column'] %}\n {%- set column_monitors = column_obj_and_monitors['monitors'] %}\n {%- set column_name = column_obj.name -%}\n {%- set ignore_column = elementary.should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n {%- if not ignore_column -%}\n {%- do monitors.extend(column_monitors) -%}\n {%- set min_bucket_start = elementary.quote(elementary.get_test_min_bucket_start(model_graph_node, backfill_days, column_monitors, column_name)) %}\n {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n {{ elementary.test_log('start', full_table_name, column_name) }}\n {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, timestamp_column, min_bucket_start, column_obj, column_monitors, where_expression, time_bucket) %}\n {%- do run_query(elementary.insert_as_select(temp_table_relation, column_monitoring_query)) -%}\n {%- else -%}\n {{ elementary.debug_log('column ' ~ column_name ~ ' is excluded') }}\n {%- endif -%}\n {%- endfor %}\n {%- endif %}\n {%- set all_columns_monitors = monitors | unique | list %}\n {#- query if there is an anomaly in recent metrics -#}\n {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n {%- set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, model_graph_node, sensitivity, backfill_days, all_columns_monitors, columns_only=true) %}\n {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n\n {{- elementary.test_log('end', full_table_name, 'all columns') }}\n\n {{ elementary.get_read_anomaly_scores_query() }}\n\n {%- else %}\n\n {#- test must run an sql query -#}\n {{- elementary.no_results_query() }}\n\n {%- endif %}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.empty_data_monitoring_metrics", "macro.elementary.create_elementary_test_table", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_all_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.test_log", "macro.elementary.should_ignore_column", "macro.elementary.quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.column_monitoring_query", "macro.dbt.run_query", "macro.elementary.insert_as_select", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1977768, "supported_languages": null }, "macro.elementary.should_ignore_column": { "name": "should_ignore_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "unique_id": "macro.elementary.should_ignore_column", "macro_sql": "\n\n{%- macro should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n {%- set regex_module = modules.re -%}\n {%- if exclude_regexp -%}\n {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n {%- if is_match -%}\n {{ return(True) }}\n {%- endif -%}\n {%- endif -%}\n {% if exclude_prefix %}\n {%- set exclude_regexp = '^' ~ exclude_prefix ~ '.*' %}\n {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n {%- if is_match -%}\n {{ return(True) }}\n {%- endif -%}\n {%- endif -%}\n {{ return(False) }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.1992636, "supported_languages": null }, "macro.elementary.test_python": { "name": "test_python", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/python.sql", "original_file_path": "macros/edr/tests/python.sql", "unique_id": "macro.elementary.test_python", "macro_sql": "{% test python(model, code_macro, macro_args) %}\n {{ config(fail_calc = 'fail_count') }}\n\n {% if not execute %}\n {% do return(none) %}\n {% endif %}\n\n {% if not code_macro %}\n {% do exceptions.raise_compiler_error('A `code_macro` must be provided to a Python test.') %}\n {% endif %}\n {% if not macro_args %}\n {% set macro_args = {} %}\n {% endif %}\n\n {% set test_args = kwargs %}\n {% set test_node = context.model %}\n {% set model_relation = model.quote(false, false, false) %}\n {% set elementary_database_name, elementary_schema_name = elementary.get_package_database_and_schema() %}\n {% set output_table = api.Relation.create(database=elementary_database_name, schema=elementary_schema_name,\n identifier='pytest_tmp__' ~ test_node.alias).quote(false, false, false) %}\n\n {# This affects where resources needed for python execution (e.g. stored procedures) are created.\n By default, dbt uses the audit schema (adds _dbt__test_audit to the model's schema).\n We prefer to change this behavior and use Elementary's database and schema instead (this also guarantees the test\n will work for sources).\n #}\n {% do test_node.update({'database': elementary_database_name, 'schema': elementary_schema_name}) %}\n\n {% do test_node.config.update(test_args) %}\n\n {% if code_macro is string %}\n {% set user_py_code_macro = context[code_macro] %}\n {% else %}\n {% set user_py_code_macro = code_macro %}\n {% endif %}\n\n {% if not user_py_code_macro %}\n {% do exceptions.raise_compiler_error('Unable to find the macro `' ~ code_macro ~ '`.') %}\n {% endif %}\n {% set user_py_code = user_py_code_macro(macro_args) %}\n {% set compiled_py_code = adapter.dispatch('compile_py_code', 'elementary')(model_relation, user_py_code,\n output_table, code_type='test') %}\n\n {% do elementary.run_python(test_node, compiled_py_code) %}\n select fail_count from {{ output_table }}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.quote", "macro.elementary.get_package_database_and_schema", "macro.elementary.snowflake__compile_py_code", "macro.elementary.run_python" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2038033, "supported_languages": null }, "macro.elementary.test_table_anomalies": { "name": "test_table_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_table_anomalies.sql", "original_file_path": "macros/edr/tests/test_table_anomalies.sql", "unique_id": "macro.elementary.test_table_anomalies", "macro_sql": "{% test table_anomalies(model, table_anomalies, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n -- depends_on: {{ ref('monitors_runs') }}\n -- depends_on: {{ ref('data_monitoring_metrics') }}\n -- depends_on: {{ ref('alerts_anomaly_detection') }}\n -- depends_on: {{ ref('metrics_anomaly_score') }}\n -- depends_on: {{ ref('dbt_run_results') }}\n {%- if execute and flags.WHICH in ['test', 'build'] %}\n {% if not time_bucket %}\n {% set time_bucket = elementary.get_default_time_bucket() %}\n {% endif %}\n\n {% set test_table_name = elementary.get_elementary_test_table_name() %}\n {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n {#- creates temp relation for test metrics -#}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n {#- get table configuration -#}\n {%- set full_table_name = elementary.relation_to_full_name(model) %}\n {%- set model_relation = dbt.load_relation(model) %}\n {% if not model_relation %}\n {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n {% endif %}\n\n {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n {% if timestamp_column and not is_timestamp %}\n {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(timestamp_column)) %}\n {% endif %}\n\n {%- set table_monitors = elementary.get_final_table_monitors(table_anomalies) %}\n {{ elementary.debug_log('table_monitors - ' ~ table_monitors) }}\n {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n {%- set min_bucket_start = elementary.quote(elementary.get_test_min_bucket_start(model_graph_node, backfill_days, table_monitors)) %}\n {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n {#- execute table monitors and write to temp test table -#}\n {{ elementary.test_log('start', full_table_name) }}\n {%- set table_monitoring_query = elementary.table_monitoring_query(model_relation, timestamp_column, min_bucket_start, table_monitors, where_expression, time_bucket, metric_args=kwargs) %}\n {{ elementary.debug_log('table_monitoring_query - \\n' ~ table_monitoring_query) }}\n {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', table_monitoring_query) %}\n\n {#- calculate anomaly scores for metrics -#}\n {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, model_graph_node, sensitivity, backfill_days, table_monitors) %}\n {{ elementary.debug_log('table monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n {{ elementary.test_log('end', full_table_name) }}\n\n {{ elementary.get_read_anomaly_scores_query() }}\n\n {% else %}\n\n {# test must run an sql query #}\n {{ elementary.no_results_query() }}\n\n {% endif %}\n\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_final_table_monitors", "macro.elementary.get_test_argument", "macro.elementary.quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.test_log", "macro.elementary.table_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2117496, "supported_languages": null }, "macro.elementary.test_column_anomalies": { "name": "test_column_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_column_anomalies.sql", "original_file_path": "macros/edr/tests/test_column_anomalies.sql", "unique_id": "macro.elementary.test_column_anomalies", "macro_sql": "{% test column_anomalies(model, column_name, column_anomalies, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n -- depends_on: {{ ref('monitors_runs') }}\n -- depends_on: {{ ref('data_monitoring_metrics') }}\n -- depends_on: {{ ref('alerts_anomaly_detection') }}\n -- depends_on: {{ ref('metrics_anomaly_score') }}\n -- depends_on: {{ ref('dbt_run_results') }}\n {%- if execute and flags.WHICH in ['test', 'build'] %}\n {% if not time_bucket %}\n {% set time_bucket = elementary.get_default_time_bucket() %}\n {% endif %}\n\n {% set test_table_name = elementary.get_elementary_test_table_name() %}\n {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n {#- creates temp relation for test metrics -#}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n {#- get column configuration -#}\n {%- set full_table_name = elementary.relation_to_full_name(model) %}\n {%- set model_relation = dbt.load_relation(model) %}\n {% if not model_relation %}\n {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n {% endif %}\n\n {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n {% if timestamp_column and not is_timestamp %}\n {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(timestamp_column)) %}\n {% endif %}\n\n {%- set column_obj_and_monitors = elementary.get_column_obj_and_monitors(model, column_name, column_anomalies) -%}\n {%- if not column_obj_and_monitors -%}\n {{ exceptions.raise_compiler_error(\"Unable to find column `{}` in `{}`\".format(column_name, full_table_name)) }}\n {%- endif -%}\n {%- set column_monitors = column_obj_and_monitors['monitors'] -%}\n {%- set column_obj = column_obj_and_monitors['column'] -%}\n {{ elementary.debug_log('column_monitors - ' ~ column_monitors) }}\n {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n {%- set min_bucket_start = elementary.quote(elementary.get_test_min_bucket_start(model_graph_node, backfill_days, column_monitors, column_name)) %}\n {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n {#- execute table monitors and write to temp test table -#}\n {{ elementary.test_log('start', full_table_name, column_name) }}\n {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, timestamp_column, min_bucket_start, column_obj, column_monitors, where_expression, time_bucket) %}\n {{ elementary.debug_log('column_monitoring_query - \\n' ~ column_monitoring_query) }}\n {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', column_monitoring_query) %}\n\n\n {#- calculate anomaly scores for metrics -#}\n {%- set temp_table_name = elementary.relation_to_full_name(temp_table_relation) %}\n {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, model_graph_node, sensitivity, backfill_days, column_monitors, column_name) %}\n {{ elementary.debug_log('anomaly_score_query - \\n' ~ anomaly_scores_query) }}\n {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n {{ elementary.test_log('end', full_table_name, column_name) }}\n\n {{ elementary.get_read_anomaly_scores_query() }}\n\n {%- else %}\n\n {#- test must run an sql query -#}\n {{ elementary.no_results_query() }}\n\n {%- endif %}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.test_log", "macro.elementary.column_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.22114, "supported_languages": null }, "macro.elementary.test_volume_anomalies": { "name": "test_volume_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_volume_anomalies.sql", "original_file_path": "macros/edr/tests/test_volume_anomalies.sql", "unique_id": "macro.elementary.test_volume_anomalies", "macro_sql": "{% test volume_anomalies(model, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n {{ elementary.test_table_anomalies(\n model=model,\n table_anomalies=[\"row_count\"],\n freshness_column=none,\n timestamp_column=timestamp_column,\n sensitivity=sensitivity,\n backfill_days=backfill_days,\n where_expression=where_expression,\n time_bucket=time_bucket\n )\n }}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.test_table_anomalies" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2220852, "supported_languages": null }, "macro.elementary.test_event_freshness_anomalies": { "name": "test_event_freshness_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_event_freshness_anomalies.sql", "original_file_path": "macros/edr/tests/test_event_freshness_anomalies.sql", "unique_id": "macro.elementary.test_event_freshness_anomalies", "macro_sql": "{% test event_freshness_anomalies(model, event_timestamp_column, update_timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n {% if execute %}\n {%- if not event_timestamp_column -%}\n {%- do exceptions.raise_compiler_error('event_timestamp_column must be specified for the event freshness test!') -%}\n {%- endif -%}\n\n {%- set event_timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, event_timestamp_column) -%}\n {%- if not elementary.get_is_column_timestamp(model_relation, event_timestamp_column, event_timestamp_column_data_type) -%}\n {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(event_timestamp_column)) %}\n {%- endif -%}\n {% endif %}\n\n {{ elementary.test_table_anomalies(\n model=model,\n table_anomalies=[\"event_freshness\"],\n event_timestamp_column=event_timestamp_column,\n timestamp_column=update_timestamp_column,\n sensitivity=sensitivity,\n backfill_days=backfill_days,\n where_expression=where_expression,\n time_bucket=time_bucket\n )\n }}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.test_table_anomalies" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2241175, "supported_languages": null }, "macro.elementary.test_dimension_anomalies": { "name": "test_dimension_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_dimension_anomalies.sql", "original_file_path": "macros/edr/tests/test_dimension_anomalies.sql", "unique_id": "macro.elementary.test_dimension_anomalies", "macro_sql": "{% test dimension_anomalies(model, dimensions, where_expression, timestamp_column, sensitivity, backfill_days, time_bucket) %}\n -- depends_on: {{ ref('monitors_runs') }}\n -- depends_on: {{ ref('data_monitoring_metrics') }}\n -- depends_on: {{ ref('alerts_anomaly_detection') }}\n -- depends_on: {{ ref('metrics_anomaly_score') }}\n -- depends_on: {{ ref('dbt_run_results') }}\n {%- if execute and flags.WHICH in ['test', 'build'] %}\n {% if not dimensions %}\n {{ exceptions.raise_compiler_error('Dimension anomalies test must get \"dimensions\" as a parameter!') }}\n {% endif %}\n {% if not time_bucket %}\n {% set time_bucket = elementary.get_default_time_bucket() %}\n {% endif %}\n\n {% set test_table_name = elementary.get_elementary_test_table_name() %}\n {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n {#- creates temp relation for test metrics -#}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n {#- get table configuration -#}\n {%- set full_table_name = elementary.relation_to_full_name(model) %}\n {%- set model_relation = dbt.load_relation(model) %}\n {% if not model_relation %}\n {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n {% endif %}\n\n {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n {% if timestamp_column and not is_timestamp %}\n {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(timestamp_column)) %}\n {% endif %}\n\n {% set dimensions_str = elementary.join_list(dimensions, ', ') %}\n {{ elementary.debug_log('dimensions - ' ~ dimensions) }}\n {{ elementary.debug_log('where_expression - ' ~ where_expression) }}\n {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n {%- set min_bucket_start = elementary.quote(elementary.get_test_min_bucket_start(model_graph_node, backfill_days, column_name=dimensions_str)) %}\n {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n {#- execute table monitors and write to temp test table -#}\n {{ elementary.test_log('start', full_table_name) }}\n {%- set dimension_monitoring_query = elementary.dimension_monitoring_query(model_relation, dimensions, where_expression, timestamp_column, min_bucket_start, time_bucket) %}\n {{ elementary.debug_log('dimension_monitoring_query - \\n' ~ dimension_monitoring_query) }}\n {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', dimension_monitoring_query) %}\n\n\n {#- calculate anomaly scores for metrics -#}\n {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, model_graph_node, sensitivity, backfill_days, ['dimension'], dimensions=dimensions) %}\n {{ elementary.debug_log('dimension monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n {{ elementary.test_log('end', full_table_name) }}\n\n {{ elementary.get_anomaly_query() }}\n\n {% else %}\n\n {# test must run an sql query #}\n {{ elementary.no_results_query() }}\n\n {% endif %}\n\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.join_list", "macro.elementary.get_test_argument", "macro.elementary.quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.test_log", "macro.elementary.dimension_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_anomaly_query", "macro.elementary.no_results_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2327032, "supported_languages": null }, "macro.elementary.test_json_schema": { "name": "test_json_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_json_schema.sql", "original_file_path": "macros/edr/tests/test_json_schema.sql", "unique_id": "macro.elementary.test_json_schema", "macro_sql": "{% test json_schema(model, column_name) %}\n {{ config(fail_calc = 'fail_count') }}\n\n {% if not execute %}\n {% do return(none) %}\n {% endif %}\n {% if not elementary.column_exists_in_relation(model, column_name) %}\n {% do exceptions.raise_compiler_error(\"Column '{}' does not exist in node '{}'!\".format(column_name, model.name)) %}\n {% endif %}\n {% if not kwargs %}\n {% do exceptions.raise_compiler_error(\"A json schema must be supplied as a part of the test!\") %}\n {% endif %}\n\n {{ elementary.test_python(model, elementary.json_schema_python_test, {'column_name': column_name, 'json_schema': kwargs},\n packages=['jsonschema']) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.column_exists_in_relation", "macro.elementary.test_python" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2353272, "supported_languages": null }, "macro.elementary.json_schema_python_test": { "name": "json_schema_python_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_json_schema.sql", "original_file_path": "macros/edr/tests/test_json_schema.sql", "unique_id": "macro.elementary.json_schema_python_test", "macro_sql": "{% macro json_schema_python_test(args) %}\nimport json\nimport jsonschema\n\ndef is_valid_json(val, json_schema):\n try:\n jsonschema.validate(json.loads(val), json_schema)\n return True\n except (json.JSONDecodeError, jsonschema.ValidationError):\n return False\n\ndef get_column_name_in_df(df, column_name):\n matching = [col for col in df.columns if col.lower() == column_name.lower()]\n if len(matching) > 1:\n # Case matters, switch to case-sensitive match\n matching = [col for col in df.columns if col == column_name]\n\n if len(matching) == 0:\n raise Exception(\"No column with the name: {}\".format(col))\n return matching[0]\n\ndef test(model_df, ref, session):\n raw_json_schema = r\"\"\"{{ args.json_schema if args.json_schema is string else tojson(args.json_schema) }}\"\"\"\n json_schema = json.loads(raw_json_schema)\n\n model_df = model_df.toPandas()\n column_name = get_column_name_in_df(model_df, \"{{ args.column_name }}\")\n model_df[\"is_valid_json\"] = model_df[column_name].apply(lambda val: is_valid_json(val, json_schema))\n\n return model_df[model_df.is_valid_json == False]\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2358963, "supported_languages": null }, "macro.elementary.test_schema_changes": { "name": "test_schema_changes", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_schema_changes.sql", "original_file_path": "macros/edr/tests/test_schema_changes.sql", "unique_id": "macro.elementary.test_schema_changes", "macro_sql": "{% test schema_changes(model) %}\n -- depends_on: {{ ref('elementary_test_results') }}\n -- depends_on: {{ ref('schema_columns_snapshot') }}\n -- depends_on: {{ ref('filtered_information_schema_columns') }}\n\n {%- if execute and flags.WHICH in ['test', 'build'] %}\n {% set test_table_name = elementary.get_elementary_test_table_name() %}\n {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n {# creates temp relation for schema columns info #}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n {# get table configuration #}\n {%- set full_table_name = elementary.relation_to_full_name(model) %}\n {%- set model_relation = dbt.load_relation(model) %}\n {% if not model_relation %}\n {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n {% endif %}\n\n {#- query current schema and write to temp test table -#}\n {{ elementary.edr_log('Started testing schema changes on:' ~ full_table_name) }}\n {%- set column_snapshot_query = elementary.get_columns_snapshot_query(full_table_name) %}\n {{ elementary.debug_log('column_snapshot_query - \\n' ~ column_snapshot_query) }}\n {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'schema_changes', column_snapshot_query) %}\n\n {# query if there were schema changes since last execution #}\n {% set schema_changes_alert_query = elementary.get_columns_changes_from_last_run_query(full_table_name, temp_table_relation) %}\n {{ elementary.debug_log('schema_changes_alert_query - \\n' ~ schema_changes_alert_query) }}\n {% set alerts_temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'schema_changes_alerts', schema_changes_alert_query) %}\n {# return schema changes query as standard test query #}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ alerts_temp_table_relation }}\n\n {% else %}\n\n {# test must run an sql query #}\n {{ elementary.no_results_query() }}\n\n {% endif %}\n\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.edr_log", "macro.elementary.get_columns_snapshot_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_columns_changes_from_last_run_query", "macro.elementary.no_results_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2397075, "supported_languages": null }, "macro.elementary.test_freshness_anomalies": { "name": "test_freshness_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_freshness_anomalies.sql", "original_file_path": "macros/edr/tests/test_freshness_anomalies.sql", "unique_id": "macro.elementary.test_freshness_anomalies", "macro_sql": "{% test freshness_anomalies(model, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n {{ elementary.test_table_anomalies(\n model=model,\n table_anomalies=[\"freshness\"],\n freshness_column=none,\n timestamp_column=timestamp_column,\n sensitivity=sensitivity,\n backfill_days=backfill_days,\n where_expression=where_expression,\n time_bucket=time_bucket\n )\n }}\n{% endtest %}", "depends_on": { "macros": [ "macro.elementary.test_table_anomalies" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2405803, "supported_languages": null }, "macro.elementary.handle_tests_results": { "name": "handle_tests_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.handle_tests_results", "macro_sql": "{% macro handle_tests_results() %}\n {{ elementary.debug_log(\"Handling test results.\") }}\n {% set cached_elementary_test_results = elementary.get_cache(\"elementary_test_results\") %}\n {% set elementary_test_results = elementary.get_result_enriched_elementary_test_results(cached_elementary_test_results) %}\n {% set tables_cache = elementary.get_cache(\"tables\") %}\n {% set test_metrics_tables = tables_cache.get(\"metrics\") %}\n {% set test_columns_snapshot_tables = tables_cache.get(\"schema_snapshots\") %}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {{ elementary.merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) }}\n {{ elementary.merge_schema_columns_snapshot(database_name, schema_name, test_columns_snapshot_tables) }}\n {% if elementary_test_results %}\n {% set elementary_test_results_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='elementary_test_results') %}\n {% do elementary.insert_rows(elementary_test_results_relation, elementary_test_results, should_commit=True) %}\n {% endif %}\n {{ elementary.debug_log(\"Handled test results successfully.\") }}\n {{ return('') }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.debug_log", "macro.elementary.get_cache", "macro.elementary.get_result_enriched_elementary_test_results", "macro.elementary.get_package_database_and_schema", "macro.elementary.merge_data_monitoring_metrics", "macro.elementary.merge_schema_columns_snapshot", "macro.elementary.insert_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2477982, "supported_languages": null }, "macro.elementary.get_result_enriched_elementary_test_results": { "name": "get_result_enriched_elementary_test_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.get_result_enriched_elementary_test_results", "macro_sql": "{% macro get_result_enriched_elementary_test_results(cached_elementary_test_results) %}\n {% set elementary_test_results = [] %}\n\n {% for result in results | selectattr('node.resource_type', '==', 'test') %}\n {% set result = result.to_dict() %}\n {% set elementary_test_results_rows = cached_elementary_test_results.get(result.node.unique_id) %}\n\n {# Materializing the test failed and therefore was not added to the cache. #}\n {% if not elementary_test_results_rows %}\n {% set flattened_test = elementary.flatten_test(result.node) %}\n {% set elementary_test_results_rows = [elementary.get_dbt_test_result_row(flattened_test)] %}\n {% endif %}\n\n {% for elementary_test_results_row in elementary_test_results_rows %}\n {% set failures = elementary_test_results_row.get(\"failures\", result.failures) %}\n {% set status = \"pass\" if failures == 0 else result.status %}\n {% do elementary_test_results_row.update({'status': status, 'failures': failures, 'invocation_id': invocation_id}) %}\n {% do elementary_test_results_row.setdefault('test_results_description', result.message) %}\n {% do elementary_test_results.append(elementary_test_results_row) %}\n {% endfor %}\n {% endfor %}\n\n {% do return(elementary_test_results) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.flatten_test", "macro.elementary.get_dbt_test_result_row" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2502337, "supported_languages": null }, "macro.elementary.merge_data_monitoring_metrics": { "name": "merge_data_monitoring_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.merge_data_monitoring_metrics", "macro_sql": "{% macro merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) %}\n {%- if test_metrics_tables %}\n {%- set test_tables_union_query = elementary.union_metrics_query(test_metrics_tables) -%}\n {%- set target_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='data_monitoring_metrics') -%}\n {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n {%- if test_tables_union_query %}\n {{ elementary.debug_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n {{ elementary.debug_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n {%- if target_relation and temp_relation and dest_columns %}\n {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'id', dest_columns) %}\n {%- do run_query(merge_sql) %}\n {%- do adapter.commit() -%}\n {{ elementary.debug_log('Finished merging') }}\n {%- else %}\n {{ elementary.debug_log('Error: could not merge to table: ' ~ target_name) }}\n {%- endif %}\n {%- endif %}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.union_metrics_query", "macro.dbt.make_temp_relation", "macro.elementary.debug_log", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.252814, "supported_languages": null }, "macro.elementary.merge_schema_columns_snapshot": { "name": "merge_schema_columns_snapshot", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.merge_schema_columns_snapshot", "macro_sql": "{% macro merge_schema_columns_snapshot(database_name, schema_name, test_columns_snapshot_tables) %}\n {%- if test_columns_snapshot_tables %}\n {%- set test_tables_union_query = elementary.union_columns_snapshot_query(test_columns_snapshot_tables) -%}\n {%- set target_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='schema_columns_snapshot') -%}\n {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n {%- if test_tables_union_query %}\n {{ elementary.debug_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n {{ elementary.debug_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n {%- if target_relation and temp_relation and dest_columns %}\n {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'column_state_id', dest_columns) %}\n {%- do run_query(merge_sql) %}\n {%- do adapter.commit() -%}\n {{ elementary.debug_log('Finished merging') }}\n {%- else %}\n {{ elementary.debug_log('Error: could not merge to table: ' ~ target_name) }}\n {%- endif %}\n {%- endif %}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.union_columns_snapshot_query", "macro.dbt.make_temp_relation", "macro.elementary.debug_log", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2553186, "supported_languages": null }, "macro.elementary.union_columns_snapshot_query": { "name": "union_columns_snapshot_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/union_columns_snapshot_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_columns_snapshot_query.sql", "unique_id": "macro.elementary.union_columns_snapshot_query", "macro_sql": "{% macro union_columns_snapshot_query(temp_columns_snapshot_tables) %}\n {%- if temp_columns_snapshot_tables | length > 0 %}\n {%- set union_temp_query -%}\n with union_temp_columns_snapshot as (\n {%- for temp_table in temp_columns_snapshot_tables -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ temp_table }}\n {%- if not loop.last %} union all {% endif %}\n {%- endfor %}\n ),\n columns_snapshot_with_duplicates as (\n select *,\n row_number() over (partition by column_state_id order by detected_at desc) as row_number\n from union_temp_columns_snapshot\n )\n select\n column_state_id,\n full_column_name,\n full_table_name,\n column_name,\n data_type,\n is_new,\n detected_at\n from columns_snapshot_with_duplicates\n where row_number = 1\n {%- endset %}\n {{ return(union_temp_query) }}\n {%- endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2568552, "supported_languages": null }, "macro.elementary.union_metrics_query": { "name": "union_metrics_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "unique_id": "macro.elementary.union_metrics_query", "macro_sql": "{% macro union_metrics_query(temp_metrics_tables) %}\n {%- if temp_metrics_tables | length > 0 %}\n {%- set union_temp_query -%}\n with union_temps_metrics as (\n {%- for temp_table in temp_metrics_tables -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ temp_table }}\n {%- if not loop.last %} union all {% endif %}\n {%- endfor %}\n ),\n metrics_with_duplicates as (\n select *,\n row_number() over (partition by id order by updated_at desc) as row_number\n from union_temps_metrics\n )\n select\n id,\n full_table_name,\n column_name,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n updated_at,\n dimension,\n dimension_value\n from metrics_with_duplicates\n where row_number = 1\n {%- endset %}\n {{ return(union_temp_query) }}\n {%- endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.258502, "supported_languages": null }, "macro.elementary.init_elementary_graph": { "name": "init_elementary_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_start/init_elementary_graph.sql", "original_file_path": "macros/edr/tests/on_run_start/init_elementary_graph.sql", "unique_id": "macro.elementary.init_elementary_graph", "macro_sql": "{% macro init_elementary_graph() %}\n {% do graph.setdefault(\"elementary\", {\n \"elementary_test_results\": {},\n \"tests_schema_name\": none,\n \"tables\": {\n \"metrics\": [],\n \"schema_snapshots\": []\n }\n }) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.259249, "supported_languages": null }, "macro.elementary.create_elementary_tests_schema": { "name": "create_elementary_tests_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "unique_id": "macro.elementary.create_elementary_tests_schema", "macro_sql": "{% macro create_elementary_tests_schema() %}\n {% if execute and flags.WHICH in ['test', 'build'] %}\n {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n {%- if tests_schema_name != schema_name and not adapter.check_schema_exists(database_name, tests_schema_name) %}\n {{ elementary.edr_log(\"Creating Elementary's tests schema.\") }}\n {% set schema_relation = api.Relation.create(database=database_name, schema=tests_schema_name).without_identifier() %}\n {%- do dbt.create_schema(schema_relation) %}\n {% do adapter.commit() %}\n {%- endif %}\n {% endif %}\n {{ return('') }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.edr_log", "macro.dbt.create_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2611938, "supported_languages": null }, "macro.elementary.get_elementary_tests_schema": { "name": "get_elementary_tests_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_tests_schema.sql", "unique_id": "macro.elementary.get_elementary_tests_schema", "macro_sql": "{% macro get_elementary_tests_schema(elementary_database, elementary_schema) %}\n {% set LEGACY_TESTS_SCHEMA_SUFFIX = \"__tests\" %}\n\n {% set cached_tests_schema_name = elementary.get_cache(\"tests_schema_name\") %}\n {% if cached_tests_schema_name is not none %}\n {{ return(cached_tests_schema_name) }}\n {% endif %}\n\n {% set tests_schema_suffix = elementary.get_config_var('tests_schema_name') %}\n {% set tests_schema_name = elementary_schema ~ tests_schema_suffix %}\n\n {# Backward compatibility - if a tests schema suffix is not defined, but the legacy tests schema exists in the DB,\n then use it #}\n {% if not tests_schema_suffix %}\n {% set legacy_tests_schema_name = elementary_schema ~ LEGACY_TESTS_SCHEMA_SUFFIX %}\n {% if adapter.check_schema_exists(elementary_database, legacy_tests_schema_name) %}\n {% set tests_schema_name = legacy_tests_schema_name %}\n {% endif %}\n {% endif %}\n\n {% do elementary.set_cache(\"tests_schema_name\", tests_schema_name) %}\n\n {{ return(tests_schema_name) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_cache", "macro.elementary.get_config_var", "macro.elementary.set_cache" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2632804, "supported_languages": null }, "macro.elementary.get_model_graph_node": { "name": "get_model_graph_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "unique_id": "macro.elementary.get_model_graph_node", "macro_sql": "{% macro get_model_graph_node(model_relation) %}\n {% if execute %}\n {# model here is actually the test node in the graph #}\n {% set test_graph_node = model %}\n {% set test_depends_on_unique_ids = test_graph_node.depends_on.nodes %}\n {# model relation is the relation object of the model where the test is defined #}\n {% set relation_name = model_relation.name | lower %}\n {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n {% if depends_on_nodes %}\n {% for node in depends_on_nodes %}\n {% set node_name = node.name | lower %}\n {% set node_alias = node.get('alias', '') | lower %}\n {% set node_identifier = node.get('identifier', '') | lower %}\n {% if node_name == relation_name or node_alias == relation_name or node_identifier == relation_name %}\n {{ return(node) }}\n {% endif %}\n {% endfor %}\n {% endif %}\n {% endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_nodes_by_unique_ids" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2657406, "supported_languages": null }, "macro.elementary.create_elementary_test_table": { "name": "create_elementary_test_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/create_elementary_test_table.sql", "original_file_path": "macros/edr/tests/test_utils/create_elementary_test_table.sql", "unique_id": "macro.elementary.create_elementary_test_table", "macro_sql": "{% macro create_elementary_test_table(database_name, schema_name, test_name, table_type, sql_query, is_temp_table=False) %}\n {% if execute %}\n {% set temp_table_name = elementary.table_name_with_suffix(test_name, \"__\" ~ table_type) %}\n {{ elementary.debug_log(table_type ~ ' table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_table_name) }}\n\n {% set _, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n schema=schema_name,\n identifier=temp_table_name,\n type='table') -%}\n {% if is_temp_table %}\n {% set temp_table_relation = dbt.make_temp_relation(temp_table_relation) %}\n {% endif %}\n\n {# Cache the test table for easy access later #}\n {% set cache_key = \"elementary_test_table|\" ~ test_name ~ \"|\" ~ table_type %}\n {% do elementary.set_cache(cache_key, temp_table_relation) %}\n\n {# Create the table if it doesn't exist #}\n {%- do elementary.create_or_replace(is_temp_table, temp_table_relation, sql_query) %}\n\n {{ return(temp_table_relation) }}\n {% endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.table_name_with_suffix", "macro.elementary.debug_log", "macro.dbt.get_or_create_relation", "macro.dbt.make_temp_relation", "macro.elementary.set_cache", "macro.elementary.create_or_replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2683823, "supported_languages": null }, "macro.elementary.get_model_baseline_columns": { "name": "get_model_baseline_columns", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_model_baseline_columns.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_baseline_columns.sql", "unique_id": "macro.elementary.get_model_baseline_columns", "macro_sql": "{% macro get_model_baseline_columns(model, enforce_types=False) %}\n {# Get baseline columns #}\n {% set model_relation = dbt.load_relation(model) %}\n {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n\n {% set baseline = [] %}\n {% set columns_without_types = [] %}\n {% for column in model_graph_node[\"columns\"].values() %}\n {% set column_info = {\"column_name\": column[\"name\"], \"data_type\": column.get(\"data_type\")} %}\n {% if column_info[\"data_type\"] is none %}\n {% do columns_without_types.append(column_info[\"column_name\"]) %}\n {% endif %}\n {% do baseline.append(column_info) %}\n {% endfor %}\n \n {% if columns_without_types %}\n {% if enforce_types %}\n {% do exceptions.raise_compiler_error(\"Data type not defined for columns `{}` on model `{}` for schema change from baseline test\".format(columns_without_types, model)) %}\n {% else %}\n {% do elementary.edr_log(\"Warning - missing data types for columns: \" ~ columns_without_types) %}\n {% endif %}\n {% endif %}\n\n {% do return(baseline) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.edr_log" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2714448, "supported_languages": null }, "macro.elementary.get_anomaly_query": { "name": "get_anomaly_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.get_anomaly_query", "macro_sql": "{%- macro get_anomaly_query(flattened_test=none) -%}\n {%- set query -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from ({{ elementary.get_read_anomaly_scores_query(flattened_test) }}) results\n where is_anomalous = true\n {%- endset -%}\n {{- return(query) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.get_read_anomaly_scores_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2740068, "supported_languages": null }, "macro.elementary.get_read_anomaly_scores_query": { "name": "get_read_anomaly_scores_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.get_read_anomaly_scores_query", "macro_sql": "{% macro get_read_anomaly_scores_query(flattened_test=none) %}\n {% if not flattened_test %}\n {% set flattened_test = elementary.flatten_test(model) %}\n {% endif %}\n\n {% set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=flattened_test.test_params.sensitivity) %}\n {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=flattened_test.test_params.backfill_days) %}\n {%- set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n {%- set anomaly_query -%}\n with anomaly_scores as (\n select\n *,\n {{ elementary.anomaly_detection_description() }}\n from {{ elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'anomaly_scores') }}\n ),\n anomaly_scores_with_is_anomalous as (\n select\n *,\n case when\n anomaly_score is not null and\n {{ elementary.is_score_anomalous_condition(sensitivity) }} and\n bucket_end >= {{ elementary.timeadd('day', backfill_period, elementary.quote(elementary.get_max_bucket_end())) }} and\n training_set_size >= {{ elementary.get_config_var('min_training_set_size') }}\n then TRUE else FALSE end as is_anomalous\n from anomaly_scores\n )\n\n select\n metric_value as value,\n training_avg as average,\n case when is_anomalous = TRUE then\n lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n else min_metric_value end as min_value,\n case when is_anomalous = TRUE then\n lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n else max_metric_value end as max_value,\n bucket_start as start_time,\n bucket_end as end_time,\n *\n from anomaly_scores_with_is_anomalous\n order by bucket_end, dimension_value\n {%- endset -%}\n {{- return(anomaly_query) -}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.flatten_test", "macro.elementary.get_test_argument", "macro.elementary.anomaly_detection_description", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.is_score_anomalous_condition", "macro.elementary.timeadd", "macro.elementary.quote", "macro.elementary.get_max_bucket_end", "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2760007, "supported_languages": null }, "macro.elementary.is_score_anomalous_condition": { "name": "is_score_anomalous_condition", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.is_score_anomalous_condition", "macro_sql": "\n\n{%- macro is_score_anomalous_condition(sensitivity) -%}\n {%- set spikes_only_metrics = ['freshness', 'event_freshness'] -%}\n\n case when metric_name IN {{ elementary.strings_list_to_tuple(spikes_only_metrics) }} then\n anomaly_score > {{ sensitivity }}\n else\n abs(anomaly_score) > {{ sensitivity }}\n end\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.elementary.strings_list_to_tuple" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2765493, "supported_languages": null }, "macro.elementary.get_test_unique_id": { "name": "get_test_unique_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "unique_id": "macro.elementary.get_test_unique_id", "macro_sql": "{% macro get_test_unique_id() %}\n {% set test_unique_id = model.get('unique_id') %}\n {{ return(test_unique_id) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.277064, "supported_languages": null }, "macro.elementary.get_timestamp_column": { "name": "get_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "original_file_path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "unique_id": "macro.elementary.get_timestamp_column", "macro_sql": "{% macro get_timestamp_column(timestamp_column, model_node) %}\n {% if timestamp_column %}\n {{ return(timestamp_column) }}\n {% else %}\n {% set elementary_config = elementary.get_elementary_config_from_node(model_node) %}\n {% if elementary_config and elementary_config is mapping %}\n {{ return(elementary_config.get('timestamp_column')) }}\n {% endif %}\n {% endif %}\n {{- return(none) -}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_elementary_config_from_node" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2782774, "supported_languages": null }, "macro.elementary.run_python": { "name": "run_python", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/run_python.sql", "original_file_path": "macros/edr/tests/test_utils/run_python.sql", "unique_id": "macro.elementary.run_python", "macro_sql": "{% macro run_python(graph_node, code) %}\n {% set macro_stack = context_macro_stack.call_stack %}\n {% set macro_stack_copy = macro_stack.copy() %}\n {% do macro_stack.clear() %}\n {% do macro_stack.extend([[\"materialization\"], \"macro.dbt.statement\"]) %}\n {% do submit_python_job(graph_node, code) %}\n {% do macro_stack.clear() %}\n {% do macro_stack.extend(macro_stack_copy) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2795124, "supported_languages": null }, "macro.elementary.snowflake__compile_py_code": { "name": "snowflake__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.snowflake__compile_py_code", "macro_sql": "{% macro snowflake__compile_py_code(model, py_code, output_table, code_type) %}\nimport pandas\nimport snowflake.snowpark\n\n{{ py_code }}\n\ndef write_output_table(session, output_df, target_relation):\n output_df.write.mode('overwrite').save_as_table(target_relation, table_type='temporary')\n\ndef get_fail_count(test_output):\n if isinstance(test_output, int):\n return test_output\n if isinstance(test_output, bool):\n return 0 if test_output else 1\n if isinstance(test_output, snowflake.snowpark.DataFrame):\n return test_output.count()\n if isinstance(test_output, pandas.DataFrame):\n return len(test_output)\n raise ValueError('Received invalid return value, expected either DataFrame or a boolean.')\n\ndef get_output_df(model_df, code_type, ref, session):\n if code_type == \"test\":\n test_output = test(model_df, ref, session)\n fail_count = get_fail_count(test_output)\n return session.createDataFrame([[fail_count]], ['fail_count'])\n elif code_type == \"function\":\n res = func(model_df, ref, session)\n return session.createDataFrame([[res]], ['result'])\n\n raise Exception(\"Unsupported code type: {}\".format(code_type))\n\ndef main(session):\n ref = session.table\n model_df = ref('{{ model }}')\n output_df = get_output_df(model_df, '{{ code_type }}', ref, session)\n write_output_table(session, output_df, '{{ output_table }}')\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2811222, "supported_languages": null }, "macro.elementary.bigquery__compile_py_code": { "name": "bigquery__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.bigquery__compile_py_code", "macro_sql": "{% macro bigquery__compile_py_code(model, py_code, output_table, code_type) %}\nimport pandas\nimport pyspark.sql\n\n{{ py_code }}\n\ndef write_output_table(session, output_df, target_relation):\n output_df.write.mode('overwrite').format('bigquery').option('writeMethod', 'direct').option('writeDisposition', 'WRITE_TRUNCATE').save(target_relation)\n\ndef get_fail_count(test_output):\n if isinstance(test_output, int):\n return test_output\n if isinstance(test_output, bool):\n return 0 if test_output else 1\n if isinstance(test_output, pyspark.sql.DataFrame):\n return test_output.count()\n if isinstance(test_output, pandas.DataFrame):\n return len(test_output)\n raise ValueError('Received invalid return value, expected either DataFrame or a boolean.')\n\ndef get_session():\n session = pyspark.sql.SparkSession.builder.appName('Elementary').getOrCreate()\n session.conf.set('viewsEnabled', 'true')\n session.conf.set('temporaryGcsBucket', '{{ target.gcs_bucket }}')\n return session\n\ndef get_output_df(model_df, code_type, ref, session):\n if code_type == \"test\":\n test_output = test(model_df, ref, session)\n fail_count = get_fail_count(test_output)\n return session.createDataFrame([[fail_count]], ['fail_count'])\n elif code_type == \"function\":\n res = func(model_df, ref, session)\n return session.createDataFrame([[res]], ['result'])\n\n raise Exception(\"Unsupported code type: {}\".format(code_type))\n\ndef main():\n session = get_session()\n ref = session.read.format('bigquery').load\n model_df = ref('{{ model }}')\n output_df = get_output_df(model_df, '{{ code_type }}', ref, session)\n write_output_table(session, output_df, '{{ output_table }}')\n\nmain()\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2817533, "supported_languages": null }, "macro.elementary.default__compile_py_code": { "name": "default__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.default__compile_py_code", "macro_sql": "{% macro default__compile_py_code(model, py_code, output_table, code_type) %}\n {{ exceptions.raise_compiler_error(\"Elementary's Python tests are not yet supported on %s.\" % target.type) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2821736, "supported_languages": null }, "macro.elementary.get_elementary_test_table": { "name": "get_elementary_test_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_test_table.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_test_table.sql", "unique_id": "macro.elementary.get_elementary_test_table", "macro_sql": "{% macro get_elementary_test_table(test_name, table_type) %}\n {% if execute %}\n {% set cache_key = \"elementary_test_table|\" ~ test_name ~ \"|\" ~ table_type %}\n {{ return(elementary.get_cache(cache_key)) }}\n {% endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_cache" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2830412, "supported_languages": null }, "macro.elementary.create_model_baseline_table": { "name": "create_model_baseline_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/create_model_baseline_table.sql", "original_file_path": "macros/edr/tests/test_utils/create_model_baseline_table.sql", "unique_id": "macro.elementary.create_model_baseline_table", "macro_sql": "{% macro create_model_baseline_table(baseline_columns, database_name, schema_name, test_name) %}\n {% set empty_table_query = elementary.empty_table([('column_name','string'),('data_type','string')]) %}\n {% set baseline_table_relation = elementary.create_elementary_test_table(database_name, schema_name,\n test_name | lower, 'schema_baseline',\n empty_table_query, is_temp_table=True) %}\n {% do elementary.insert_rows(baseline_table_relation, baseline_columns, should_commit=True) %}\n {% do return(baseline_table_relation) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.empty_table", "macro.elementary.create_elementary_test_table", "macro.elementary.insert_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2844663, "supported_languages": null }, "macro.elementary.get_elementary_test_table_name": { "name": "get_elementary_test_table_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_test_table_name.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_test_table_name.sql", "unique_id": "macro.elementary.get_elementary_test_table_name", "macro_sql": "{% macro get_elementary_test_table_name() %}\n {% set test_node = model %}\n {% set test_hash = test_node.unique_id.split(\".\")[-1] %}\n {% set test_name = test_node.name %}\n {% do return(\"test_{}_{}\".format(test_hash, test_name)) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2853847, "supported_languages": null }, "macro.elementary.find_normalized_data_type_for_column": { "name": "find_normalized_data_type_for_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "original_file_path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "unique_id": "macro.elementary.find_normalized_data_type_for_column", "macro_sql": "{% macro find_normalized_data_type_for_column(model_relation, column_name) %}\n\n{% set columns_from_relation = adapter.get_columns_in_relation(model_relation) %}\n{% if columns_from_relation and columns_from_relation is iterable %}\n {% for column_obj in columns_from_relation %}\n {% if column_obj.column | lower == column_name | lower %}\n {{ return(elementary.normalize_data_type(column_obj.dtype)) }}\n {% endif %}\n {% endfor %}\n{% endif %}\n{{ return(none) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.normalize_data_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2869627, "supported_languages": null }, "macro.elementary.get_test_execution_id": { "name": "get_test_execution_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "unique_id": "macro.elementary.get_test_execution_id", "macro_sql": "{% macro get_test_execution_id() %}\n {{ return(elementary.get_node_execution_id(model)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_node_execution_id" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.2874036, "supported_languages": null }, "macro.elementary.query_test_result_rows": { "name": "query_test_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.query_test_result_rows", "macro_sql": "{% macro query_test_result_rows(sample_limit=none) %}\n {% set query %}\n with test_results as (\n {{ sql }}\n )\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from test_results {% if sample_limit is not none %} limit {{ sample_limit }} {% endif %}\n {% endset %}\n {% do return(elementary.agate_to_dicts(dbt.run_query(query))) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.agate_to_dicts", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3193405, "supported_languages": null }, "macro.elementary.cache_elementary_test_results_rows": { "name": "cache_elementary_test_results_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.cache_elementary_test_results_rows", "macro_sql": "{% macro cache_elementary_test_results_rows(elementary_test_results_rows) %}\n {% do elementary.get_cache(\"elementary_test_results\").update({model.unique_id: elementary_test_results_rows}) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_cache" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.319796, "supported_languages": null }, "macro.elementary.handle_anomaly_test": { "name": "handle_anomaly_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_anomaly_test", "macro_sql": "{% macro handle_anomaly_test(flattened_test) %}\n {% set metrics_tables_cache = elementary.get_cache(\"tables\").get(\"metrics\") %}\n {% set metrics_table = elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'metrics') %}\n {% if metrics_table %}\n {% do metrics_tables_cache.append(metrics_table) %}\n {% endif %}\n\n {% set anomaly_scores_groups_rows = {} %}\n {% set anomaly_scores_rows = elementary.query_test_result_rows() %}\n {% for anomaly_scores_row in anomaly_scores_rows %}\n {% set anomaly_scores_group = (anomaly_scores_row.full_table_name, anomaly_scores_row.column_name, anomaly_scores_row.metric_name) %}\n {% do anomaly_scores_groups_rows.setdefault(anomaly_scores_group, []) %}\n {% do anomaly_scores_groups_rows[anomaly_scores_group].append(anomaly_scores_row) %}\n {% endfor %}\n\n {% set elementary_test_results_rows = [] %}\n {% for anomaly_scores_group, anomaly_scores_rows in anomaly_scores_groups_rows.items() %}\n {% do elementary.debug_log(\"Found {} anomaly scores for group {}.\".format(anomaly_scores_rows | length, anomaly_scores_group)) %}\n {% do elementary_test_results_rows.append(elementary.get_anomaly_test_result_row(flattened_test, anomaly_scores_rows)) %}\n {% endfor %}\n {% do elementary.cache_elementary_test_results_rows(elementary_test_results_rows) %}\n\n {% do context.update({\"sql\": elementary.get_anomaly_query(flattened_test)}) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_cache", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.query_test_result_rows", "macro.elementary.debug_log", "macro.elementary.get_anomaly_test_result_row", "macro.elementary.cache_elementary_test_results_rows", "macro.elementary.get_anomaly_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3225815, "supported_languages": null }, "macro.elementary.handle_schema_changes_test": { "name": "handle_schema_changes_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_schema_changes_test", "macro_sql": "{% macro handle_schema_changes_test(flattened_test) %}\n {% set schema_snapshots_tables_cache = elementary.get_cache(\"tables\").get(\"schema_snapshots\") %}\n {% set schema_snapshots_table = elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'schema_changes') %}\n {% if schema_snapshots_table %}\n {% do schema_snapshots_tables_cache.append(schema_snapshots_table) %}\n {% endif %}\n\n {% set elementary_test_results_rows = [] %}\n {% set schema_changes_rows = elementary.query_test_result_rows() %}\n {% for schema_changes_row in schema_changes_rows %}\n {% do elementary_test_results_rows.append(elementary.get_schema_changes_test_result_row(flattened_test, schema_changes_row, schema_changes_rows)) %}\n {% endfor %}\n {% do elementary.cache_elementary_test_results_rows(elementary_test_results_rows) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_cache", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.query_test_result_rows", "macro.elementary.get_schema_changes_test_result_row", "macro.elementary.cache_elementary_test_results_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.324109, "supported_languages": null }, "macro.elementary.handle_dbt_test": { "name": "handle_dbt_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_dbt_test", "macro_sql": "{% macro handle_dbt_test(flattened_test) %}\n {% set result_rows = elementary.query_test_result_rows(sample_limit=elementary.get_config_var('test_sample_row_count')) %}\n {% set elementary_test_results_row = elementary.get_dbt_test_result_row(flattened_test, result_rows) %}\n {% do elementary.cache_elementary_test_results_rows([elementary_test_results_row]) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.query_test_result_rows", "macro.elementary.get_config_var", "macro.elementary.get_dbt_test_result_row", "macro.elementary.cache_elementary_test_results_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3248427, "supported_languages": null }, "macro.elementary.get_elementary_test_type": { "name": "get_elementary_test_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_elementary_test_type", "macro_sql": "{% macro get_elementary_test_type(flattened_test) %}\n {% if flattened_test.test_namespace == \"elementary\" %}\n {% if flattened_test.short_name.endswith(\"anomalies\") %}\n {% do return(\"anomaly_detection\") %}\n {% elif flattened_test.short_name.startswith('schema_changes') %}\n {% do return(\"schema_change\") %}\n {% endif %}\n {% endif %}\n {% do return(\"dbt_test\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.325801, "supported_languages": null }, "macro.elementary.materialize_test": { "name": "materialize_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialize_test", "macro_sql": "{% macro materialize_test() %}\n {% if not elementary.is_elementary_enabled() %}\n {% do return(none) %}\n {% endif %}\n\n {% set flattened_test = elementary.flatten_test(model) %}\n {% set test_type = elementary.get_elementary_test_type(flattened_test) %}\n {% set test_type_handler_map = {\n \"anomaly_detection\": elementary.handle_anomaly_test,\n \"schema_change\": elementary.handle_schema_changes_test,\n \"dbt_test\": elementary.handle_dbt_test\n } %}\n {% set test_type_handler = test_type_handler_map.get(test_type) %}\n {% if not test_type_handler %}\n {% do exceptions.raise_compiler_error(\"Unknown test type: {}\".format(test_type)) %}\n {% endif %}\n {% do test_type_handler(flattened_test) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.is_elementary_enabled", "macro.elementary.flatten_test", "macro.elementary.get_elementary_test_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.327352, "supported_languages": null }, "macro.elementary.materialization_test_default": { "name": "materialization_test_default", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialization_test_default", "macro_sql": "{% materialization test, default %}\n {% do elementary.materialize_test() %}\n {{ return(dbt.materialization_test_default()) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.elementary.materialize_test", "macro.dbt.materialization_test_default" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3277795, "supported_languages": [ "sql" ] }, "macro.elementary.materialization_test_snowflake": { "name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialization_test_snowflake", "macro_sql": "{% materialization test, adapter=\"snowflake\" %}\n {% do elementary.materialize_test() %}\n {%- if dbt.materialization_test_snowflake -%}\n {{ return(dbt.materialization_test_snowflake()) }}\n {%- else -%}\n {{ return(dbt.materialization_test_default()) }}\n {%- endif -%}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.elementary.materialize_test", "macro.elementary.materialization_test_snowflake", "macro.dbt.materialization_test_default" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3284338, "supported_languages": [ "sql" ] }, "macro.elementary.get_anomaly_test_result_row": { "name": "get_anomaly_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_anomaly_test_result_row", "macro_sql": "{% macro get_anomaly_test_result_row(flattened_test, anomaly_scores_rows) %}\n {% set latest_row = anomaly_scores_rows[-1] %}\n {% set full_table_name = elementary.insensitive_get_dict_value(latest_row, 'full_table_name') %}\n {% set test_params = elementary.insensitive_get_dict_value(flattened_test, 'test_params') %}\n {% set sensitivity = elementary.insensitive_get_dict_value(test_params, 'sensitivity') or elementary.get_config_var('anomaly_sensitivity') %}\n {% set backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') or elementary.get_config_var('backfill_days') %}\n {% set timestamp_column = elementary.insensitive_get_dict_value(test_params, 'timestamp_column') %}\n {% set parent_model_unique_id = elementary.insensitive_get_dict_value(flattened_test, 'parent_model_unique_id') %}\n {% if not timestamp_column %}\n {% set parent_model_node = elementary.get_node(parent_model_unique_id) %}\n {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, parent_model_node) %}\n {% endif %}\n {% do test_params.update({'sensitivity': sensitivity, 'timestamp_column': timestamp_column, 'backfill_days': backfill_days}) %}\n {% set column_name = elementary.insensitive_get_dict_value(latest_row, 'column_name') %}\n {% set metric_name = elementary.insensitive_get_dict_value(latest_row, 'metric_name') %}\n {% set backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') %}\n {% set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n {% set test_unique_id = elementary.insensitive_get_dict_value(latest_row, 'test_unique_id') %}\n {% set has_anomaly_score = elementary.insensitive_get_dict_value(latest_row, 'anomaly_score') is not none %}\n {% if not has_anomaly_score %}\n {% do elementary.edr_log(\"Not enough data to calculate anomaly scores on `{}`\".format(test_unique_id)) %}\n {% endif %}\n {%- set test_results_query -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from ({{ sql }}) results\n where\n anomaly_score is not null and\n upper(full_table_name) = upper({{ elementary.const_as_string(full_table_name) }}) and\n metric_name = {{ elementary.const_as_string(metric_name) }}\n {%- if column_name %}\n and upper(column_name) = upper({{ elementary.const_as_string(column_name) }})\n {%- endif %}\n {%- endset -%}\n {% set test_results_description %}\n {% if has_anomaly_score %}\n {{ elementary.insensitive_get_dict_value(latest_row, 'anomaly_description') }}\n {% else %}\n Not enough data to calculate anomaly score.\n {% endif %}\n {% endset %}\n {% set failures = namespace(data=0) %}\n {% set filtered_anomaly_scores_rows = [] %}\n {% for row in anomaly_scores_rows %}\n {% if row.anomaly_score is not none %}\n {% do filtered_anomaly_scores_rows.append(row) %}\n {% if row.is_anomalous %}\n {% set failures.data = failures.data + 1 %}\n {% endif %}\n {% endif %}\n {% endfor %}\n {% set test_result_dict = {\n 'id': elementary.insensitive_get_dict_value(latest_row, 'id'),\n 'data_issue_id': elementary.insensitive_get_dict_value(latest_row, 'metric_id'),\n 'model_unique_id': parent_model_unique_id,\n 'column_name': column_name,\n 'test_type': 'anomaly_detection',\n 'test_sub_type': metric_name,\n 'test_results_description': test_results_description,\n 'other': elementary.insensitive_get_dict_value(latest_row, 'anomalous_value'),\n 'test_results_query': test_results_query,\n 'test_params': test_params,\n 'result_rows': elementary.render_result_rows(filtered_anomaly_scores_rows),\n 'failures': failures.data\n } %}\n {% set elementary_test_row = elementary.get_dbt_test_result_row(flattened_test) %}\n {% do elementary_test_row.update(test_result_dict) %}\n {% do return(elementary_test_row) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.insensitive_get_dict_value", "macro.elementary.get_config_var", "macro.elementary.get_node", "macro.elementary.get_timestamp_column", "macro.elementary.edr_log", "macro.elementary.const_as_string", "macro.elementary.render_result_rows", "macro.elementary.get_dbt_test_result_row" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3351302, "supported_languages": null }, "macro.elementary.get_schema_changes_test_result_row": { "name": "get_schema_changes_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_schema_changes_test_result_row", "macro_sql": "{% macro get_schema_changes_test_result_row(flattened_test, schema_changes_row, schema_changes_rows) %}\n {% set elementary_test_row = elementary.get_dbt_test_result_row(flattened_test, schema_changes_rows) %}\n {% do elementary_test_row.update(schema_changes_row) %}\n {% do return(elementary_test_row) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_dbt_test_result_row" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3358018, "supported_languages": null }, "macro.elementary.get_dbt_test_result_row": { "name": "get_dbt_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_dbt_test_result_row", "macro_sql": "{% macro get_dbt_test_result_row(flattened_test, result_rows=none) %}\n {% if not result_rows %}\n {% set result_rows = [] %}\n {% endif %}\n\n {% set test_execution_id = elementary.get_node_execution_id(flattened_test) %}\n {% set parent_model_unique_id = elementary.insensitive_get_dict_value(flattened_test, 'parent_model_unique_id') %}\n {% set parent_model = elementary.get_node(parent_model_unique_id) %}\n {% set parent_model_name = elementary.get_table_name_from_node(parent_model) %}\n {% set test_result_dict = {\n 'id': test_execution_id,\n 'data_issue_id': none,\n 'test_execution_id': test_execution_id,\n 'test_unique_id': elementary.insensitive_get_dict_value(flattened_test, 'unique_id'),\n 'model_unique_id': parent_model_unique_id,\n 'detected_at': elementary.insensitive_get_dict_value(flattened_test, 'generated_at'),\n 'database_name': elementary.insensitive_get_dict_value(flattened_test, 'database_name'),\n 'schema_name': elementary.insensitive_get_dict_value(flattened_test, 'schema_name'),\n 'table_name': parent_model_name,\n 'column_name': elementary.insensitive_get_dict_value(flattened_test, 'test_column_name'),\n 'test_type': elementary.get_elementary_test_type(flattened_test),\n 'test_sub_type': elementary.insensitive_get_dict_value(flattened_test, 'type'),\n 'other': none,\n 'owners': elementary.insensitive_get_dict_value(flattened_test, 'model_owners'),\n 'tags': elementary.insensitive_get_dict_value(flattened_test, 'model_tags') + elementary.insensitive_get_dict_value(flattened_test, 'tags'),\n 'test_results_query': elementary.get_compiled_code(flattened_test),\n 'test_name': elementary.insensitive_get_dict_value(flattened_test, 'name'),\n 'test_params': elementary.insensitive_get_dict_value(flattened_test, 'test_params'),\n 'severity': elementary.insensitive_get_dict_value(flattened_test, 'severity'),\n 'test_short_name': elementary.insensitive_get_dict_value(flattened_test, 'short_name'),\n 'test_alias': elementary.insensitive_get_dict_value(flattened_test, 'alias'),\n 'result_rows': elementary.render_result_rows(result_rows)\n }%}\n {% do return(test_result_dict) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_node_execution_id", "macro.elementary.insensitive_get_dict_value", "macro.elementary.get_node", "macro.elementary.get_table_name_from_node", "macro.elementary.get_elementary_test_type", "macro.elementary.get_compiled_code", "macro.elementary.render_result_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3393872, "supported_languages": null }, "macro.elementary.render_result_rows": { "name": "render_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.render_result_rows", "macro_sql": "{% macro render_result_rows(test_result_rows) %}\n {% if (tojson(test_result_rows) | length) < elementary.get_column_size() %}\n {% do return(test_result_rows) %}\n {% endif %}\n {% do return(none) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_column_size" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.340058, "supported_languages": null }, "macro.elementary.get_columns_changes_from_last_run_query": { "name": "get_columns_changes_from_last_run_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_columns_changes_from_last_run_query", "macro_sql": "{% macro get_columns_changes_from_last_run_query(full_table_name, temp_columns_snapshot_relation) %}\n {%- set previous_schema_time_query -%}\n (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n {%- endset %}\n\n {% set cur %}\n {# This is the current snapshot of the columns. #}\n select full_table_name, column_name, data_type, is_new, detected_at\n from {{ temp_columns_snapshot_relation }}\n {% endset %}\n\n {% set pre %}\n {# This is the previous snapshot of the columns. #}\n select full_table_name, column_name, data_type, detected_at\n from {{ ref('schema_columns_snapshot') }}\n where lower(full_table_name) = lower('{{ full_table_name }}')\n and detected_at = {{ previous_schema_time_query }}\n order by detected_at desc\n {% endset %}\n\n {{ elementary.get_columns_changes_query_generic(full_table_name, cur, pre) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_columns_changes_query_generic" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3438592, "supported_languages": null }, "macro.elementary.get_column_changes_from_baseline_query": { "name": "get_column_changes_from_baseline_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_column_changes_from_baseline_query", "macro_sql": "{% macro get_column_changes_from_baseline_query(full_table_name, model_baseline_relation, include_added=False) %}\n {% set cur %}\n with baseline as (\n select lower(column_name) as column_name, data_type\n from {{ model_baseline_relation }}\n )\n\n select\n info_schema.full_table_name,\n lower(info_schema.column_name) as column_name,\n info_schema.data_type,\n (baseline.column_name IS NULL) as is_new,\n {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at\n from {{ ref('filtered_information_schema_columns') }} info_schema\n left join baseline on (\n lower(info_schema.column_name) = lower(baseline.column_name)\n )\n where lower(info_schema.full_table_name) = lower('{{ full_table_name }}')\n {% endset %}\n\n {% set pre %}\n select\n {{ elementary.const_as_string(full_table_name) }} as full_table_name,\n column_name,\n data_type,\n {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at\n from {{ model_baseline_relation }}\n {% endset %}\n\n {{ elementary.get_columns_changes_query_generic(full_table_name, cur, pre, include_added=include_added) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.const_as_string", "macro.elementary.get_columns_changes_query_generic" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3450205, "supported_languages": null }, "macro.elementary.get_columns_changes_query_generic": { "name": "get_columns_changes_query_generic", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_columns_changes_query_generic", "macro_sql": "{% macro get_columns_changes_query_generic(full_table_name, cur, pre, include_added=True) %}\n {%- set test_execution_id = elementary.get_test_execution_id() %}\n {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n with cur as (\n {{ cur }}\n ),\n\n pre as (\n {{ pre }}\n ),\n\n type_changes as (\n\n {# Finding the columns that have changed type. #}\n select\n cur.full_table_name,\n 'type_changed' as change,\n cur.column_name,\n cur.data_type as data_type,\n pre.data_type as pre_data_type,\n pre.detected_at\n from cur inner join pre\n on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n ),\n\n {% if include_added %}\n columns_added as (\n\n {# This is the columns that have been added. #}\n select\n full_table_name,\n 'column_added' as change,\n column_name,\n data_type,\n {{ elementary.null_string() }} as pre_data_type,\n detected_at as detected_at\n from cur\n where is_new = true\n\n ),\n {% endif %}\n\n columns_removed as (\n\n {# This is finding the columns that have been removed. #}\n select\n pre.full_table_name,\n 'column_removed' as change,\n pre.column_name as column_name,\n {{ elementary.null_string() }} as data_type,\n pre.data_type as pre_data_type,\n pre.detected_at as detected_at\n from pre left join cur\n on (cur.full_table_name = pre.full_table_name and lower(cur.column_name) = lower(pre.column_name))\n where cur.full_table_name is null and cur.column_name is null\n\n ),\n\n columns_removed_filter_deleted_tables as (\n\n {# This is filtering out the columns of tables that have been deleted. #}\n select\n removed.full_table_name,\n removed.change,\n removed.column_name,\n removed.data_type,\n removed.pre_data_type,\n removed.detected_at\n from columns_removed as removed join cur\n on (removed.full_table_name = cur.full_table_name)\n\n ),\n\n all_column_changes as (\n\n {# Combining the results of the three queries into one table. #}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from type_changes\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from columns_removed_filter_deleted_tables\n {% if include_added %}\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from columns_added\n {% endif %}\n ),\n\n column_changes_test_results as (\n\n {# This is the query that is creating the test results table, by formatting a description and adding id + detection time #}\n select\n {{ elementary.generate_surrogate_key(['full_table_name', 'column_name', 'change', 'detected_at']) }} as data_issue_id,\n {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at,\n {{ elementary.full_name_split('database_name') }},\n {{ elementary.full_name_split('schema_name') }},\n {{ elementary.full_name_split('table_name') }},\n column_name,\n 'schema_change' as test_type,\n change as test_sub_type,\n case\n when change = 'column_added'\n then 'The column \"' || column_name || '\" was added'\n when change= 'column_removed'\n then 'The column \"' || column_name || '\" was removed'\n when change= 'type_changed'\n then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n else NULL\n end as test_results_description\n from all_column_changes\n {{ dbt_utils.group_by(9) }}\n\n )\n\n {# Creating a unique id for each row in the table, and adding execution id #}\n select {{ elementary.generate_surrogate_key([\n 'data_issue_id',\n elementary.const_as_string(test_execution_id)\n ]) }} as id,\n {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n *\n from column_changes_test_results\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.null_string", "macro.elementary.generate_surrogate_key", "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.full_name_split", "macro.dbt_utils.group_by", "macro.elementary.const_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3474114, "supported_languages": null }, "macro.elementary.get_last_schema_changes_time": { "name": "get_last_schema_changes_time", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "unique_id": "macro.elementary.get_last_schema_changes_time", "macro_sql": "{% macro get_last_schema_changes_time() %}\n -- depends_on: {{ ref('elementary_test_results') }}\n {%- if execute -%}\n {%- set last_schema_changes_time_query %}\n select max(detected_at) as last_alert_time\n from {{ ref('elementary_test_results') }}\n where test_type = 'schema_change' and test_sub_type != 'table_added'\n {%- endset %}\n\n {%- set last_schema_changes_query_result = elementary.result_value(last_schema_changes_time_query) %}\n\n {%- if last_schema_changes_query_result %}\n {{ return(last_schema_changes_query_result) }}\n {%- else %}\n {{ return(none) }}\n {%- endif %}\n {%- endif -%}\n {{- return(none) -}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.result_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3488238, "supported_languages": null }, "macro.elementary.get_columns_snapshot_query": { "name": "get_columns_snapshot_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_snapshot_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_snapshot_query.sql", "unique_id": "macro.elementary.get_columns_snapshot_query", "macro_sql": "{% macro get_columns_snapshot_query(full_table_name) %}\n\n {%- set known_columns_query %}\n select full_column_name from {{ ref('schema_columns_snapshot') }}\n where detected_at = (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n and lower(full_table_name) = lower('{{ full_table_name }}')\n {% endset %}\n\n {%- set known_tables_query %}\n select distinct full_table_name from {{ ref('schema_columns_snapshot') }}\n where detected_at = (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n and lower(full_table_name) = lower('{{ full_table_name }}')\n {% endset %}\n\n\n with information_schema_columns as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('filtered_information_schema_columns') }}\n where lower(full_table_name) = lower('{{ full_table_name }}')\n\n ),\n\n columns_snapshot as (\n\n select\n full_table_name,\n database_name,\n schema_name,\n table_name,\n column_name,\n cast(data_type as {{ elementary.type_string() }}) as data_type,\n {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at,\n case when\n {{ elementary.full_column_name() }} not in ({{ known_columns_query }})\n and full_table_name in ({{ known_tables_query }})\n then true\n else false\n end as is_new\n from information_schema_columns\n\n ),\n\n columns_snapshot_with_id as (\n\n select\n {{ elementary.generate_surrogate_key([\n 'full_table_name',\n 'column_name',\n 'data_type'\n ]) }} as column_state_id,\n {{ elementary.full_column_name() }} as full_column_name,\n full_table_name,\n column_name,\n data_type,\n is_new,\n detected_at\n from columns_snapshot\n group by 1,2,3,4,5,6,7\n\n )\n\n select\n {{ elementary.cast_as_string('column_state_id') }} as column_state_id,\n {{ elementary.cast_as_string('full_column_name') }} as full_column_name,\n {{ elementary.cast_as_string('full_table_name') }} as full_table_name,\n {{ elementary.cast_as_string('column_name') }} as column_name,\n {{ elementary.cast_as_string('data_type') }} as data_type,\n {{ elementary.cast_as_bool('is_new') }} as is_new,\n {{ elementary.cast_as_timestamp('detected_at') }} as detected_at\n from columns_snapshot_with_id\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_string", "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.full_column_name", "macro.elementary.generate_surrogate_key", "macro.elementary.cast_as_string", "macro.elementary.cast_as_bool", "macro.elementary.cast_as_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3537326, "supported_languages": null }, "macro.elementary.get_anomaly_scores_query": { "name": "get_anomaly_scores_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "unique_id": "macro.elementary.get_anomaly_scores_query", "macro_sql": "{% macro get_anomaly_scores_query(test_metrics_table_relation, model_graph_node, sensitivity, backfill_days, monitors, column_name = none, columns_only = false, dimensions = none) %}\n\n {%- set full_table_name = elementary.model_node_to_full_name(model_graph_node) %}\n {%- set test_execution_id = elementary.get_test_execution_id() %}\n {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n {% if elementary.is_incremental_model(model_graph_node) %}\n {% set latest_full_refresh = elementary.get_latest_full_refresh(model_graph_node) %}\n {% else %}\n {% set latest_full_refresh = none %}\n {% endif %}\n\n {% set anomaly_scores_query %}\n\n with data_monitoring_metrics as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('data_monitoring_metrics') }}\n {# We use bucket_end because non-timestamp tests have only bucket_end field. #}\n where\n bucket_end >= {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_min_bucket_end())) }}\n {% if latest_full_refresh %}\n and updated_at > {{ elementary.cast_as_timestamp(elementary.quote(latest_full_refresh)) }}\n {% endif %}\n and upper(full_table_name) = upper('{{ full_table_name }}')\n and metric_name in {{ elementary.strings_list_to_tuple(monitors) }}\n {%- if column_name %}\n and upper(column_name) = upper('{{ column_name }}')\n {%- endif %}\n {%- if columns_only %}\n and column_name is not null\n {%- endif %}\n {% if dimensions %}\n and dimension = {{ elementary.quote(elementary.join_list(dimensions, '; ')) }}\n {% endif %}\n\n ),\n\n union_metrics as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from data_monitoring_metrics\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ test_metrics_table_relation }}\n\n ),\n\n grouped_metrics_duplicates as (\n\n select\n id,\n full_table_name,\n column_name,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n updated_at,\n dimension,\n dimension_value,\n row_number() over (partition by id order by updated_at desc) as row_number\n from union_metrics\n\n ),\n\n grouped_metrics as (\n\n select\n id as metric_id,\n full_table_name,\n column_name,\n dimension,\n dimension_value,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n updated_at\n from grouped_metrics_duplicates\n where row_number = 1\n\n ),\n\n time_window_aggregation as (\n\n select\n metric_id,\n full_table_name,\n column_name,\n dimension,\n dimension_value,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n updated_at,\n avg(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_avg,\n stddev(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_stddev,\n count(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_set_size,\n last_value(bucket_end) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) training_end,\n first_value(bucket_end) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_start\n from grouped_metrics\n {{ dbt_utils.group_by(12) }}\n ),\n\n anomaly_scores as (\n\n select\n {{ elementary.generate_surrogate_key([\n 'metric_id',\n elementary.const_as_string(test_execution_id)\n ]) }} as id,\n metric_id,\n {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n {{ elementary.current_timestamp_column() }} as detected_at,\n full_table_name,\n column_name,\n metric_name,\n case\n when training_stddev is null then null\n when training_stddev = 0 then 0\n else (metric_value - training_avg) / (training_stddev)\n end as anomaly_score,\n {{ sensitivity }} as anomaly_score_threshold,\n source_value as anomalous_value,\n bucket_start,\n bucket_end,\n metric_value,\n case \n when training_stddev is null then null\n else (-1) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{ sensitivity }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests training_stddev + training_avg\n end as min_metric_value,\n case \n when training_stddev is null then null\n else {{ sensitivity }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests training_stddev + training_avg \n end as max_metric_value,\n training_avg,\n training_stddev,\n training_set_size,\n training_start,\n training_end,\n dimension,\n dimension_value\n from time_window_aggregation\n where\n metric_value is not null\n and training_avg is not null\n )\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from anomaly_scores\n\n {% endset %}\n {{ return(anomaly_scores_query) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.model_node_to_full_name", "macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.is_incremental_model", "macro.elementary.get_latest_full_refresh", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.get_min_bucket_end", "macro.elementary.strings_list_to_tuple", "macro.elementary.join_list", "macro.dbt_utils.group_by", "macro.elementary.generate_surrogate_key", "macro.elementary.const_as_string", "macro.elementary.current_timestamp_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3627975, "supported_languages": null }, "macro.elementary.get_start_bucket_in_data": { "name": "get_start_bucket_in_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/get_start_bucket_in_data.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/get_start_bucket_in_data.sql", "unique_id": "macro.elementary.get_start_bucket_in_data", "macro_sql": "{% macro get_start_bucket_in_data(timestamp_column, min_bucket_start, time_bucket) %}\n {% set bucket_start_datediff_expr %}\n floor({{ elementary.timediff(time_bucket.period, min_bucket_start, elementary.cast_as_timestamp(timestamp_column)) }} / {{ time_bucket.count }}) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{ time_bucket.count }}\n {% endset %}\n {% do return(elementary.cast_as_timestamp(elementary.timeadd(time_bucket.period, elementary.cast_as_int(bucket_start_datediff_expr), min_bucket_start))) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.timediff", "macro.elementary.cast_as_timestamp", "macro.elementary.timeadd", "macro.elementary.cast_as_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.364015, "supported_languages": null }, "macro.elementary.dimension_monitoring_query": { "name": "dimension_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/dimension_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/dimension_monitoring_query.sql", "unique_id": "macro.elementary.dimension_monitoring_query", "macro_sql": "{% macro dimension_monitoring_query(monitored_table_relation, dimensions, where_expression, timestamp_column, min_bucket_start, time_bucket) %}\n {% set metric_name = 'dimension' %}\n {% set full_table_name_str = elementary.quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n {% set dimensions_string = elementary.join_list(dimensions, '; ') %}\n {% set concat_dimensions_sql_expression = elementary.list_concat_with_separator(dimensions, '; ') %}\n\n {% if timestamp_column %}\n with buckets as (\n select\n edr_bucket_start,\n edr_bucket_end,\n 1 as joiner\n from ({{ elementary.complete_buckets_cte(time_bucket) }}) results\n where edr_bucket_start >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n ),\n\n filtered_monitored_table as (\n select *,\n {{ concat_dimensions_sql_expression }} as dimension_value,\n {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, time_bucket) }} as start_bucket_in_data\n from {{ monitored_table_relation }}\n where\n {{ elementary.cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n and {{ elementary.cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n {% if where_expression %}\n and {{ where_expression }}\n {% endif %}\n ),\n\n {# Outdated dimension values are dimensions with all metrics of 0 in the range of the test time #}\n dimension_values_without_outdated as (\n select distinct \n dimension_value,\n sum(metric_value)\n from {{ ref('data_monitoring_metrics') }}\n where full_table_name = {{ full_table_name_str }}\n and metric_name = {{ elementary.quote(metric_name) }}\n and dimension = {{ elementary.quote(dimensions_string) }}\n and {{ elementary.cast_as_timestamp('bucket_end') }} >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n group by 1\n having sum(metric_value) > 0\n ),\n\n dimension_values_union as (\n select distinct *\n from (\n select distinct \n dimension_value,\n 1 as joiner\n from dimension_values_without_outdated\n union all\n select distinct\n dimension_value,\n 1 as joiner\n from filtered_monitored_table\n ) results\n ),\n\n {# Created buckets for each dimension value #}\n dimensions_buckets as (\n select edr_bucket_start, edr_bucket_end, dimension_value\n from buckets left join dimension_values_union on buckets.joiner = dimension_values_union.joiner\n ),\n\n {# Calculating the row count for each dimension value's #}\n filtered_row_count_values as (\n select \n start_bucket_in_data,\n {{ concat_dimensions_sql_expression }} as dimension_value, \n {{ elementary.cast_as_float(elementary.row_count()) }} as row_count_value\n from filtered_monitored_table\n {{ dbt_utils.group_by(2) }}\n ),\n\n {# Merging between the row count and the dimensions buckets #}\n {# This way we make sure that if a dimension has no rows in a day, it will get a metric with value 0 #}\n row_count_values as (\n select edr_bucket_start,\n edr_bucket_end,\n start_bucket_in_data,\n dimensions_buckets.dimension_value,\n case when start_bucket_in_data is null then\n 0\n else row_count_value end as row_count_value\n from dimensions_buckets left join filtered_row_count_values on (edr_bucket_start = start_bucket_in_data and dimensions_buckets.dimension_value = filtered_row_count_values.dimension_value)\n ),\n\n row_count as (\n select edr_bucket_start,\n edr_bucket_end,\n {{ elementary.const_as_string(metric_name) }} as metric_name,\n {{ elementary.null_string() }} as source_value,\n row_count_value as metric_value,\n {{ elementary.const_as_string(dimensions_string) }} as dimension,\n dimension_value\n from row_count_values\n ),\n\n metrics_final as (\n\n select\n {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n {{ elementary.null_string() }} as column_name,\n metric_name,\n {{ elementary.cast_as_float('metric_value') }} as metric_value,\n source_value,\n edr_bucket_start as bucket_start,\n edr_bucket_end as bucket_end,\n {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n dimension,\n dimension_value\n from\n row_count\n where (metric_value is not null and cast(metric_value as {{ elementary.type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n metric_value is null\n )\n\n {% else %}\n with filtered_monitored_table as (\n select *,\n {{ concat_dimensions_sql_expression }} as dimension_value\n from {{ monitored_table_relation }}\n {% if where_expression %}\n where {{ where_expression }}\n {% endif %}\n ),\n \n {# Get all of the dimension anomally metrics that were created for the test until this run #}\n last_dimension_metrics as (\n select \n bucket_end,\n dimension_value,\n metric_value\n from {{ ref('data_monitoring_metrics') }}\n where full_table_name = {{ full_table_name_str }}\n and metric_name = {{ elementary.quote(metric_name) }}\n and dimension = {{ elementary.quote(dimensions_string) }}\n and {{ elementary.cast_as_timestamp('bucket_end') }} >= {{ elementary.timeadd(time_bucket.period, time_bucket.count, elementary.cast_as_timestamp(min_bucket_start)) }}\n ),\n\n {# Outdated dimension values are dimensions with all metrics of 0 in the range of the test time #}\n dimension_values_without_outdated as (\n select\n bucket_end,\n dimension_value,\n metric_value\n from last_dimension_metrics\n where dimension_value in (\n select dimension_value\n from (\n select distinct \n dimension_value,\n sum(metric_value)\n from last_dimension_metrics\n group by 1\n having sum(metric_value) > 0\n ) results\n )\n ),\n \n\n dimension_values_union as (\n select distinct *\n from (\n select distinct \n dimension_value,\n 1 as joiner\n from dimension_values_without_outdated\n union all\n select distinct \n dimension_value,\n 1 as joiner\n from filtered_monitored_table\n ) results\n ),\n\n {# Create buckets for each day from max(first metric time, min bucket end) until max bucket end #}\n buckets as (\n select\n edr_bucket_start,\n edr_bucket_end,\n 1 as joiner\n from ({{ elementary.complete_buckets_cte(time_bucket) }}) results\n where edr_bucket_start >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n ),\n\n {# Get all of the metrics for all of the dimensions that were create for the test until this run, #}\n {# \"hydrated\" with metrics with value 0 for dimensions with no row count in the given time range. #}\n hydrated_last_dimension_metrics as (\n select \n edr_bucket_end as bucket_end,\n dimension_values_union.dimension_value as dimension_value,\n case when metric_value is not null then metric_value else 0 end as metric_value\n from buckets left join dimension_values_union on buckets.joiner = dimension_values_union.joiner\n left outer join dimension_values_without_outdated on (buckets.edr_bucket_end = dimension_values_without_outdated.bucket_end and dimension_values_union.dimension_value = dimension_values_without_outdated.dimension_value)\n ),\n\n {# Union between current row count for each dimension, and the \"hydrated\" metrics of the test until this run #}\n row_count as (\n select \n bucket_end,\n dimension_value,\n metric_value\n from hydrated_last_dimension_metrics\n union all\n select\n {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }} as bucket_end,\n {{ concat_dimensions_sql_expression }} as dimension_value,\n {{ elementary.row_count() }} as metric_value\n from {{ monitored_table_relation }}\n {% if where_expression %}\n where {{ where_expression }}\n {% endif %}\n {{ dbt_utils.group_by(2) }}\n ),\n\n metrics_final as (\n select\n {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n {{ elementary.null_string() }} as column_name,\n {{ elementary.const_as_string(metric_name) }} as metric_name,\n {{ elementary.cast_as_float('metric_value') }} as metric_value,\n {{ elementary.null_string() }} as source_value,\n {{ elementary.null_timestamp() }} as bucket_start,\n bucket_end,\n {{ elementary.null_int() }} as bucket_duration_hours,\n {{ elementary.const_as_string(dimensions_string) }} as dimension,\n dimension_value\n from row_count\n )\n {% endif %}\n\n select\n {{ elementary.generate_surrogate_key([\n 'full_table_name',\n 'column_name',\n 'metric_name',\n 'dimension',\n 'dimension_value',\n 'bucket_end'\n ]) }} as id,\n full_table_name,\n column_name,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n {{ elementary.current_timestamp_in_utc() }} as updated_at,\n dimension,\n dimension_value\n from metrics_final\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.quote", "macro.elementary.relation_to_full_name", "macro.elementary.join_list", "macro.elementary.list_concat_with_separator", "macro.elementary.complete_buckets_cte", "macro.elementary.cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.cast_as_float", "macro.elementary.row_count", "macro.dbt_utils.group_by", "macro.elementary.const_as_string", "macro.elementary.null_string", "macro.elementary.cast_as_string", "macro.elementary.timediff", "macro.elementary.type_int", "macro.elementary.get_config_var", "macro.elementary.timeadd", "macro.elementary.get_max_bucket_end", "macro.elementary.null_timestamp", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.current_timestamp_in_utc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.3780942, "supported_languages": null }, "macro.elementary.column_monitoring_query": { "name": "column_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "unique_id": "macro.elementary.column_monitoring_query", "macro_sql": "{% macro column_monitoring_query(monitored_table_relation, timestamp_column, min_bucket_start, column_obj, column_monitors, where_expression=none, time_bucket=none) %}\n\n {% set full_table_name_str = elementary.quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n\n with buckets as (\n select edr_bucket_start, edr_bucket_end from ({{ elementary.complete_buckets_cte(time_bucket) }}) results\n {% if min_bucket_start -%}\n where edr_bucket_start >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n {%- endif %}\n ),\n\n filtered_monitored_table as (\n select {{ column_obj.quoted }}\n {% if timestamp_column -%}\n , {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, time_bucket) }} as start_bucket_in_data\n {%- else %}\n , {{ elementary.null_timestamp() }} as start_bucket_in_data\n {%- endif %}\n from {{ monitored_table_relation }}\n where\n {% if timestamp_column -%}\n {{ elementary.cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n and {{ elementary.cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n {%- else %}\n true\n {%- endif %}\n {% if where_expression %} and {{ where_expression }} {% endif %}\n ),\n\n column_monitors as (\n\n {%- if column_monitors %}\n {%- set column = column_obj.quoted -%}\n select\n edr_bucket_start,\n edr_bucket_end,\n {{ elementary.const_as_string(column_obj.name) }} as edr_column_name,\n {%- if 'null_count' in column_monitors -%} {{ elementary.null_count(column) }} {%- else -%} null {% endif %} as null_count,\n {%- if 'null_percent' in column_monitors -%} {{ elementary.null_percent(column) }} {%- else -%} null {% endif %} as null_percent,\n {%- if 'max' in column_monitors -%} {{ elementary.max(column) }} {%- else -%} null {% endif %} as max,\n {%- if 'min' in column_monitors -%} {{ elementary.min(column) }} {%- else -%} null {% endif %} as min,\n {%- if 'average' in column_monitors -%} {{ elementary.average(column) }} {%- else -%} null {% endif %} as average,\n {%- if 'zero_count' in column_monitors -%} {{ elementary.zero_count(column) }} {%- else -%} null {% endif %} as zero_count,\n {%- if 'zero_percent' in column_monitors -%} {{ elementary.zero_percent(column) }} {%- else -%} null {% endif %} as zero_percent,\n {%- if 'standard_deviation' in column_monitors -%} {{ elementary.standard_deviation(column) }} {%- else -%} null {% endif %} as standard_deviation,\n {%- if 'variance' in column_monitors -%} {{ elementary.variance(column) }} {%- else -%} null {% endif %} as variance,\n {%- if 'max_length' in column_monitors -%} {{ elementary.max_length(column) }} {%- else -%} null {% endif %} as max_length,\n {%- if 'min_length' in column_monitors -%} {{ elementary.min_length(column) }} {%- else -%} null {% endif %} as min_length,\n {%- if 'average_length' in column_monitors -%} {{ elementary.average_length(column) }} {%- else -%} null {% endif %} as average_length,\n {%- if 'missing_count' in column_monitors -%} {{ elementary.missing_count(column) }} {%- else -%} null {% endif %} as missing_count,\n {%- if 'missing_percent' in column_monitors -%} {{ elementary.missing_percent(column) }} {%- else -%} null {% endif %} as missing_percent\n from filtered_monitored_table left join buckets on (edr_bucket_start = start_bucket_in_data)\n group by 1,2,3\n {%- else %}\n {{ elementary.empty_column_monitors_cte() }}\n {%- endif %}\n\n ),\n\n column_monitors_unpivot as (\n\n {%- if column_monitors %}\n {% for monitor in column_monitors %}\n select edr_column_name, edr_bucket_start, edr_bucket_end, {{ elementary.cast_as_string(elementary.quote(monitor)) }} as metric_name, {{ elementary.cast_as_float(monitor) }} as metric_value from column_monitors where {{ monitor }} is not null\n {% if not loop.last %} union all {% endif %}\n {%- endfor %}\n {%- else %}\n {{ elementary.empty_table([('edr_column_name','string'),('edr_bucket_start','timestamp'),('edr_bucket_end','timestamp'),('metric_name','string'),('metric_value','float')]) }}\n {%- endif %}\n\n ),\n\n metrics_final as (\n\n select\n {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n edr_column_name as column_name,\n metric_name,\n {{ elementary.cast_as_float('metric_value') }} as metric_value,\n {{ elementary.null_string() }} as source_value,\n {%- if timestamp_column %}\n edr_bucket_start as bucket_start,\n edr_bucket_end as bucket_end,\n {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n {%- else %}\n {{ elementary.null_timestamp() }} as bucket_start,\n {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }} as bucket_end,\n {{ elementary.null_int() }} as bucket_duration_hours,\n {%- endif %}\n {{ elementary.null_string() }} as dimension,\n {{ elementary.null_string() }} as dimension_value\n from column_monitors_unpivot\n\n )\n\n select\n {{ elementary.generate_surrogate_key([\n 'full_table_name',\n 'column_name',\n 'metric_name',\n 'bucket_end'\n ]) }} as id,\n full_table_name,\n column_name,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n {{ elementary.current_timestamp_in_utc() }} as updated_at,\n dimension,\n dimension_value\n from metrics_final\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.quote", "macro.elementary.relation_to_full_name", "macro.elementary.complete_buckets_cte", "macro.elementary.cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.null_timestamp", "macro.elementary.const_as_string", "macro.elementary.null_count", "macro.elementary.null_percent", "macro.elementary.max", "macro.elementary.min", "macro.elementary.average", "macro.elementary.zero_count", "macro.elementary.zero_percent", "macro.elementary.standard_deviation", "macro.elementary.variance", "macro.elementary.max_length", "macro.elementary.min_length", "macro.elementary.average_length", "macro.elementary.missing_count", "macro.elementary.missing_percent", "macro.elementary.empty_column_monitors_cte", "macro.elementary.cast_as_string", "macro.elementary.cast_as_float", "macro.elementary.empty_table", "macro.elementary.null_string", "macro.elementary.timediff", "macro.elementary.get_max_bucket_end", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.current_timestamp_in_utc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4010637, "supported_languages": null }, "macro.elementary.table_monitoring_query": { "name": "table_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.table_monitoring_query", "macro_sql": "{% macro table_monitoring_query(monitored_table_relation, timestamp_column, min_bucket_start, table_monitors, where_expression, time_bucket, metric_args) %}\n\n {% set full_table_name_str = elementary.quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n\n with monitored_table as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ monitored_table_relation }}\n {% if where_expression %}\n where {{ where_expression }}\n {% endif %}\n ),\n\n {% if timestamp_column %}\n buckets as (\n select edr_bucket_start, edr_bucket_end from ({{ elementary.complete_buckets_cte(time_bucket) }}) results\n where edr_bucket_start >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n ),\n\n time_filtered_monitored_table as (\n select *,\n {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, time_bucket) }} as start_bucket_in_data\n from monitored_table\n where\n {{ elementary.cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n and {{ elementary.cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n ),\n {% endif %}\n\n metrics as (\n {{ elementary.get_unified_metrics_query(metrics=table_monitors,\n metric_args=metric_args,\n timestamp_column=timestamp_column) }}\n ),\n\n {% if timestamp_column %}\n metrics_final as (\n\n select\n {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n {{ elementary.null_string() }} as column_name,\n metric_name,\n {{ elementary.cast_as_float('metric_value') }} as metric_value,\n source_value,\n edr_bucket_start as bucket_start,\n edr_bucket_end as bucket_end,\n {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n {{ elementary.null_string() }} as dimension,\n {{ elementary.null_string() }} as dimension_value\n from\n metrics\n where (metric_value is not null and cast(metric_value as {{ elementary.type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n metric_value is null\n )\n {% else %}\n metrics_final as (\n\n select\n {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n {{ elementary.null_string() }} as column_name,\n metric_name,\n {{ elementary.cast_as_float('metric_value') }} as metric_value,\n {{ elementary.null_string() }} as source_value,\n {{ elementary.null_timestamp() }} as bucket_start,\n {{ elementary.cast_as_timestamp(elementary.quote(elementary.get_max_bucket_end())) }} as bucket_end,\n {{ elementary.null_int() }} as bucket_duration_hours,\n {{ elementary.null_string() }} as dimension,\n {{ elementary.null_string() }} as dimension_value\n from metrics\n\n )\n {% endif %}\n\n select\n {{ elementary.generate_surrogate_key([\n 'full_table_name',\n 'column_name',\n 'metric_name',\n 'bucket_end'\n ]) }} as id,\n full_table_name,\n column_name,\n metric_name,\n metric_value,\n source_value,\n bucket_start,\n bucket_end,\n bucket_duration_hours,\n {{ elementary.current_timestamp_in_utc() }} as updated_at,\n dimension,\n dimension_value\n from metrics_final\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.quote", "macro.elementary.relation_to_full_name", "macro.elementary.complete_buckets_cte", "macro.elementary.cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.get_unified_metrics_query", "macro.elementary.cast_as_string", "macro.elementary.null_string", "macro.elementary.cast_as_float", "macro.elementary.timediff", "macro.elementary.type_int", "macro.elementary.get_config_var", "macro.elementary.null_timestamp", "macro.elementary.get_max_bucket_end", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.current_timestamp_in_utc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4242742, "supported_languages": null }, "macro.elementary.get_unified_metrics_query": { "name": "get_unified_metrics_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.get_unified_metrics_query", "macro_sql": "{% macro get_unified_metrics_query(metrics, metric_args, timestamp_column=none) %}\n {%- set included_monitors = {} %}\n {%- for metric_name in metrics %}\n {%- set metric_query = elementary.get_metric_query(metric_name, metric_args, timestamp_column=timestamp_column) %}\n {%- if metric_query %}\n {% do included_monitors.update({metric_name: metric_query}) %}\n {%- endif %}\n {%- endfor %}\n\n {% if not included_monitors %}\n {% if timestamp_column %}\n {% do return(elementary.empty_table([('edr_bucket_start','timestamp'),('edr_bucket_end','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')])) %}\n {% else %}\n {% do return(elementary.empty_table([('metric_name','string'),('metric_value','int')])) %}\n {% endif %}\n {% endif %}\n\n with\n {%- for metric_name, metric_query in included_monitors.items() %}\n {{ metric_name }} as (\n {{ metric_query }}\n ){% if not loop.last %},{% endif %}\n {%- endfor %}\n\n {%- for metric_name in included_monitors %}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ metric_name }}\n {% if not loop.last %} union all {% endif %}\n {%- endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_metric_query", "macro.elementary.empty_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4270086, "supported_languages": null }, "macro.elementary.get_metric_query": { "name": "get_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.get_metric_query", "macro_sql": "{% macro get_metric_query(metric_name, metric_args, timestamp_column) %}\n {%- set metrics_macro_mapping = {\n \"row_count\": elementary.row_count_metric_query,\n \"freshness\": elementary.freshness_metric_query,\n \"event_freshness\": elementary.event_freshness_metric_query\n } %}\n\n {%- set metric_macro = metrics_macro_mapping.get(metric_name) %}\n {%- if not metric_macro %}\n {%- do return(none) %}\n {%- endif %}\n\n {%- set metric_query = metric_macro(metric_args, timestamp_column=timestamp_column) %}\n {%- if not metric_query %}\n {%- do return(none) %}\n {%- endif %}\n\n {{ metric_query }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4282572, "supported_languages": null }, "macro.elementary.row_count_metric_query": { "name": "row_count_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.row_count_metric_query", "macro_sql": "{% macro row_count_metric_query(metric_args, timestamp_column=none) %}\n{% if timestamp_column %}\n with row_count_values as (\n select edr_bucket_start,\n edr_bucket_end,\n start_bucket_in_data,\n case when start_bucket_in_data is null then\n 0\n else {{ elementary.cast_as_float(elementary.row_count()) }} end as row_count_value\n from buckets left join time_filtered_monitored_table on (edr_bucket_start = start_bucket_in_data)\n group by 1,2,3\n )\n\n select edr_bucket_start,\n edr_bucket_end,\n {{ elementary.const_as_string('row_count') }} as metric_name,\n {{ elementary.null_string() }} as source_value,\n row_count_value as metric_value\n from row_count_values\n{% else %}\n select\n {{ elementary.const_as_string('row_count') }} as metric_name,\n {{ elementary.row_count() }} as metric_value\n from monitored_table\n group by 1\n{% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_float", "macro.elementary.row_count", "macro.elementary.const_as_string", "macro.elementary.null_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4291854, "supported_languages": null }, "macro.elementary.freshness_metric_query": { "name": "freshness_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.freshness_metric_query", "macro_sql": "{% macro freshness_metric_query(metric_args, timestamp_column=none) %}\n{% if timestamp_column %}\n {%- set freshness_column = metric_args.freshness_column %}\n {%- if not freshness_column %}\n {%- set freshness_column = timestamp_column %}\n {%- endif %}\n\n -- get ordered consecutive update timestamps in the source data\n with unique_timestamps as (\n select distinct {{ elementary.cast_as_timestamp(freshness_column) }} as timestamp_val\n from monitored_table\n order by 1\n ),\n\n -- compute freshness for every update as the time difference from the previous update\n consecutive_updates_freshness as (\n select\n timestamp_val as update_timestamp,\n {{ elementary.timediff('second', 'lag(timestamp_val) over (order by timestamp_val)', 'timestamp_val') }} as freshness\n from unique_timestamps\n where timestamp_val >= (select min(edr_bucket_start) from buckets)\n ),\n\n -- divide the freshness metrics above to buckets\n bucketed_consecutive_updates_freshness as (\n select\n edr_bucket_start, edr_bucket_end, update_timestamp, freshness\n from buckets cross join consecutive_updates_freshness\n where update_timestamp >= edr_bucket_start AND update_timestamp < edr_bucket_end\n ),\n\n -- we also want to record the freshness at the end of each bucket as an additional point. By this we mean\n -- the time that passed since the last update in the bucket and the end of the bucket.\n bucket_end_freshness as (\n select\n edr_bucket_start,\n edr_bucket_end,\n max(timestamp_val) as update_timestamp,\n {{ elementary.timediff('second', elementary.cast_as_timestamp('max(timestamp_val)'), \"least(edr_bucket_end, {})\".format(elementary.current_timestamp_column())) }} as freshness\n from buckets cross join unique_timestamps\n where timestamp_val < edr_bucket_end\n group by 1,2\n ),\n\n -- create a single table with all the freshness values\n bucket_all_freshness_metrics as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from bucketed_consecutive_updates_freshness\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from bucket_end_freshness\n ),\n\n -- get all the freshness values, ranked by size (we use partition by and not group by, because we also want to have\n -- the associated timestamp as source value)\n bucket_freshness_ranked as (\n select\n *,\n rank () over (partition by edr_bucket_end order by freshness desc) as rank\n from bucket_all_freshness_metrics\n )\n\n select\n edr_bucket_start,\n edr_bucket_end,\n {{ elementary.const_as_string('freshness') }} as metric_name,\n {{ elementary.cast_as_string('update_timestamp') }} as source_value,\n freshness as metric_value\n from bucket_freshness_ranked\n where rank = 1\n{% else %}\n {# Update freshness test not supported when timestamp column is not provided #}\n {# TODO: We can enhance this test for models to use model_run_results in case a timestamp column is not defined #}\n {% do return(none) %}\n{% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_timestamp", "macro.elementary.timediff", "macro.elementary.current_timestamp_column", "macro.elementary.const_as_string", "macro.elementary.cast_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4309068, "supported_languages": null }, "macro.elementary.event_freshness_metric_query": { "name": "event_freshness_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.event_freshness_metric_query", "macro_sql": "{% macro event_freshness_metric_query(metric_args, timestamp_column) %}\n{% set event_timestamp_column = metric_args.event_timestamp_column %}\n{% set update_timestamp_column = timestamp_column %}\n\n{% if update_timestamp_column %}\n select\n edr_bucket_start,\n edr_bucket_end,\n {{ elementary.const_as_string('event_freshness') }} as metric_name,\n {{ elementary.cast_as_string('max({})'.format(event_timestamp_column)) }} as source_value,\n {{ 'coalesce(max({}), {})'.format(\n elementary.timediff('second', elementary.cast_as_timestamp(event_timestamp_column), elementary.cast_as_timestamp(update_timestamp_column)),\n elementary.timediff('second', 'edr_bucket_start', 'edr_bucket_end')\n ) }} as metric_value\n from buckets left join time_filtered_monitored_table on (edr_bucket_start = start_bucket_in_data)\n group by 1,2\n{% else %}\n select\n {{ elementary.const_as_string('event_freshness') }} as metric_name,\n {{ elementary.timediff('second', elementary.cast_as_timestamp(\"max({})\".format(event_timestamp_column)), elementary.current_timestamp_column()) }} as metric_value\n from monitored_table\n group by 1\n{% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.const_as_string", "macro.elementary.cast_as_string", "macro.elementary.timediff", "macro.elementary.cast_as_timestamp", "macro.elementary.current_timestamp_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4325538, "supported_languages": null }, "macro.elementary.get_latest_full_refresh": { "name": "get_latest_full_refresh", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/get_latest_full_refresh.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/get_latest_full_refresh.sql", "unique_id": "macro.elementary.get_latest_full_refresh", "macro_sql": "{% macro get_latest_full_refresh(model_node) %}\n {% set query %}\n select generated_at from {{ ref('dbt_run_results') }}\n where\n unique_id = '{{ model_node.unique_id }}' and\n full_refresh = true\n order by generated_at desc\n limit 1\n {% endset %}\n {% do return(elementary.result_value(query)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.result_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.433368, "supported_languages": null }, "macro.elementary.get_min_bucket_start": { "name": "get_min_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_min_bucket_start", "macro_sql": "{% macro get_min_bucket_start() %}\n {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_run_started_at", "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4362867, "supported_languages": null }, "macro.elementary.get_min_bucket_end": { "name": "get_min_bucket_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_min_bucket_end", "macro_sql": "{% macro get_min_bucket_end() %}\n {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(elementary.get_config_var('days_back') - 1)).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_run_started_at", "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4368567, "supported_languages": null }, "macro.elementary.get_max_bucket_end": { "name": "get_max_bucket_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_max_bucket_end", "macro_sql": "{% macro get_max_bucket_end() %}\n {% do return(elementary.run_started_at_as_string()) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.run_started_at_as_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4371722, "supported_languages": null }, "macro.elementary.get_backfill_bucket_start": { "name": "get_backfill_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_backfill_bucket_start", "macro_sql": "{% macro get_backfill_bucket_start(backfill_days) %}\n {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(backfill_days)).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_run_started_at" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4376614, "supported_languages": null }, "macro.elementary.get_test_min_bucket_start": { "name": "get_test_min_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_test_min_bucket_start", "macro_sql": "{% macro get_test_min_bucket_start(model_graph_node, backfill_days, monitors=none, column_name=none) %}\n {%- set min_bucket_start = elementary.get_min_bucket_start() %}\n {% if not elementary.is_incremental_model(model_graph_node) %}\n {% do return(min_bucket_start) %}\n {% endif %}\n\n {%- set backfill_bucket_start = elementary.get_backfill_bucket_start(backfill_days) %}\n {% set full_table_name = elementary.model_node_to_full_name(model_graph_node) %}\n {%- if monitors %}\n {%- set monitors_tuple = elementary.strings_list_to_tuple(monitors) %}\n {%- endif %}\n\n {%- set min_bucket_start_query %}\n with min_times as (\n select min(last_bucket_end) as last_run,\n {{ elementary.cast_as_timestamp(elementary.quote(min_bucket_start)) }} as min_start,\n {{ elementary.cast_as_timestamp(elementary.quote(backfill_bucket_start)) }} as backfill_start\n from {{ ref('monitors_runs') }}\n where upper(full_table_name) = upper('{{ full_table_name }}')\n {%- if monitors %}\n and metric_name in {{ monitors_tuple }}\n {%- endif %}\n {%- if column_name %}\n and upper(column_name) = upper('{{ column_name }}')\n {%- endif %}\n )\n select\n case\n when last_run is null then min_start\n when last_run < backfill_start then last_run\n else backfill_start\n end as min_start\n from min_times\n {%- endset %}\n\n {%- set min_bucket_start_query_result = elementary.result_value(min_bucket_start_query) %}\n\n {%- if min_bucket_start_query_result %}\n {{ return(min_bucket_start_query_result) }}\n {%- else %}\n {{ return(min_bucket_start) }}\n {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_min_bucket_start", "macro.elementary.is_incremental_model", "macro.elementary.get_backfill_bucket_start", "macro.elementary.model_node_to_full_name", "macro.elementary.strings_list_to_tuple", "macro.elementary.cast_as_timestamp", "macro.elementary.quote", "macro.elementary.result_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4400437, "supported_languages": null }, "macro.elementary.get_column_obj_and_monitors": { "name": "get_column_obj_and_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_column_obj_and_monitors", "macro_sql": "{% macro get_column_obj_and_monitors(model_relation, column_name, column_tests=none) %}\n\n {%- set column_obj_and_monitors = [] %}\n {%- set column_objects = adapter.get_columns_in_relation(model_relation) -%}\n {%- for column_obj in column_objects %}\n {% if column_obj.name | lower == column_name | lower %}\n {%- set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n {%- set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n {{ return(column_item) }}\n {% endif %}\n {% endfor %}\n\n {{ return(none) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.column_monitors_by_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4434986, "supported_languages": null }, "macro.elementary.get_all_column_obj_and_monitors": { "name": "get_all_column_obj_and_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_all_column_obj_and_monitors", "macro_sql": "{% macro get_all_column_obj_and_monitors(model_relation, column_tests=none) %}\n\n {%- set column_obj_and_monitors = [] %}\n {%- set column_objects = adapter.get_columns_in_relation(model_relation) -%}\n\n {%- for column_obj in column_objects %}\n {%- set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n {%- set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n {%- do column_obj_and_monitors.append(column_item) -%}\n {% endfor %}\n\n {{ return(column_obj_and_monitors) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.column_monitors_by_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4446003, "supported_languages": null }, "macro.elementary.column_monitors_by_type": { "name": "column_monitors_by_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.column_monitors_by_type", "macro_sql": "{% macro column_monitors_by_type(data_type, column_tests=none) %}\n\n {%- set normalized_data_type = elementary.normalize_data_type(data_type) %}\n\n {%- set default_all_types = elementary.get_config_var('edr_monitors')['column_any_type'] | list %}\n {%- set default_numeric_monitors = elementary.get_config_var('edr_monitors')['column_numeric'] | list %}\n {%- set default_string_monitors = elementary.get_config_var('edr_monitors')['column_string'] | list %}\n\n {# if column_tests is null, default is to use all relevant monitors for this data type #}\n {%- if column_tests %}\n {%- set monitors_list = column_tests %}\n {%- else %}\n {% set monitors_list = [] %}\n {% do monitors_list.extend(default_all_types) %}\n {% do monitors_list.extend(default_numeric_monitors) %}\n {% do monitors_list.extend(default_string_monitors) %}\n {%- endif %}\n\n {%- set column_monitors = [] %}\n {%- set all_types_intersect = elementary.lists_intersection(monitors_list, default_all_types) %}\n {% do column_monitors.extend(all_types_intersect) %}\n\n {%- if normalized_data_type == 'numeric' %}\n {%- set numeric_intersect = elementary.lists_intersection(monitors_list, default_numeric_monitors) %}\n {% do column_monitors.extend(numeric_intersect) %}\n {%- endif %}\n\n {%- if normalized_data_type == 'string' %}\n {%- set string_intersect = elementary.lists_intersection(monitors_list, default_string_monitors) %}\n {% do column_monitors.extend(string_intersect) %}\n {%- endif %}\n\n {{ return(column_monitors) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.normalize_data_type", "macro.elementary.get_config_var", "macro.elementary.lists_intersection" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4473562, "supported_languages": null }, "macro.elementary.all_column_monitors": { "name": "all_column_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.all_column_monitors", "macro_sql": "{% macro all_column_monitors() %}\n {%- set all_column_monitors = [] %}\n {%- set numeric = elementary.get_config_var('edr_monitors')['column_numeric'] %}\n {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_any_type']) -%}\n {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_string']) -%}\n {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_numeric']) -%}\n {{ return(all_column_monitors) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4484606, "supported_languages": null }, "macro.elementary.get_final_table_monitors": { "name": "get_final_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_final_table_monitors", "macro_sql": "{% macro get_final_table_monitors(table_anomalies) %}\n {%- set final_table_monitors = [] %}\n\n {%- if table_anomalies and table_anomalies | length > 0 %}\n {%- set allowed_table_monitors = elementary.get_allowed_table_monitors() %}\n {%- set final_table_monitors = elementary.lists_intersection(table_anomalies, allowed_table_monitors) %}\n {%- else %}\n {%- set final_table_monitors = elementary.get_default_table_monitors() %}\n {%- endif %}\n {{ return(final_table_monitors) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_allowed_table_monitors", "macro.elementary.lists_intersection", "macro.elementary.get_default_table_monitors" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4498909, "supported_languages": null }, "macro.elementary.get_default_table_monitors": { "name": "get_default_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_default_table_monitors", "macro_sql": "{% macro get_default_table_monitors() %}\n {%- set default_table_monitors = elementary.get_config_var('edr_monitors')['table'] | list %}\n {{ return(default_table_monitors) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4503837, "supported_languages": null }, "macro.elementary.get_allowed_table_monitors": { "name": "get_allowed_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_allowed_table_monitors", "macro_sql": "{% macro get_allowed_table_monitors() %}\n {% do return([\"row_count\", \"freshness\", \"event_freshness\"]) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.450748, "supported_languages": null }, "macro.elementary.is_incremental_model": { "name": "is_incremental_model", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/is_incremental_model.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/is_incremental_model.sql", "unique_id": "macro.elementary.is_incremental_model", "macro_sql": "{% macro is_incremental_model(model_node, source_included=false) %}\n {% do return(\n (source_included and model_node.resource_type == \"source\")\n or\n (model_node.resource_type == \"model\" and model_node.config.materialized == \"incremental\")\n ) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.451481, "supported_languages": null }, "macro.elementary.get_daily_time_bucket": { "name": "get_daily_time_bucket", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "unique_id": "macro.elementary.get_daily_time_bucket", "macro_sql": "{% macro get_daily_time_bucket() %}\n {% do return({\"period\": \"day\", \"count\": 1}) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.452015, "supported_languages": null }, "macro.elementary.get_default_time_bucket": { "name": "get_default_time_bucket", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "unique_id": "macro.elementary.get_default_time_bucket", "macro_sql": "{% macro get_default_time_bucket() %}\n {% do return(elementary.get_daily_time_bucket()) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_daily_time_bucket" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4523373, "supported_languages": null }, "macro.elementary.get_is_column_timestamp": { "name": "get_is_column_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "unique_id": "macro.elementary.get_is_column_timestamp", "macro_sql": "{% macro get_is_column_timestamp(table_relation,timestamp_column,timestamp_column_data_type) %}\n {%- if timestamp_column_data_type == 'string' %}\n {%- set is_timestamp = elementary.try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n {%- elif timestamp_column_data_type == 'timestamp' %}\n {%- set is_timestamp = true %}\n {%- else %}\n {%- set is_timestamp = false %}\n {%- endif %}\n {{ return(is_timestamp) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.try_cast_column_to_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4534025, "supported_languages": null }, "macro.elementary.max": { "name": "max", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.max", "macro_sql": "{% macro max(column_name) -%}\n max(cast({{ column_name }} as {{ elementary.type_float() }}))\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4545252, "supported_languages": null }, "macro.elementary.min": { "name": "min", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.min", "macro_sql": "{% macro min(column_name) -%}\n min(cast({{ column_name }} as {{ elementary.type_float() }}))\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4548385, "supported_languages": null }, "macro.elementary.average": { "name": "average", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.average", "macro_sql": "{% macro average(column_name) -%}\n avg(cast({{ column_name }} as {{ elementary.type_float() }}))\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4551492, "supported_languages": null }, "macro.elementary.zero_count": { "name": "zero_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.zero_count", "macro_sql": "{% macro zero_count(column_name) %}\n coalesce(sum(case when {{ column_name }} is null then 1 when cast({{ column_name }} as {{ elementary.type_float() }}) = 0 then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4554994, "supported_languages": null }, "macro.elementary.zero_percent": { "name": "zero_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.zero_percent", "macro_sql": "{% macro zero_percent(column_name) %}\n {{ elementary.percent(elementary.zero_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.percent", "macro.elementary.zero_count", "macro.elementary.row_count" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4558978, "supported_languages": null }, "macro.elementary.standard_deviation": { "name": "standard_deviation", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.standard_deviation", "macro_sql": "{% macro standard_deviation(column_name) -%}\n stddev(cast({{ column_name }} as {{ elementary.type_float() }}))\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4563699, "supported_languages": null }, "macro.elementary.variance": { "name": "variance", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.variance", "macro_sql": "{% macro variance(column_name) -%}\n variance(cast({{ column_name }} as {{ elementary.type_float() }}))\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4566832, "supported_languages": null }, "macro.elementary.null_count": { "name": "null_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "unique_id": "macro.elementary.null_count", "macro_sql": "{% macro null_count(column_name) %}\n coalesce(sum(case when {{ column_name }} is null then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.457062, "supported_languages": null }, "macro.elementary.null_percent": { "name": "null_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "unique_id": "macro.elementary.null_percent", "macro_sql": "{% macro null_percent(column_name) %}\n {{ elementary.percent(elementary.null_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.percent", "macro.elementary.null_count", "macro.elementary.row_count" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.457453, "supported_languages": null }, "macro.elementary.row_count": { "name": "row_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "unique_id": "macro.elementary.row_count", "macro_sql": "{% macro row_count() -%}\n count(*)\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4576933, "supported_languages": null }, "macro.elementary.max_length": { "name": "max_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.max_length", "macro_sql": "{% macro max_length(column_name) -%}\n max(length({{ column_name }}))\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4583411, "supported_languages": null }, "macro.elementary.min_length": { "name": "min_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.min_length", "macro_sql": "{% macro min_length(column_name) -%}\n min(length({{ column_name }}))\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4585707, "supported_languages": null }, "macro.elementary.average_length": { "name": "average_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.average_length", "macro_sql": "{% macro average_length(column_name) -%}\n avg(length({{ column_name }}))\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4587965, "supported_languages": null }, "macro.elementary.missing_count": { "name": "missing_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.missing_count", "macro_sql": "{% macro missing_count(column_name) %}\n coalesce(sum(case when {{ column_name }} is null then 1 when trim({{ column_name }}, ' ') = '' then 1 when lower({{ column_name }}) = 'null' then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4591072, "supported_languages": null }, "macro.elementary.missing_percent": { "name": "missing_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.missing_percent", "macro_sql": "{% macro missing_percent(column_name) %}\n {{ elementary.percent(elementary.missing_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.percent", "macro.elementary.missing_count", "macro.elementary.row_count" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4595, "supported_languages": null }, "macro.elementary.get_columns_from_information_schema": { "name": "get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.get_columns_from_information_schema", "macro_sql": "{% macro get_columns_from_information_schema(schema_tuple) %}\n {{ return(adapter.dispatch('get_columns_from_information_schema', 'elementary')(schema_tuple)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__get_columns_from_information_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4605968, "supported_languages": null }, "macro.elementary.default__get_columns_from_information_schema": { "name": "default__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.default__get_columns_from_information_schema", "macro_sql": "{% macro default__get_columns_from_information_schema(schema_tuple) %}\n {%- set database_name, schema_name = schema_tuple %}\n {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n select\n upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n upper(table_catalog) as database_name,\n upper(table_schema) as schema_name,\n upper(table_name) as table_name,\n upper(column_name) as column_name,\n data_type\n from {{ schema_relation.information_schema('COLUMNS') }}\n where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4613192, "supported_languages": null }, "macro.elementary.redshift__get_columns_from_information_schema": { "name": "redshift__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.redshift__get_columns_from_information_schema", "macro_sql": "{% macro redshift__get_columns_from_information_schema(schema_tuple) %}\n {%- set database_name, schema_name = schema_tuple %}\n\n select\n upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n upper(table_catalog) as database_name,\n upper(table_schema) as schema_name,\n upper(table_name) as table_name,\n upper(column_name) as column_name,\n data_type\n from svv_columns\n where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4617126, "supported_languages": null }, "macro.elementary.postgres__get_columns_from_information_schema": { "name": "postgres__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.postgres__get_columns_from_information_schema", "macro_sql": "{% macro postgres__get_columns_from_information_schema(schema_tuple) %}\n {%- set database_name, schema_name = schema_tuple %}\n\n select\n upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n upper(table_catalog) as database_name,\n upper(table_schema) as schema_name,\n upper(table_name) as table_name,\n upper(column_name) as column_name,\n data_type\n from information_schema.columns\n where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.462108, "supported_languages": null }, "macro.elementary.get_tables_from_information_schema": { "name": "get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.get_tables_from_information_schema", "macro_sql": "{% macro get_tables_from_information_schema(schema_tuple) %}\n {{ return(adapter.dispatch('get_tables_from_information_schema','elementary')(schema_tuple)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__get_tables_from_information_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4641988, "supported_languages": null }, "macro.elementary.default__get_tables_from_information_schema": { "name": "default__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.default__get_tables_from_information_schema", "macro_sql": "{% macro default__get_tables_from_information_schema(schema_tuple) %}\n {%- set database_name, schema_name = schema_tuple %}\n {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n with information_schema_tables as (\n\n select\n upper(table_catalog) as database_name,\n upper(table_schema) as schema_name,\n upper(table_name) as table_name\n from {{ schema_relation.information_schema('TABLES') }}\n where upper(table_schema) = upper('{{ schema_name }}')\n\n ),\n\n information_schema_schemata as (\n\n select\n upper(catalog_name) as database_name,\n upper(schema_name) as schema_name\n from {{ schema_relation.information_schema('SCHEMATA') }}\n where upper(schema_name) = upper('{{ schema_name }}')\n\n )\n\n select\n case when tables.table_name is not null\n then {{ elementary.full_table_name('TABLES') }}\n else null end as full_table_name,\n upper(schemas.database_name || '.' || schemas.schema_name) as full_schema_name,\n schemas.database_name as database_name,\n schemas.schema_name as schema_name,\n tables.table_name\n from information_schema_tables as tables\n full outer join information_schema_schemata as schemas\n on (tables.database_name = schemas.database_name and tables.schema_name = schemas.schema_name)\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.full_table_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4652123, "supported_languages": null }, "macro.elementary.redshift__get_tables_from_information_schema": { "name": "redshift__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.redshift__get_tables_from_information_schema", "macro_sql": "{% macro redshift__get_tables_from_information_schema(schema_tuple) %}\n {%- set database_name, schema_name = schema_tuple %}\n\n with information_schema_tables as (\n\n select\n upper(table_catalog) as database_name,\n upper(table_schema) as schema_name,\n upper(table_name) as table_name\n from svv_tables\n where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n )\n\n select\n {{ elementary.full_table_name() }} as full_table_name,\n upper(database_name || '.' || schema_name) as full_schema_name,\n database_name,\n schema_name,\n table_name\n from information_schema_tables\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.full_table_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.46574, "supported_languages": null }, "macro.elementary.postgres__get_tables_from_information_schema": { "name": "postgres__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.postgres__get_tables_from_information_schema", "macro_sql": "{% macro postgres__get_tables_from_information_schema(schema_tuple) %}\n {%- set database_name, schema_name = schema_tuple %}\n\n with information_schema_tables as (\n\n select\n upper(table_catalog) as database_name,\n upper(table_schema) as schema_name,\n upper(table_name) as table_name\n from information_schema.tables\n where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n )\n\n select\n {{ elementary.full_table_name() }} as full_table_name,\n upper(database_name || '.' || schema_name) as full_schema_name,\n database_name,\n schema_name,\n table_name\n from information_schema_tables\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.full_table_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.466274, "supported_languages": null }, "macro.elementary.trim_quotes": { "name": "trim_quotes", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/trim_quotes.sql", "original_file_path": "macros/utils/trim_quotes.sql", "unique_id": "macro.elementary.trim_quotes", "macro_sql": "{% macro trim_quotes(column_to_trim) %}\n trim({{ column_to_trim }},'\"')\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4665937, "supported_languages": null }, "macro.elementary.percent": { "name": "percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/percent_query.sql", "original_file_path": "macros/utils/percent_query.sql", "unique_id": "macro.elementary.percent", "macro_sql": "{% macro percent(value, total) %}\n {% set value = elementary.cast_as_float(value) %}\n {% set total = elementary.cast_as_float(total) %}\n {% set query %}\n round({{ elementary.cast_as_numeric('{} / nullif({}, 0) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 100.0'.format(value, total)) }}, 3)\n {% endset %}\n {% do return(query) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_float", "macro.elementary.cast_as_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4676318, "supported_languages": null }, "macro.elementary.target_database": { "name": "target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.target_database", "macro_sql": "{% macro target_database() -%}\n {{ return(adapter.dispatch('target_database', 'elementary')()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.snowflake__target_database" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4683015, "supported_languages": null }, "macro.elementary.default__target_database": { "name": "default__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.default__target_database", "macro_sql": "{% macro default__target_database() %}\n {% do return(target.dbname) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.468596, "supported_languages": null }, "macro.elementary.spark__target_database": { "name": "spark__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.spark__target_database", "macro_sql": "{% macro spark__target_database() %}\n {% do return(target.catalog or none) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4689107, "supported_languages": null }, "macro.elementary.snowflake__target_database": { "name": "snowflake__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.snowflake__target_database", "macro_sql": "{% macro snowflake__target_database() %}\n {% do return(target.database) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.469199, "supported_languages": null }, "macro.elementary.bigquery__target_database": { "name": "bigquery__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.bigquery__target_database", "macro_sql": "{% macro bigquery__target_database() %}\n {% do return(target.project) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4694874, "supported_languages": null }, "macro.elementary.timediff": { "name": "timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.timediff", "macro_sql": "{% macro timediff(timepart, first_timestamp, second_timestamp) -%}\n {{ return(adapter.dispatch('timediff', 'elementary')(timepart, first_timestamp, second_timestamp)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__timediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4706862, "supported_languages": null }, "macro.elementary.default__timediff": { "name": "default__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.default__timediff", "macro_sql": "{% macro default__timediff(timepart, first_timestamp, second_timestamp) %}\n datediff({{ timepart }}, {{ first_timestamp }}, {{ second_timestamp }})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.471045, "supported_languages": null }, "macro.elementary.bigquery__timediff": { "name": "bigquery__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.bigquery__timediff", "macro_sql": "{% macro bigquery__timediff(timepart, first_timestamp, second_timestamp) %}\n timestamp_diff({{ second_timestamp }}, {{ first_timestamp }}, {{ timepart }})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.471393, "supported_languages": null }, "macro.elementary.redshift__timediff": { "name": "redshift__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.redshift__timediff", "macro_sql": "{% macro redshift__timediff(timepart, first_timestamp, second_timestamp) %}\n datediff({{ timepart }}, {{ first_timestamp }}, {{ second_timestamp }})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4717548, "supported_languages": null }, "macro.elementary.postgres__timediff": { "name": "postgres__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.postgres__timediff", "macro_sql": "{% macro postgres__timediff(timepart, first_timestamp, second_timestamp) %}\n extract(epoch from {{ second_timestamp }} - {{ first_timestamp }}) / extract(epoch from interval '1 {{ timepart }}')\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4721053, "supported_languages": null }, "macro.elementary.to_char": { "name": "to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.to_char", "macro_sql": "{% macro to_char(column, format) -%}\n {{ return(adapter.dispatch('to_char', 'elementary')(column, format)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__to_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4730148, "supported_languages": null }, "macro.elementary.default__to_char": { "name": "default__to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.default__to_char", "macro_sql": "{% macro default__to_char(column, format) %}\n to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4734423, "supported_languages": null }, "macro.elementary.bigquery__to_char": { "name": "bigquery__to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.bigquery__to_char", "macro_sql": "{% macro bigquery__to_char(column, format) %}\n cast({{ column }} as STRING {%- if format %} FORMAT '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4738827, "supported_languages": null }, "macro.elementary.spark__to_char": { "name": "spark__to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.spark__to_char", "macro_sql": "{% macro spark__to_char(column, format) %}\n date_format({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4743268, "supported_languages": null }, "macro.elementary.safe_cast": { "name": "safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n {{ return(adapter.dispatch('safe_cast', 'elementary') (field, type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__safe_cast" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4750779, "supported_languages": null }, "macro.elementary.default__safe_cast": { "name": "default__safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n {% set macro = dbt.safe_cast or dbt_utils.safe_cast %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `safe_cast` macro.\") }}\n {% endif %}\n {{ return(macro(field, type)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4757924, "supported_languages": null }, "macro.elementary.spark__safe_cast": { "name": "spark__safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.spark__safe_cast", "macro_sql": "{% macro spark__safe_cast(field, type) %}\n try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4760892, "supported_languages": null }, "macro.elementary.datediff": { "name": "datediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/datediff.sql", "original_file_path": "macros/utils/cross_db_utils/datediff.sql", "unique_id": "macro.elementary.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n {% set macro = dbt.datediff or dbt_utils.datediff %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `datediff` macro.\") }}\n {% endif %}\n {{ return(macro(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4770045, "supported_languages": null }, "macro.elementary.time_trunc": { "name": "time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.time_trunc", "macro_sql": "{% macro time_trunc(date_part, date_expression) -%}\n {{ return(adapter.dispatch('time_trunc', 'elementary') (date_part, date_expression)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__time_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4777164, "supported_languages": null }, "macro.elementary.default__time_trunc": { "name": "default__time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.default__time_trunc", "macro_sql": "{% macro default__time_trunc(date_part, date_expression) %}\n date_trunc('{{date_part}}', cast({{ date_expression }} as {{ elementary.type_timestamp() }}))\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4781196, "supported_languages": null }, "macro.elementary.bigquery__time_trunc": { "name": "bigquery__time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.bigquery__time_trunc", "macro_sql": "{% macro bigquery__time_trunc(date_part, date_expression) %}\n timestamp_trunc(cast({{ date_expression }} as timestamp), {{ date_part }})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4784145, "supported_languages": null }, "macro.elementary.date_trunc": { "name": "date_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "unique_id": "macro.elementary.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) %}\n {% set macro = dbt.date_trunc or dbt_utils.date_trunc %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `date_trunc` macro.\") }}\n {% endif %}\n {{ return(macro(datepart, date)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.479283, "supported_languages": null }, "macro.elementary.quote": { "name": "quote", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.quote", "macro_sql": "{% macro quote(str) %}\n {% do return(\"'{}'\".format(str)) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4799557, "supported_languages": null }, "macro.elementary.quote_column": { "name": "quote_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.quote_column", "macro_sql": "{% macro quote_column(column_name) %}\n {{ adapter.dispatch('quote_column','elementary')(column_name) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__quote_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4803116, "supported_languages": null }, "macro.elementary.default__quote_column": { "name": "default__quote_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.default__quote_column", "macro_sql": "\n\n{%- macro default__quote_column(column_name) -%}\n {% if adapter.quote(column_name[1:-1]) == column_name %}\n {{ return(column_name) }}\n {% else %}\n {% set quoted_column = adapter.quote(column_name) %}\n {{ return(quoted_column) }}\n {% endif %}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.481087, "supported_languages": null }, "macro.elementary.timeadd": { "name": "timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.timeadd", "macro_sql": "{% macro timeadd(date_part, number, timestamp_expression) -%}\n {{ return(adapter.dispatch('timeadd', 'elementary')(date_part, number, timestamp_expression)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__timeadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4821467, "supported_languages": null }, "macro.elementary.default__timeadd": { "name": "default__timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.default__timeadd", "macro_sql": "{% macro default__timeadd(date_part, number, timestamp_expression) %}\n dateadd({{ date_part }}, {{ number }}, {{ elementary.cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4825616, "supported_languages": null }, "macro.elementary.bigquery__timeadd": { "name": "bigquery__timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.bigquery__timeadd", "macro_sql": "{% macro bigquery__timeadd(date_part, number, timestamp_expression) %}\n timestamp_add({{ elementary.cast_as_timestamp(timestamp_expression) }}, INTERVAL {{ number }} {{ date_part }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.482967, "supported_languages": null }, "macro.elementary.postgres__timeadd": { "name": "postgres__timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.postgres__timeadd", "macro_sql": "{% macro postgres__timeadd(date_part, number, timestamp_expression) %}\n {{ elementary.cast_as_timestamp(timestamp_expression) }} + {{ number }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests INTERVAL '1 {{ date_part }}'\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4833655, "supported_languages": null }, "macro.elementary.redshift__timeadd": { "name": "redshift__timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.redshift__timeadd", "macro_sql": "{% macro redshift__timeadd(date_part, number, timestamp_expression) %}\n dateadd({{ date_part }}, {{ number }}, {{ elementary.cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4839277, "supported_languages": null }, "macro.elementary.generate_surrogate_key": { "name": "generate_surrogate_key", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/generate_surrogate_key.sql", "original_file_path": "macros/utils/cross_db_utils/generate_surrogate_key.sql", "unique_id": "macro.elementary.generate_surrogate_key", "macro_sql": "\n\n\n{%- macro generate_surrogate_key(fields) -%}\n {% set concat_macro = dbt.concat or dbt_utils.concat %}\n {% set hash_macro = dbt.hash or dbt_utils.hash %}\n\n {% set default_null_value = \"\" %}\n {%- set field_sqls = [] -%}\n {%- for field in fields -%}\n {%- do field_sqls.append(\n \"coalesce(cast(\" ~ field ~ \" as \" ~ elementary.type_string() ~ \"), '\" ~ default_null_value ~\"')\"\n ) -%}\n {%- if not loop.last %}\n {%- do field_sqls.append(\"'-'\") -%}\n {%- endif -%}\n {%- endfor -%}\n {{ hash_macro(concat_macro(field_sqls)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4856143, "supported_languages": null }, "macro.elementary.current_timestamp": { "name": "current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n {% set macro = dbt.current_timestamp_backcompat or dbt_utils.current_timestamp %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4866238, "supported_languages": null }, "macro.elementary.current_timestamp_in_utc": { "name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n {% set macro = dbt.current_timestamp_in_utc_backcompat or dbt_utils.current_timestamp_in_utc %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp_in_utc` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4872606, "supported_languages": null }, "macro.elementary.dateadd": { "name": "dateadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/utils/cross_db_utils/dateadd.sql", "unique_id": "macro.elementary.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n {% set macro = dbt.dateadd or dbt_utils.dateadd %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `dateadd` macro.\") }}\n {% endif %}\n {{ return(macro(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4881835, "supported_languages": null }, "macro.elementary.agate_to_dicts": { "name": "agate_to_dicts", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/agate_to_dicts.sql", "original_file_path": "macros/utils/run_queries/agate_to_dicts.sql", "unique_id": "macro.elementary.agate_to_dicts", "macro_sql": "{% macro agate_to_dicts(agate_table) %}\n {% set column_types = agate_table.column_types %}\n {% set serializable_rows = [] %}\n {% for agate_row in agate_table.rows %}\n {% set serializable_row = {} %}\n {% for col_name, col_value in agate_row.items() %}\n {% set serializable_col_value = column_types[loop.index0].jsonify(col_value) %}\n {% set serializable_col_name = col_name | lower %}\n {% do serializable_row.update({serializable_col_name: serializable_col_value}) %}\n {% endfor %}\n {% do serializable_rows.append(serializable_row) %}\n {% endfor %}\n {{ return(serializable_rows) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.490023, "supported_languages": null }, "macro.elementary.agate_to_json": { "name": "agate_to_json", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/agate_to_json.sql", "original_file_path": "macros/utils/run_queries/agate_to_json.sql", "unique_id": "macro.elementary.agate_to_json", "macro_sql": "{% macro agate_to_json(agate_table) %}\n {% set serializable_rows = elementary.agate_to_dicts(agate_table) %}\n {{ return(tojson(serializable_rows)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.agate_to_dicts" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.490596, "supported_languages": null }, "macro.elementary.union_macro_queries": { "name": "union_macro_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/union_macro_queries.sql", "original_file_path": "macros/utils/run_queries/union_macro_queries.sql", "unique_id": "macro.elementary.union_macro_queries", "macro_sql": "{% macro union_macro_queries(param_list, query_macro) %}\n {% for param in param_list %}\n ({{ query_macro(param) }})\n {% if not loop.last %}\n union all\n {% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4912982, "supported_languages": null }, "macro.elementary.result_column_to_list": { "name": "result_column_to_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/result_column_to_list.sql", "original_file_path": "macros/utils/run_queries/result_column_to_list.sql", "unique_id": "macro.elementary.result_column_to_list", "macro_sql": "{% macro result_column_to_list(single_column_query) %}\n {% set column_values = [] %}\n {% set query_result = dbt.run_query(single_column_query) %}\n {% do return(query_result.columns[0]) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4919875, "supported_languages": null }, "macro.elementary.result_value": { "name": "result_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/result_value.sql", "original_file_path": "macros/utils/run_queries/result_value.sql", "unique_id": "macro.elementary.result_value", "macro_sql": "{% macro result_value(single_column_query) %}\n {% set result = dbt.run_query(single_column_query) %}\n {% if not result %}\n {% do return(none) %}\n {% endif %}\n {% do return(result[0][0]) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4928358, "supported_languages": null }, "macro.elementary.union_lists": { "name": "union_lists", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/union_lists.sql", "original_file_path": "macros/utils/list_utils/union_lists.sql", "unique_id": "macro.elementary.union_lists", "macro_sql": "{% macro union_lists(list1, list2) %}\n {% set union_list = [] %}\n {% do union_list.extend(list1) %}\n {% do union_list.extend(list2) %}\n {{ return(union_list | unique | list) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4936168, "supported_languages": null }, "macro.elementary.split_list_to_chunks": { "name": "split_list_to_chunks", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/split_list_to_chunks.sql", "original_file_path": "macros/utils/list_utils/split_list_to_chunks.sql", "unique_id": "macro.elementary.split_list_to_chunks", "macro_sql": "{% macro split_list_to_chunks(item_list, chunk_size=50) %}\n {% set chunks = [] %}\n {% set current_chunk = [] %}\n {% for item in item_list %}\n {% set reminder = loop.index0 % chunk_size %}\n {% if reminder == 0 and current_chunk %}\n {% do chunks.append(current_chunk.copy()) %}\n {% do current_chunk.clear() %}\n {% endif %}\n {% do current_chunk.append(item) %}\n {% endfor %}\n {% if current_chunk %}\n {% do chunks.append(current_chunk) %}\n {% endif %}\n {{ return(chunks) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4954965, "supported_languages": null }, "macro.elementary.lists_intersection": { "name": "lists_intersection", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/lists_intersection.sql", "original_file_path": "macros/utils/list_utils/lists_intersection.sql", "unique_id": "macro.elementary.lists_intersection", "macro_sql": "{% macro lists_intersection(list_a, list_b) %}\n {% set new_list = [] %}\n {% for item in list_a %}\n {% if item in list_b %}\n {% do new_list.append(item) %}\n {% endif %}\n {% endfor %}\n {% do return(new_list) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4964526, "supported_languages": null }, "macro.elementary.strings_list_to_tuple": { "name": "strings_list_to_tuple", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/strings_list_to_tuple.sql", "original_file_path": "macros/utils/list_utils/strings_list_to_tuple.sql", "unique_id": "macro.elementary.strings_list_to_tuple", "macro_sql": "{% macro strings_list_to_tuple(strings) %}\n {%- if strings %}\n ({% for string in strings %} '{{ string }}' {{ \",\" if not loop.last else \"\" }} {% endfor %})\n {%- else %}\n ('')\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4972537, "supported_languages": null }, "macro.elementary.join_list": { "name": "join_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/join_list.sql", "original_file_path": "macros/utils/list_utils/join_list.sql", "unique_id": "macro.elementary.join_list", "macro_sql": "{% macro join_list(item_list, separator) %}\n {{ return(item_list | join(separator)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4976935, "supported_languages": null }, "macro.elementary.cast_as_timestamp": { "name": "cast_as_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_timestamp", "macro_sql": "{%- macro cast_as_timestamp(timestamp_field) -%}\n cast({{ timestamp_field }} as {{ elementary.type_timestamp() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4988303, "supported_languages": null }, "macro.elementary.cast_as_float": { "name": "cast_as_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_float", "macro_sql": "{%- macro cast_as_float(column) -%}\n cast({{ column }} as {{ elementary.type_float() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4991515, "supported_languages": null }, "macro.elementary.cast_as_numeric": { "name": "cast_as_numeric", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_numeric", "macro_sql": "{%- macro cast_as_numeric(column) -%}\n cast({{ column }} as {{ elementary.type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4994652, "supported_languages": null }, "macro.elementary.cast_as_int": { "name": "cast_as_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_int", "macro_sql": "{%- macro cast_as_int(column) -%}\n cast({{ column }} as {{ elementary.type_int() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.4997714, "supported_languages": null }, "macro.elementary.cast_as_string": { "name": "cast_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_string", "macro_sql": "{%- macro cast_as_string(column) -%}\n cast({{ column }} as {{ elementary.type_string() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5000756, "supported_languages": null }, "macro.elementary.cast_as_long_string": { "name": "cast_as_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_long_string", "macro_sql": "{%- macro cast_as_long_string(column) -%}\n cast({{ column }} as {{ elementary.type_long_string() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_long_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5003786, "supported_languages": null }, "macro.elementary.cast_as_bool": { "name": "cast_as_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.cast_as_bool", "macro_sql": "{%- macro cast_as_bool(column) -%}\n cast({{ column }} as {{ elementary.type_bool() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_bool" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5006895, "supported_languages": null }, "macro.elementary.const_as_string": { "name": "const_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.const_as_string", "macro_sql": "{%- macro const_as_string(string) -%}\n cast('{{ string }}' as {{ elementary.type_string() }})\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.elementary.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5010004, "supported_languages": null }, "macro.elementary.to_primitive": { "name": "to_primitive", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/to_primitive.sql", "original_file_path": "macros/utils/data_types/to_primitive.sql", "unique_id": "macro.elementary.to_primitive", "macro_sql": "{% macro to_primitive(val) %}\n {% if elementary.is_primitive(val) %}\n {% do return(val) %}\n\n {% elif val is mapping %}\n {% set new_dict = {} %}\n {% for k, v in val.items() %}\n {% do new_dict.update({k: elementary.to_primitive(v)}) %}\n {% endfor %}\n {% do return(new_dict) %}\n\n {% elif val is iterable %}\n {% set new_list = [] %}\n {% for item in val %}\n {% do new_list.append(elementary.to_primitive(item)) %}\n {% endfor %}\n {% do return(new_list) %}\n\n {% else %}\n {% do return(val | string) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.is_primitive", "macro.elementary.to_primitive" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5037382, "supported_languages": null }, "macro.elementary.null_int": { "name": "null_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_int", "macro_sql": "{%- macro null_int() -%}\n cast(null as {{ elementary.type_int() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5042627, "supported_languages": null }, "macro.elementary.null_timestamp": { "name": "null_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_timestamp", "macro_sql": "{%- macro null_timestamp() -%}\n cast(null as {{ elementary.type_timestamp() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5045233, "supported_languages": null }, "macro.elementary.null_float": { "name": "null_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_float", "macro_sql": "{%- macro null_float() -%}\n cast(null as {{ elementary.type_float() }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5047753, "supported_languages": null }, "macro.elementary.null_string": { "name": "null_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_string", "macro_sql": "{% macro null_string() %}\n cast(null as {{ elementary.type_string() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5050242, "supported_languages": null }, "macro.elementary.try_cast_column_to_timestamp": { "name": "try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.try_cast_column_to_timestamp", "macro_sql": "{% macro try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n {{ return(adapter.dispatch('try_cast_column_to_timestamp', 'elementary')(table_relation, timestamp_column)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__try_cast_column_to_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5058885, "supported_languages": null }, "macro.elementary.default__try_cast_column_to_timestamp": { "name": "default__try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.default__try_cast_column_to_timestamp", "macro_sql": "{% macro default__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n {# We try casting for Snowflake, Bigquery and Databricks as these support safe cast and the query will not fail if the cast fails #}\n {%- set query %}\n select {{ elementary.safe_cast(timestamp_column, elementary.type_timestamp()) }} as timestamp_column\n from {{ table_relation }}\n where {{ timestamp_column }} is not null\n limit 1\n {%- endset %}\n\n {%- set result = elementary.result_value(query) %}\n {%- if result is not none %}\n {{ return(true) }}\n {%- endif %}\n {{ return(false) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_cast", "macro.elementary.type_timestamp", "macro.elementary.result_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5069065, "supported_languages": null }, "macro.elementary.postgres__try_cast_column_to_timestamp": { "name": "postgres__try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.postgres__try_cast_column_to_timestamp", "macro_sql": "{% macro postgres__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n {{ return(false) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.507218, "supported_languages": null }, "macro.elementary.get_column_size": { "name": "get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.get_column_size", "macro_sql": "{% macro get_column_size() %}\n {{ return(adapter.dispatch('get_column_size', 'elementary')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.snowflake__get_column_size" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5078306, "supported_languages": null }, "macro.elementary.default__get_column_size": { "name": "default__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.default__get_column_size", "macro_sql": "{% macro default__get_column_size() %}\n {{ return(elementary.get_config_var('long_string_size')) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5081532, "supported_languages": null }, "macro.elementary.snowflake__get_column_size": { "name": "snowflake__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.snowflake__get_column_size", "macro_sql": "{% macro snowflake__get_column_size() %}\n {{ return(16777216) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5084171, "supported_languages": null }, "macro.elementary.bigquery__get_column_size": { "name": "bigquery__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.bigquery__get_column_size", "macro_sql": "{% macro bigquery__get_column_size() %}\n {{ return(10485760) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.508675, "supported_languages": null }, "macro.elementary.data_type_list": { "name": "data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.data_type_list", "macro_sql": "{% macro data_type_list(data_type) %}\n {% set result = adapter.dispatch('data_type_list','elementary')(data_type) %}\n {{ return(result) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.snowflake__data_type_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.512469, "supported_languages": null }, "macro.elementary.default__data_type_list": { "name": "default__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.default__data_type_list", "macro_sql": "{% macro default__data_type_list(data_type) %}\n\n {% set string_list = ['character varying','varchar','character','char','text','nchar','bpchar','string'] | list %}\n {% set numeric_list = ['integer', 'bigint','smallint','decimal','numeric','real','double precision','enum','int2','int4','int','int8','float8','float'] | list %}\n {% set timestamp_list = ['date', 'timestamp','timestamptz','timestamp without time zone','timestamp with time zone'] | list %}\n\n {%- if data_type == 'string' %}\n {{ return(string_list) }}\n {%- elif data_type == 'numeric' %}\n {{ return(numeric_list) }}\n {%- elif data_type == 'timestamp' %}\n {{ return(timestamp_list) }}\n {%- else %}\n {{ return([]) }}\n {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5143216, "supported_languages": null }, "macro.elementary.bigquery__data_type_list": { "name": "bigquery__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.bigquery__data_type_list", "macro_sql": "{% macro bigquery__data_type_list(data_type) %}\n\n {% set string_list = ['STRING'] | list %}\n {% set numeric_list = ['INT64','NUMERIC','BIGNUMERIC','FLOAT64','INTEGER'] | list %}\n {% set timestamp_list = ['DATE','DATETIME','TIMESTAMP'] | list %}\n\n {%- if data_type == 'string' %}\n {{ return(string_list) }}\n {%- elif data_type == 'numeric' %}\n {{ return(numeric_list) }}\n {%- elif data_type == 'timestamp' %}\n {{ return(timestamp_list) }}\n {%- else %}\n {{ return([]) }}\n {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5158541, "supported_languages": null }, "macro.elementary.snowflake__data_type_list": { "name": "snowflake__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.snowflake__data_type_list", "macro_sql": "{% macro snowflake__data_type_list(data_type) %}\n\n {% set string_list = ['VARCHAR','CHAR','CHARACTER','STRING','TEXT'] | list %}\n {% set numeric_list = ['NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL'] | list %}\n {% set timestamp_list = ['DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ'] | list %}\n\n {%- if data_type == 'string' %}\n {{ return(string_list) }}\n {%- elif data_type == 'numeric' %}\n {{ return(numeric_list) }}\n {%- elif data_type == 'timestamp' %}\n {{ return(timestamp_list) }}\n {%- else %}\n {{ return([]) }}\n {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5176911, "supported_languages": null }, "macro.elementary.spark__data_type_list": { "name": "spark__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.spark__data_type_list", "macro_sql": "{% macro spark__data_type_list(data_type) %}\n\n {% set string_list = ['string'] | list %}\n {% set numeric_list = ['int','bigint','smallint','tinyint','float','double','long','short'] | list %}\n {% set timestamp_list = ['timestamp','date'] | list %}\n\n {%- if data_type == 'string' %}\n {{ return(string_list) }}\n {%- elif data_type == 'numeric' %}\n {{ return(numeric_list) }}\n {%- elif data_type == 'timestamp' %}\n {{ return(timestamp_list) }}\n {%- else %}\n {{ return([]) }}\n {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.51917, "supported_languages": null }, "macro.elementary.normalize_data_type": { "name": "normalize_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/normalize_data_type.sql", "original_file_path": "macros/utils/data_types/normalize_data_type.sql", "unique_id": "macro.elementary.normalize_data_type", "macro_sql": "{% macro normalize_data_type(data_type) %}\n {%- if data_type is defined and data_type is not none %}\n {%- if data_type in elementary.data_type_list('string') %}\n {{ return('string') }}\n {%- elif data_type in elementary.data_type_list('numeric') %}\n {{ return('numeric') }}\n {%- elif data_type in elementary.data_type_list('timestamp') %}\n {{ return('timestamp') }}\n {%- else %}\n {{ return('other') }}\n {% endif %}\n {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.data_type_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5206792, "supported_languages": null }, "macro.elementary.is_primitive": { "name": "is_primitive", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.is_primitive", "macro_sql": "{% macro is_primitive(val) %}\n {% do return (\n val is none or\n val is boolean or\n val is number or\n val is string\n ) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.523431, "supported_languages": null }, "macro.elementary.type_bool": { "name": "type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_bool", "macro_sql": "\n\n{%- macro type_bool() -%}\n {{ return(adapter.dispatch('type_bool', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.default__type_bool" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5237935, "supported_languages": null }, "macro.elementary.default__type_bool": { "name": "default__type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__type_bool", "macro_sql": "{% macro default__type_bool() %}\n {% do return(\"boolean\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5240738, "supported_languages": null }, "macro.elementary.bigquery__type_bool": { "name": "bigquery__type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__type_bool", "macro_sql": "{% macro bigquery__type_bool() %}\n {% do return(\"BOOL\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.524348, "supported_languages": null }, "macro.elementary.type_string": { "name": "type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_string", "macro_sql": "\n\n\n{%- macro type_string() -%}\n {{ return(adapter.dispatch('type_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.snowflake__type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5246937, "supported_languages": null }, "macro.elementary.default__type_string": { "name": "default__type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__type_string", "macro_sql": "{% macro default__type_string() %}\n {# Redshift and Postgres #}\n {% do return(\"varchar(4096)\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5249903, "supported_languages": null }, "macro.elementary.snowflake__type_string": { "name": "snowflake__type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n {# Default max varchar size in Snowflake is 16MB #}\n {% do return(\"varchar\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.525281, "supported_languages": null }, "macro.elementary.bigquery__type_string": { "name": "bigquery__type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__type_string", "macro_sql": "{% macro bigquery__type_string() %}\n {# Default max string size in Bigquery is 65K #}\n {% do return(\"string\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5255725, "supported_languages": null }, "macro.elementary.spark__type_string": { "name": "spark__type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.spark__type_string", "macro_sql": "{% macro spark__type_string() %}\n {% do return(\"string\") %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5258582, "supported_languages": null }, "macro.elementary.type_long_string": { "name": "type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_long_string", "macro_sql": "\n\n\n\n{%- macro type_long_string() -%}\n {{ return(adapter.dispatch('type_long_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.default__type_long_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5262341, "supported_languages": null }, "macro.elementary.default__type_long_string": { "name": "default__type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__type_long_string", "macro_sql": "{%- macro default__type_long_string() -%}\n {# Snowflake, Bigquery, Databricks #}\n {% do return(elementary.type_string()) %}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5265505, "supported_languages": null }, "macro.elementary.redshift__type_long_string": { "name": "redshift__type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.redshift__type_long_string", "macro_sql": "{%- macro redshift__type_long_string() -%}\n {% set long_string = 'varchar(' ~ elementary.get_config_var('long_string_size') ~ ')' %}\n {{ return(long_string) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5269816, "supported_languages": null }, "macro.elementary.postgres__type_long_string": { "name": "postgres__type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.postgres__type_long_string", "macro_sql": "{%- macro postgres__type_long_string() -%}\n {% set long_string = 'varchar(' ~ elementary.get_config_var('long_string_size') ~ ')' %}\n {{ return(long_string) }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [ "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.527455, "supported_languages": null }, "macro.elementary.type_bigint": { "name": "type_bigint", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_bigint", "macro_sql": "{% macro type_bigint() %}\n {% set macro = dbt.type_bigint or dbt_utils.type_bigint %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `type_bigint` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5280912, "supported_languages": null }, "macro.elementary.type_float": { "name": "type_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_float", "macro_sql": "{% macro type_float() %}\n {% set macro = dbt.type_float or dbt_utils.type_float %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `type_float` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.528737, "supported_languages": null }, "macro.elementary.type_int": { "name": "type_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_int", "macro_sql": "{% macro type_int() %}\n {% set macro = dbt.type_int or dbt_utils.type_int %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `type_int` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5293758, "supported_languages": null }, "macro.elementary.type_timestamp": { "name": "type_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_timestamp", "macro_sql": "{% macro type_timestamp() %}\n {% set macro = dbt.type_timestamp or dbt_utils.type_timestamp %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `type_timestamp` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5300446, "supported_languages": null }, "macro.elementary.type_numeric": { "name": "type_numeric", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.type_numeric", "macro_sql": "{% macro type_numeric() %}\n {% set macro = dbt.type_numeric or dbt_utils.type_numeric %}\n {% if not macro %}\n {{ exceptions.raise_compiler_error(\"Did not find a `type_numeric` macro.\") }}\n {% endif %}\n {{ return(macro()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5307016, "supported_languages": null }, "macro.elementary.insensitive_get_dict_value": { "name": "insensitive_get_dict_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "original_file_path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "unique_id": "macro.elementary.insensitive_get_dict_value", "macro_sql": "{% macro insensitive_get_dict_value(dict, key, default) -%}\n {% set value = elementary.safe_get_with_default(dict, key) %}\n {%- if value is not none -%}\n {{- return(value) -}}\n {%- endif %}\n {% set value = elementary.safe_get_with_default(dict, key.lower()) %}\n {%- if value is not none -%}\n {{- return(value) -}}\n {%- endif %}\n {% set value = elementary.safe_get_with_default(dict, key.upper()) %}\n {%- if value is not none -%}\n {{- return(value) -}}\n {%- endif %}\n {%- if default is defined -%}\n {{- return(default) -}}\n {% else %}\n {{ return(none) }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5328867, "supported_languages": null }, "macro.elementary.safe_get_with_default": { "name": "safe_get_with_default", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "original_file_path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "unique_id": "macro.elementary.safe_get_with_default", "macro_sql": "{% macro safe_get_with_default(dict, key, default) %}\n {% set value = dict.get(key) %}\n {% if value is defined and value is not none %}\n {{ return(value) }}\n {% endif %}\n {% if default is defined %}\n {{ return(default) }}\n {% endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5340505, "supported_languages": null }, "macro.elementary.set_cache": { "name": "set_cache", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/set_cache.sql", "original_file_path": "macros/utils/graph/set_cache.sql", "unique_id": "macro.elementary.set_cache", "macro_sql": "{% macro set_cache(entry, val) %}\n {% if execute %}\n {% do graph.get(\"elementary\", {}).update({entry: val}) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5347495, "supported_languages": null }, "macro.elementary.get_node": { "name": "get_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node.sql", "original_file_path": "macros/utils/graph/get_node.sql", "unique_id": "macro.elementary.get_node", "macro_sql": "{% macro get_node(node_unique_id) %}\n {# First let's try to find it in regular nodes #}\n {%- set node = graph.nodes.get(node_unique_id) -%}\n {%- if not node -%}\n {# If not found let's try to find it in source nodes #}\n {%- set node = graph.sources.get(node_unique_id) -%}\n {%- endif -%}\n {{ return(node) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.535581, "supported_languages": null }, "macro.elementary.get_table_name_from_node": { "name": "get_table_name_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_table_name_from_node.sql", "original_file_path": "macros/utils/graph/get_table_name_from_node.sql", "unique_id": "macro.elementary.get_table_name_from_node", "macro_sql": "{% macro get_table_name_from_node(node) %}\n {% if node.identifier %}\n {% set table_name = node.identifier %}\n {% elif node.alias %}\n {% set table_name = node.alias %}\n {% else %}\n {% set table_name = node.name %}\n {% endif %}\n {{ return(table_name) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5365777, "supported_languages": null }, "macro.elementary.get_compiled_code": { "name": "get_compiled_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_compiled_code.sql", "original_file_path": "macros/utils/graph/get_compiled_code.sql", "unique_id": "macro.elementary.get_compiled_code", "macro_sql": "{% macro get_compiled_code(node) %}\n {% do return(node.get('compiled_code') or node.get('compiled_sql')) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5371065, "supported_languages": null }, "macro.elementary.get_result_node": { "name": "get_result_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_result_node.sql", "original_file_path": "macros/utils/graph/get_result_node.sql", "unique_id": "macro.elementary.get_result_node", "macro_sql": "{% macro get_result_node(identifier, package_name='elementary') %}\n {% for result in results %}\n {% if result.node.identifier == identifier %}\n {% if package_name %}\n {% if result.node.package_name == package_name %}\n {{ return(result.node) }}\n {% endif %}\n {% else %}\n {{ return(result.node) }}\n {% endif %}\n {% endif %}\n {% endfor %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5385125, "supported_languages": null }, "macro.elementary.column_exists_in_relation": { "name": "column_exists_in_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/column_exists_in_relation.sql", "original_file_path": "macros/utils/graph/column_exists_in_relation.sql", "unique_id": "macro.elementary.column_exists_in_relation", "macro_sql": "{% macro column_exists_in_relation(relation, column_name) %}\n {% set columns = adapter.get_columns_in_relation(relation) %}\n {% for column in columns %}\n {% if column.name.lower() == column_name.lower() %}\n {% do return(true) %}\n {% endif %}\n {% endfor %}\n {% do return(false) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5395784, "supported_languages": null }, "macro.elementary.get_nodes_from_graph": { "name": "get_nodes_from_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_nodes_from_graph.sql", "original_file_path": "macros/utils/graph/get_nodes_from_graph.sql", "unique_id": "macro.elementary.get_nodes_from_graph", "macro_sql": "{% macro get_nodes_from_graph() %}\n {% set nodes = [] %}\n {% do nodes.extend(graph.sources.values()) %}\n {% do nodes.extend(graph.nodes.values()) %}\n {{ return(nodes) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5403755, "supported_languages": null }, "macro.elementary.get_elementary_relation": { "name": "get_elementary_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_elementary_relation.sql", "original_file_path": "macros/utils/graph/get_elementary_relation.sql", "unique_id": "macro.elementary.get_elementary_relation", "macro_sql": "{% macro get_elementary_relation(identifier) %}\n {% set elementary_database, elementary_schema = elementary.get_package_database_and_schema() %}\n {% if this and this.database == elementary_database and this.schema == elementary_schema and this.identifier == identifier %}\n {% do return(this) %}\n {% endif %}\n {% do return(adapter.get_relation(elementary_database, elementary_schema, identifier)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_package_database_and_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5414734, "supported_languages": null }, "macro.elementary.get_parent_model_unique_ids_from_test_node": { "name": "get_parent_model_unique_ids_from_test_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "original_file_path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "unique_id": "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro_sql": "{% macro get_parent_model_unique_ids_from_test_node(test_node) %}\n {% set nodes_in_current_package = [] %}\n {% set test_depends_on = test_node.get('depends_on') %}\n {% if test_depends_on %}\n {% set depends_on_nodes = test_depends_on.get('nodes') %}\n {% if depends_on_nodes %}\n {% set current_package_name = test_node.get('package_name') %}\n {% if current_package_name %}\n {% set current_package_name = '.' ~ current_package_name ~ '.' %}\n {% for node in depends_on_nodes %}\n {% if current_package_name in node %}\n {% do nodes_in_current_package.append(node) %}\n {% endif %}\n {% endfor %}\n {% endif %}\n {% endif %}\n {% endif %}\n {{ return(nodes_in_current_package) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5436828, "supported_languages": null }, "macro.elementary.get_model_database_and_schema_from_test_node": { "name": "get_model_database_and_schema_from_test_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "original_file_path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "unique_id": "macro.elementary.get_model_database_and_schema_from_test_node", "macro_sql": "{% macro get_model_database_and_schema_from_test_node(test_node) %}\n {% set test_database = test_node.get('database') %}\n {% set test_schema = test_node.get('schema') %}\n {% set config_dict = elementary.safe_get_with_default(test_node, 'config', {}) %}\n {% set test_schema_sufix = config_dict.get('schema') %}\n {% if test_schema and test_schema_sufix %}\n {% set test_schema = test_schema | replace('_' ~ test_schema_sufix, '') %}\n {% endif %}\n {{ return([test_database, test_schema]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.safe_get_with_default" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.54519, "supported_languages": null }, "macro.elementary.get_relation_from_node": { "name": "get_relation_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_relation_from_node.sql", "original_file_path": "macros/utils/graph/get_relation_from_node.sql", "unique_id": "macro.elementary.get_relation_from_node", "macro_sql": "{% macro get_relation_from_node(node) %}\n {% do return(adapter.get_relation(database=node.database,\n schema=node.schema,\n identifier=get_table_name_from_node(node))) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_table_name_from_node" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5458243, "supported_languages": null }, "macro.elementary.get_package_database_and_schema": { "name": "get_package_database_and_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_package_database_and_schema.sql", "original_file_path": "macros/utils/graph/get_package_database_and_schema.sql", "unique_id": "macro.elementary.get_package_database_and_schema", "macro_sql": "{% macro get_package_database_and_schema(package_name='elementary') %}\n {% if execute %}\n {% set node_in_package = graph.nodes.values()\n | selectattr(\"resource_type\", \"==\", \"model\")\n | selectattr(\"package_name\", \"==\", package_name) | first %}\n {% if node_in_package %}\n {{ return([node_in_package.database, node_in_package.schema]) }}\n {% endif %}\n {% endif %}\n {{ return([none, none]) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5471728, "supported_languages": null }, "macro.elementary.get_cache": { "name": "get_cache", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_cache.sql", "original_file_path": "macros/utils/graph/get_cache.sql", "unique_id": "macro.elementary.get_cache", "macro_sql": "{% macro get_cache(entry, default=none) %}\n {% if execute %}\n {{ return(graph.get(\"elementary\", {}).get(entry, default)) }}\n {% endif %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5479777, "supported_languages": null }, "macro.elementary.get_nodes_by_unique_ids": { "name": "get_nodes_by_unique_ids", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "original_file_path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "unique_id": "macro.elementary.get_nodes_by_unique_ids", "macro_sql": "{% macro get_nodes_by_unique_ids(unique_ids) %}\n {% set nodes = []%}\n {% if execute %}\n {% if unique_ids and unique_ids is iterable %}\n {% for unique_id in unique_ids %}\n {% set node = elementary.get_node(unique_id) %}\n {% if node %}\n {% do nodes.append(node) %}\n {% endif %}\n {% endfor %}\n {% endif %}\n {% endif %}\n {{ return(nodes) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_node" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.549398, "supported_languages": null }, "macro.elementary.get_node_execution_id": { "name": "get_node_execution_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node_execution_id.sql", "original_file_path": "macros/utils/graph/get_node_execution_id.sql", "unique_id": "macro.elementary.get_node_execution_id", "macro_sql": "{% macro get_node_execution_id(node) %}\n {% set node_execution_id = [invocation_id, node.get('unique_id')] | join('.') %}\n {{ return(node_execution_id) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5500646, "supported_languages": null }, "macro.elementary.get_elementary_config_from_node": { "name": "get_elementary_config_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_elementary_config_from_node.sql", "original_file_path": "macros/utils/graph/get_elementary_config_from_node.sql", "unique_id": "macro.elementary.get_elementary_config_from_node", "macro_sql": "{% macro get_elementary_config_from_node(node) %}\n {% set res = {} %}\n {% set node_config = node.get('config') %}\n {% if node_config %}\n {% set elementary_config = node.config.get('elementary') %}\n {% if elementary_config and elementary_config is mapping %}\n {% do res.update(elementary_config) %}\n {% endif %}\n {% set config_meta = node.config.get('meta') %}\n {% if config_meta and config_meta is mapping %}\n {% set elementary_config = config_meta.get('elementary') %}\n {% if elementary_config and elementary_config is mapping %}\n {% do res.update(elementary_config) %}\n {% endif %}\n {% endif %}\n {% endif %}\n {% set node_meta = node.get('meta') %}\n {% if node_meta and node_meta is mapping %}\n {% set elementary_config = node_meta.get('elementary') %}\n {% if elementary_config and elementary_config is mapping %}\n {% do res.update(elementary_config) %}\n {% endif %}\n {% endif %}\n {{ return(res) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.55335, "supported_languages": null }, "macro.elementary.get_node_by_name": { "name": "get_node_by_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node_by_name.sql", "original_file_path": "macros/utils/graph/get_node_by_name.sql", "unique_id": "macro.elementary.get_node_by_name", "macro_sql": "{% macro get_node_by_name(name) %}\n {%- set nodes = get_nodes_from_graph() -%}\n {% for node in nodes %}\n {% if node.name == name %}\n {% do return(node) %}\n {% endif %}\n {% endfor %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_nodes_from_graph" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5543132, "supported_languages": null }, "macro.elementary.get_columns_and_types": { "name": "get_columns_and_types", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_columns_and_types.sql", "original_file_path": "macros/utils/table_operations/get_columns_and_types.sql", "unique_id": "macro.elementary.get_columns_and_types", "macro_sql": "{% macro get_columns_and_types(table_name, schema_name = none, database_name = none) %}\n\n {# dbt models can be found with identifier only #}\n {# for non-dbt tables database_name and schema_name are required #}\n\n {%- if not database_name %}\n {%- set database_name = elementary.target_database() %}\n {%- endif %}\n {%- if not schema_name %}\n {%- set schema_name = target.schema %}\n {%- endif %}\n\n {%- set columns = [] %}\n\n {%- set relation = adapter.get_relation(\n database=database_name,\n schema=schema_name,\n identifier=table_name) -%}\n\n {%- set columns_from_relation = adapter.get_columns_in_relation(relation) -%}\n\n {% for column in columns_from_relation %}\n {%- set column_item = {'column_name': column['column'], 'data_type': elementary.normalize_data_type(column['dtype'])} %}\n {%- do columns.append(column_item) -%}\n {% endfor %}\n\n {{ return(columns) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.target_database", "macro.elementary.normalize_data_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5565038, "supported_languages": null }, "macro.elementary.relation_exists": { "name": "relation_exists", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/relation_exists.sql", "original_file_path": "macros/utils/table_operations/relation_exists.sql", "unique_id": "macro.elementary.relation_exists", "macro_sql": "{% macro relation_exists(relation) %}\n {%- set loaded_relation = load_relation(relation) -%}\n {% if loaded_relation is not none %}\n {{ return(True) }}\n {% endif %}\n {{ return(False) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5572488, "supported_languages": null }, "macro.elementary.create_or_replace": { "name": "create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.create_or_replace", "macro_sql": "{% macro create_or_replace(temporary, relation, sql_query) %}\n {{ return(adapter.dispatch('create_or_replace', 'elementary')(temporary, relation, sql_query)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__create_or_replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5583193, "supported_languages": null }, "macro.elementary.default__create_or_replace": { "name": "default__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.default__create_or_replace", "macro_sql": "{% macro default__create_or_replace(temporary, relation, sql_query) %}\n {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.558761, "supported_languages": null }, "macro.elementary.redshift__create_or_replace": { "name": "redshift__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.redshift__create_or_replace", "macro_sql": "{% macro redshift__create_or_replace(temporary, relation, sql_query) %}\n {% do dbt.drop_relation_if_exists(relation) %}\n {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n {% do adapter.commit() %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.drop_relation_if_exists", "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5593994, "supported_languages": null }, "macro.elementary.postgres__create_or_replace": { "name": "postgres__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.postgres__create_or_replace", "macro_sql": "{% macro postgres__create_or_replace(temporary, relation, sql_query) %}\n {% do run_query(\"BEGIN\") %}\n {% do dbt.drop_relation_if_exists(relation) %}\n {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n {% do run_query(\"COMMIT\") %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.drop_relation_if_exists", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.560151, "supported_languages": null }, "macro.elementary.spark__create_or_replace": { "name": "spark__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.spark__create_or_replace", "macro_sql": "{% macro spark__create_or_replace(temporary, relation, sql_query) %}\n {% do dbt.drop_relation_if_exists(relation) %}\n {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n {% do adapter.commit() %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.drop_relation_if_exists", "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.560792, "supported_languages": null }, "macro.elementary.remove_rows": { "name": "remove_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/remove_rows.sql", "original_file_path": "macros/utils/table_operations/remove_rows.sql", "unique_id": "macro.elementary.remove_rows", "macro_sql": "{% macro remove_rows(table_name) %}\n\n {% set remove_rows_query %}\n delete from {{ table_name }}\n {% endset %}\n {% do run_query(remove_rows_query) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.561359, "supported_languages": null }, "macro.elementary.table_name_with_suffix": { "name": "table_name_with_suffix", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/table_name_with_suffix.sql", "original_file_path": "macros/utils/table_operations/table_name_with_suffix.sql", "unique_id": "macro.elementary.table_name_with_suffix", "macro_sql": "{% macro table_name_with_suffix(table_name, suffix) %}\n {% set relation_max_name_length = elementary.get_relation_max_name_length() %}\n {% if relation_max_name_length %}\n {% set suffix_length = suffix | length %}\n {% set table_name_with_suffix = table_name[:relation_max_name_length - suffix_length] ~ suffix %}\n {% else %}\n {% set table_name_with_suffix = table_name ~ suffix %}\n {% endif %}\n {{ return(table_name_with_suffix) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_relation_max_name_length" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5625565, "supported_languages": null }, "macro.elementary.create_temp_table": { "name": "create_temp_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_temp_table.sql", "original_file_path": "macros/utils/table_operations/create_temp_table.sql", "unique_id": "macro.elementary.create_temp_table", "macro_sql": "{% macro create_temp_table(database_name, schema_name, table_name, sql_query) %}\n {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n schema=schema_name,\n identifier=table_name,\n type='table') -%}\n {% if temp_table_exists %}\n {% do adapter.drop_relation(temp_table_relation) %}\n {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n {% else %}\n {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n {% endif %}\n {{ return(temp_table_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_or_create_relation", "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5641804, "supported_languages": null }, "macro.elementary.insert_rows": { "name": "insert_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.insert_rows", "macro_sql": "{% macro insert_rows(table_relation, rows, should_commit=false, chunk_size=5000) %}\n {% if not rows %}\n {{ return(none) }}\n {% endif %}\n\n {% if not table_relation %}\n {{ elementary.edr_log('Unable to insert rows to non-existent table. Please run \"dbt run -s elementary\".') }}\n {{ return(none) }}\n {% endif %}\n\n {% set columns = adapter.get_columns_in_relation(table_relation) -%}\n {% if not columns %}\n {% set table_name = elementary.relation_to_full_name(table_relation) %}\n {{ elementary.edr_log('Could not extract columns for table - ' ~ table_name ~ ' (might be a permissions issue)') }}\n {{ return(none) }}\n {% endif %}\n\n {{ elementary.debug_log('Inserting {} rows to table {}'.format(rows | length, table_relation)) }}\n {% set insert_rows_method = elementary.get_config_var('insert_rows_method') %}\n {% if insert_rows_method == 'max_query_size' %}\n {% set insert_rows_queries = elementary.get_insert_rows_queries(table_relation, columns, rows) %}\n {% set queries_len = insert_rows_queries | length %}\n {% for insert_query in insert_rows_queries %}\n {% do elementary.debug_log(\"[{}/{}] Running insert query.\".format(loop.index, queries_len)) %}\n {% do dbt.run_query(insert_query) %}\n {% endfor %}\n {% elif insert_rows_method == 'chunk' %}\n {% set rows_chunks = elementary.split_list_to_chunks(rows, chunk_size) %}\n {% for rows_chunk in rows_chunks %}\n {% set insert_rows_query = elementary.get_chunk_insert_query(table_relation, columns, rows_chunk) %}\n {% do run_query(insert_rows_query) %}\n {% endfor %}\n {% else %}\n {% do exceptions.raise_compiler_error(\"Specified invalid value for 'insert_rows_method' var.\") %}\n {% endif %}\n\n {% if should_commit %}\n {% do adapter.commit() %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.edr_log", "macro.elementary.relation_to_full_name", "macro.elementary.debug_log", "macro.elementary.get_config_var", "macro.elementary.get_insert_rows_queries", "macro.dbt.run_query", "macro.elementary.split_list_to_chunks", "macro.elementary.get_chunk_insert_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5787427, "supported_languages": null }, "macro.elementary.get_insert_rows_queries": { "name": "get_insert_rows_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.get_insert_rows_queries", "macro_sql": "{% macro get_insert_rows_queries(table_relation, columns, rows, query_max_size=elementary.get_config_var('query_max_size')) -%}\n {% set insert_queries = [] %}\n {% set insert_query %}\n insert into {{ table_relation }}\n ({%- for column in columns -%}\n {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n {%- endfor -%}) values\n {% endset %}\n\n {% set current_query = namespace(data=insert_query) %}\n {% for row in rows %}\n {% set rendered_column_values = [] %}\n {% for column in columns %}\n {% set column_value = elementary.insensitive_get_dict_value(row, column.name) %}\n {% do rendered_column_values.append(elementary.render_value(column_value)) %}\n {% endfor %}\n {% set row_sql = \"({})\".format(rendered_column_values | join(\",\")) %}\n {% set query_with_row = current_query.data + (\",\" if not loop.first else \"\") + row_sql %}\n\n {% if query_with_row | length > query_max_size %}\n {% if loop.first %}\n {% do exceptions.raise_compiler_error(\"First row to be inserted exceeds 'query_max_size'. Consider increasing its value.\") %}\n {% endif %}\n {% do insert_queries.append(current_query.data) %}\n {% set current_query.data = insert_query + row_sql %}\n {% else %}\n {% set current_query.data = query_with_row %}\n {% endif %}\n {% if loop.last %}\n {% do insert_queries.append(current_query.data) %}\n {% endif %}\n {% endfor %}\n\n {{ return(insert_queries) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.get_config_var", "macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.581983, "supported_languages": null }, "macro.elementary.get_chunk_insert_query": { "name": "get_chunk_insert_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.get_chunk_insert_query", "macro_sql": "{% macro get_chunk_insert_query(table_relation, columns, rows) -%}\n {% set insert_rows_query %}\n insert into {{ table_relation }}\n ({%- for column in columns -%}\n {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n {%- endfor -%}) values\n {% for row in rows -%}\n ({%- for column in columns -%}\n {%- set column_value = elementary.insensitive_get_dict_value(row, column.name, none) -%}\n {{ elementary.render_value(column_value) }}\n {{- \",\" if not loop.last else \"\" -}}\n {%- endfor -%}) {{- \",\" if not loop.last else \"\" -}}\n {%- endfor -%}\n {% endset %}\n {{ return(insert_rows_query) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.583557, "supported_languages": null }, "macro.elementary.escape_special_chars": { "name": "escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.escape_special_chars", "macro_sql": "{% macro escape_special_chars(string_value) %}\n {{ return(adapter.dispatch('escape_special_chars', 'elementary')(string_value)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__escape_special_chars" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5839837, "supported_languages": null }, "macro.elementary.default__escape_special_chars": { "name": "default__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.default__escape_special_chars", "macro_sql": "\n\n{%- macro default__escape_special_chars(string_value) -%}\n {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\") | replace(\"\\r\", \"\\\\r\")) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5845683, "supported_languages": null }, "macro.elementary.redshift__escape_special_chars": { "name": "redshift__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.redshift__escape_special_chars", "macro_sql": "{%- macro redshift__escape_special_chars(string_value) -%}\n {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\") | replace(\"\\r\", \"\\\\r\")) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5851471, "supported_languages": null }, "macro.elementary.postgres__escape_special_chars": { "name": "postgres__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.postgres__escape_special_chars", "macro_sql": "{%- macro postgres__escape_special_chars(string_value) -%}\n {{- return(string_value | replace(\"'\", \"''\")) -}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5854986, "supported_languages": null }, "macro.elementary.render_value": { "name": "render_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.render_value", "macro_sql": "{%- macro render_value(value) -%}\n {%- if value is defined and value is not none -%}\n {%- if value is number -%}\n {{- value -}}\n {%- elif value is string -%}\n '{{- elementary.escape_special_chars(value) -}}'\n {%- elif value is mapping or value is sequence -%}\n '{{- elementary.escape_special_chars(tojson(value)) -}}'\n {%- else -%}\n NULL\n {%- endif -%}\n {%- else -%}\n NULL\n {%- endif -%}\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.elementary.escape_special_chars" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.586524, "supported_languages": null }, "macro.elementary.get_relation_max_name_length": { "name": "get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.get_relation_max_name_length", "macro_sql": "{% macro get_relation_max_name_length() %}\n {{ return(adapter.dispatch('get_relation_max_name_length', 'elementary')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__get_relation_max_name_length" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5872343, "supported_languages": null }, "macro.elementary.default__get_relation_max_name_length": { "name": "default__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.default__get_relation_max_name_length", "macro_sql": "{% macro default__get_relation_max_name_length(temporary, relation, sql_query) %}\n {{ return(none) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.587552, "supported_languages": null }, "macro.elementary.redshift__get_relation_max_name_length": { "name": "redshift__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.redshift__get_relation_max_name_length", "macro_sql": "{% macro redshift__get_relation_max_name_length(temporary, relation, sql_query) %}\n {{ return(127) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5878642, "supported_languages": null }, "macro.elementary.postgres__get_relation_max_name_length": { "name": "postgres__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.postgres__get_relation_max_name_length", "macro_sql": "{% macro postgres__get_relation_max_name_length(temporary, relation, sql_query) %}\n {{ return(63) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5881722, "supported_languages": null }, "macro.elementary.spark__get_relation_max_name_length": { "name": "spark__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.spark__get_relation_max_name_length", "macro_sql": "{% macro spark__get_relation_max_name_length(temporary, relation, sql_query) %}\n {{ return(127) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5884764, "supported_languages": null }, "macro.elementary.replace_table_data": { "name": "replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.replace_table_data", "macro_sql": "{% macro replace_table_data(relation, rows) %}\n {{ return(adapter.dispatch('replace_table_data', 'elementary')(relation, rows)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.snowflake__replace_table_data" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5897884, "supported_languages": null }, "macro.elementary.default__replace_table_data": { "name": "default__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.default__replace_table_data", "macro_sql": "{% macro default__replace_table_data(relation, rows) %}\n {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=True) %}\n {% do dbt.run_query(dbt.create_table_as(False, relation, 'select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {}'.format(intermediate_relation))) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.create_intermediate_relation", "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5905094, "supported_languages": null }, "macro.elementary.spark__replace_table_data": { "name": "spark__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.spark__replace_table_data", "macro_sql": "{% macro spark__replace_table_data(relation, rows) %}\n {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=False) %}\n {% do dbt.run_query(dbt.create_table_as(False, relation, 'select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {}'.format(intermediate_relation))) %}\n {% do adapter.drop_relation(intermediate_relation) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.create_intermediate_relation", "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.59132, "supported_languages": null }, "macro.elementary.snowflake__replace_table_data": { "name": "snowflake__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.snowflake__replace_table_data", "macro_sql": "{% macro snowflake__replace_table_data(relation, rows) %}\n {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=False) %}\n {% do dbt.run_query(\"alter table {} swap with {}\".format(relation, intermediate_relation)) %}\n {% do adapter.drop_relation(intermediate_relation) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.create_intermediate_relation", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.592049, "supported_languages": null }, "macro.elementary.postgres__replace_table_data": { "name": "postgres__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.postgres__replace_table_data", "macro_sql": "{% macro postgres__replace_table_data(relation, rows) %}\n {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=True) %}\n\n {% set query %}\n begin transaction;\n delete from {{ relation }}; -- truncate supported in Redshift transactions, but causes an immediate commit\n insert into {{ relation }} select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ intermediate_relation }};\n commit;\n {% endset %}\n {% do dbt.run_query(query) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.create_intermediate_relation", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5928252, "supported_languages": null }, "macro.elementary.create_intermediate_relation": { "name": "create_intermediate_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.create_intermediate_relation", "macro_sql": "{% macro create_intermediate_relation(base_relation, rows, temporary) %}\n {% if temporary %}\n {% set int_relation = dbt.make_temp_relation(base_relation) %}\n {% else %}\n {# for non temporary relations - make sure the name is unique #}\n {% set int_suffix = modules.datetime.datetime.utcnow().strftime('__tmp_%Y%m%d%H%M%S%f') %}\n {% set int_relation = dbt.make_temp_relation(base_relation, suffix=int_suffix).incorporate(type='table') %}\n {% endif %}\n\n {% do elementary.create_table_like(int_relation, base_relation, temporary=temporary) %}\n {% do elementary.insert_rows(int_relation, rows, should_commit, elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n\n {% do return(int_relation) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_temp_relation", "macro.elementary.create_table_like", "macro.elementary.insert_rows", "macro.elementary.get_config_var" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5943558, "supported_languages": null }, "macro.elementary.merge_sql": { "name": "merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.merge_sql", "macro_sql": "{% macro merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates=none) -%}\n {{ return(adapter.dispatch('merge_sql', 'elementary')(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.elementary.default__merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5954313, "supported_languages": null }, "macro.elementary.default__merge_sql": { "name": "default__merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.default__merge_sql", "macro_sql": "{% macro default__merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates) %}\n {% set macro = dbt.get_merge_sql %}\n {% if \"incremental_predicates\" in macro.get_macro().arguments %}\n {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) %}\n {% endif %}\n {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns)) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5964673, "supported_languages": null }, "macro.elementary.postgres__merge_sql": { "name": "postgres__merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.postgres__merge_sql", "macro_sql": "{% macro postgres__merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates) %}\n {% set macro = dbt.get_delete_insert_merge_sql %}\n {% if \"incremental_predicates\" in macro.get_macro().arguments %}\n {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) %}\n {% endif %}\n {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns)) %}\n {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5977147, "supported_languages": null }, "macro.elementary.insert_as_select": { "name": "insert_as_select", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_as_select.sql", "original_file_path": "macros/utils/table_operations/insert_as_select.sql", "unique_id": "macro.elementary.insert_as_select", "macro_sql": "{% macro insert_as_select(table_relation, select_query) %}\n {# when calling this macro, you need to add depends on ref comment #}\n {# ref_model and select_query need to have the same columns #}\n\n {%- set insert_query %}\n insert into {{ table_relation }}\n with tmp_table as (\n {{ select_query }}\n )\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from tmp_table\n {%- endset %}\n\n {{ return(insert_query) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5986042, "supported_languages": null }, "macro.elementary.create_table_like": { "name": "create_table_like", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_table_like.sql", "original_file_path": "macros/utils/table_operations/create_table_like.sql", "unique_id": "macro.elementary.create_table_like", "macro_sql": "{% macro create_table_like(relation, like_relation, temporary=False) %}\n {% set empty_table_query = 'SELECT README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests FROM {} WHERE 1 = 0'.format(like_relation) %}\n {% do dbt.run_query(dbt.create_table_as(temporary, relation, empty_table_query)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.5995312, "supported_languages": null }, "macro.elementary.delete_if_incremental": { "name": "delete_if_incremental", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_if_incremental.sql", "original_file_path": "macros/utils/table_operations/delete_if_incremental.sql", "unique_id": "macro.elementary.delete_if_incremental", "macro_sql": "{% macro delete_if_incremental(where_clause) %}\n\n {% set query%}\n delete from {{ this }}\n where {{ where_clause }}\n {% endset %}\n\n {% if is_incremental() %}\n {% do run_query(query) %}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.is_incremental", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6005127, "supported_languages": null }, "macro.elementary.get_row_count": { "name": "get_row_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_row_count.sql", "original_file_path": "macros/utils/table_operations/get_row_count.sql", "unique_id": "macro.elementary.get_row_count", "macro_sql": "{% macro get_row_count(full_table_name) %}\n\n {% set query_row_count %}\n select count(*) from {{ full_table_name }}\n {% endset %}\n {% if execute %}\n {% set result = run_query(query_row_count).columns[0].values()[0] %}\n {% endif %}\n {{ return(result) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6014779, "supported_languages": null }, "macro.elementary.list_concat_with_separator": { "name": "list_concat_with_separator", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/sql_utils/list_concat_with_separator.sql", "original_file_path": "macros/utils/sql_utils/list_concat_with_separator.sql", "unique_id": "macro.elementary.list_concat_with_separator", "macro_sql": "{% macro list_concat_with_separator(item_list, separator, handle_nulls = true) %}\n {% set new_list = [] %}\n {% for item in item_list %}\n {% set new_item = item %}\n {% if handle_nulls %}\n {% set new_item = \"case when \" ~ elementary.cast_as_string(item) ~ \" is null then 'NULL' else \" ~ elementary.cast_as_string(item) ~ \" end\" %}\n {% endif %}\n {% do new_list.append(new_item) %}\n {% if not loop.last %}\n {% do new_list.append(elementary.quote(separator)) %}\n {% endif %}\n {% endfor %}\n {{ return(elementary.join_list(new_list, \" || \")) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.elementary.cast_as_string", "macro.elementary.quote", "macro.elementary.join_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.603552, "supported_languages": null }, "macro.metrics.develop": { "name": "develop", "resource_type": "macro", "package_name": "metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "unique_id": "macro.metrics.develop", "macro_sql": "{%- macro develop(develop_yml, metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) -%}\n {{ return(adapter.dispatch('develop', 'metrics')(develop_yml, metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where, date_alias)) }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [ "macro.metrics.default__develop" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6053443, "supported_languages": null }, "macro.metrics.default__develop": { "name": "default__develop", "resource_type": "macro", "package_name": "metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "unique_id": "macro.metrics.default__develop", "macro_sql": "{% macro default__develop(develop_yml, metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) -%}\n {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n\n {% if not execute -%}\n {%- do return(\"not execute\") -%}\n {%- endif %}\n\n {%- if metric_list is string -%}\n {%- set metric_list = [metric_list] -%}\n {%- endif -%}\n\n {# For the sake of consistency with metrics definition and the ability to easily\n reference the metric object, we are creating a metrics_dictionary for set of metrics\n included in the provided yml. This is used to construct the metric tree #}\n {%- set develop_yml = fromyaml(develop_yml) -%}\n\n {% set develop_dictionary = {} %}\n {% for metric_definition in develop_yml.metrics %}\n {% do develop_dictionary.update({metric_definition.name:{}}) %}\n {% do develop_dictionary.update({metric_definition.name:metric_definition}) %}\n {% endfor %}\n {% set develop_yml = develop_dictionary %}\n\n {# ############\n VALIDATION OF PROVIDED YML - Gotta make sure the metric looks good!\n ############ #}\n\n {%- do metrics.validate_develop_metrics(metric_list=metric_list, develop_yml=develop_yml) -%}\n\n {# ############\n VARIABLE SETTING - Creating the faux metric tree and faux metric list. The faux fur of 2022\n ############ #}\n\n {% set metric_tree = metrics.get_faux_metric_tree(metric_list=metric_list, develop_yml=develop_yml) %}\n\n {% set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree, develop_yml=develop_yml) %}\n\n {# ############\n SECONDARY VALIDATION - Gotta make sure everything else is good!\n ############ #}\n\n {%- do metrics.validate_timestamp(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, dimensions=dimensions) -%}\n\n {%- do metrics.validate_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n \n {%- do metrics.validate_dimension_list(dimensions=dimensions, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary) -%} \n\n {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%}\n\n {%- do metrics.validate_secondary_calculations(metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, grain=grain, secondary_calculations=secondary_calculations) -%} \n\n {%- do metrics.validate_where(where=where) -%} \n\n {# ############\n SQL GENERATION - Lets build that SQL!\n ############ -#}\n\n {%- set sql = metrics.get_metric_sql(\n metrics_dictionary=metrics_dictionary,\n grain=grain,\n dimensions=dimensions,\n secondary_calculations=secondary_calculations,\n start_date=start_date,\n end_date=end_date,\n where=where,\n date_alias=date_alias,\n metric_tree=metric_tree\n ) %}\n ({{ sql }}) metric_subq\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.validate_develop_metrics", "macro.metrics.get_faux_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_timestamp", "macro.metrics.validate_grain", "macro.metrics.validate_dimension_list", "macro.metrics.validate_metric_config", "macro.metrics.validate_secondary_calculations", "macro.metrics.validate_where", "macro.metrics.get_metric_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6094491, "supported_languages": null }, "macro.metrics.get_metric_sql": { "name": "get_metric_sql", "resource_type": "macro", "package_name": "metrics", "path": "macros/get_metric_sql.sql", "original_file_path": "macros/get_metric_sql.sql", "unique_id": "macro.metrics.get_metric_sql", "macro_sql": "{%- macro get_metric_sql(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, where, date_alias, metric_tree) %}\n\n{#- ############\nMost validation occurs in calculate and develop - please reference there for validation\n############ -#}\n\n{#- ############\nLETS SET SOME VARIABLES!\n############ -#}\n\n{#- We have to break out calendar dimensions as their own list of acceptable dimensions. \nThis is because of the date-spining. If we don't do this, it creates impossible combinations\nof calendar dimension + base dimensions -#}\n{%- set calendar_dimensions = metrics.get_calendar_dimensions(dimensions) -%}\n\n{#- Additionally, we also have to restrict the dimensions coming in from the macro to \nno longer include those we've designated as calendar dimensions. That way they \nare correctly handled by the spining. We override the dimensions variable for \ncleanliness -#}\n{%- set non_calendar_dimensions = metrics.get_non_calendar_dimension_list(dimensions, var('custom_calendar_dimension_list',[])) -%}\n\n{#- Finally we set the relevant periods, which is a list of all time grains that need to be contained\nwithin the final dataset in order to accomplish base + secondary calc functionality. -#}\n{%- set relevant_periods = metrics.get_relevent_periods(grain, secondary_calculations) -%}\n\n{#- Setting a variable to denote if the user has provided any dimensions -#}\n{%- if non_calendar_dimensions | length > 0 -%}\n {%- set dimensions_provided = true -%}\n{%- else -%}\n {%- set dimensions_provided = false -%}\n{%- endif -%}\n\n{#- Here we set the calendar table as a variable, which ensures the default overwritten if they include\na custom calendar -#}\n{%- set calendar_tbl = ref(var('dbt_metrics_calendar_model', \"dbt_metrics_default_calendar\")) -%}\n\n{#- Here we get the total dimension count for grouping -#}\n{%- set total_dimension_count = metrics.get_total_dimension_count(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n\n{#- Here we are creating the metric grouping that we use to determine if metrics can be pulled from the same base query -#}\n{%- set models_grouping = metrics.get_models_grouping(metric_tree=metric_tree,metrics_dictionary=metrics_dictionary) -%}\n{#- ############\nLET THE COMPOSITION BEGIN!\n############ -#}\n\n{#- First we add the calendar table - we only need to do this once no matter how many\nmetrics there are -#}\n{{ metrics.gen_calendar_cte(\n calendar_tbl=calendar_tbl,\n start_date=start_date, \n end_date=end_date) \n }}\n{#- Next we check if it is a composite metric or single metric by checking the length of the list -#}\n{#- This filter forms the basis of how we construct the SQL -#}\n{#- If composite, we begin by looping through each of the metric names that make\nup the composite metric. -#}\n\n{%- for group_name, group_values in models_grouping.items() -%}\n\n {{ metrics.build_metric_sql(\n metrics_dictionary=metrics_dictionary, \n grain=grain, \n dimensions=non_calendar_dimensions, \n secondary_calculations=secondary_calculations, \n start_date=start_date, \n end_date=end_date,\n relevant_periods=relevant_periods,\n calendar_dimensions=calendar_dimensions,\n dimensions_provided=dimensions_provided,\n total_dimension_count=total_dimension_count,\n group_name=group_name,\n group_values=group_values\n ) \n }}\n\n{%- endfor -%}\n\n{%- if models_grouping| length > 1 or metric_tree['derived_set'] | length > 0 -%}\n\n {{ metrics.gen_joined_metrics_cte(\n metric_tree=metric_tree,\n metrics_dictionary=metrics_dictionary,\n models_grouping=models_grouping,\n grain=grain, \n dimensions=non_calendar_dimensions, \n calendar_dimensions=calendar_dimensions, \n secondary_calculations=secondary_calculations, \n relevant_periods=relevant_periods,\n total_dimension_count=total_dimension_count ) \n }}\n\n{%- endif -%}\n\n{{ metrics.gen_final_cte(\n metric_tree=metric_tree,\n metrics_dictionary=metrics_dictionary,\n models_grouping=models_grouping,\n grain=grain, \n dimensions=non_calendar_dimensions, \n calendar_dimensions=calendar_dimensions, \n relevant_periods=relevant_periods,\n secondary_calculations=secondary_calculations,\n where=where,\n date_alias=date_alias) \n }} \n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_calendar_dimensions", "macro.metrics.get_non_calendar_dimension_list", "macro.metrics.get_relevent_periods", "macro.metrics.get_total_dimension_count", "macro.metrics.get_models_grouping", "macro.metrics.gen_calendar_cte", "macro.metrics.build_metric_sql", "macro.metrics.gen_joined_metrics_cte", "macro.metrics.gen_final_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6143057, "supported_languages": null }, "macro.metrics.calculate": { "name": "calculate", "resource_type": "macro", "package_name": "metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "unique_id": "macro.metrics.calculate", "macro_sql": "{% macro calculate(metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) %}\n {{ return(adapter.dispatch('calculate', 'metrics')(metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where, date_alias)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__calculate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6159945, "supported_languages": null }, "macro.metrics.default__calculate": { "name": "default__calculate", "resource_type": "macro", "package_name": "metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "unique_id": "macro.metrics.default__calculate", "macro_sql": "{% macro default__calculate(metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) %}\n {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n \n {#- ############\n VARIABLE SETTING - Creating the metric tree and making sure metric list is a list!\n ############ -#}\n\n {%- if metric_list is not iterable -%}\n {%- set metric_list = [metric_list] -%}\n {%- endif -%}\n\n {%- set metric_tree = metrics.get_metric_tree(metric_list=metric_list) -%}\n\n {#- Here we are creating the metrics dictionary which contains all of the metric information needed for sql gen. -#}\n {%- set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree) -%}\n\n {#- ############\n VALIDATION - Make sure everything is good!\n ############ -#}\n\n {%- if not execute -%}\n {%- do return(\"Did not execute\") -%}\n {%- endif -%}\n\n {%- if not metric_list -%}\n {%- do exceptions.raise_compiler_error(\"No metric or metrics provided\") -%}\n {%- endif -%}\n\n {%- do metrics.validate_timestamp(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, dimensions=dimensions) -%}\n\n {%- do metrics.validate_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n\n {%- do metrics.validate_derived_metrics(metric_tree=metric_tree) -%}\n\n {%- do metrics.validate_dimension_list(dimensions=dimensions, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary) -%} \n\n {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%} \n\n {%- do metrics.validate_where(where=where) -%} \n\n {%- do metrics.validate_secondary_calculations(metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, grain=grain, secondary_calculations=secondary_calculations) -%} \n\n {#- ############\n SQL GENERATION - Lets build that SQL!\n ############ -#}\n\n {%- set sql = metrics.get_metric_sql(\n metrics_dictionary=metrics_dictionary,\n grain=grain,\n dimensions=dimensions,\n secondary_calculations=secondary_calculations,\n start_date=start_date,\n end_date=end_date,\n where=where,\n date_alias=date_alias,\n metric_tree=metric_tree\n ) %}\n\n({{ sql }}) metric_subq \n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.get_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_timestamp", "macro.metrics.validate_grain", "macro.metrics.validate_derived_metrics", "macro.metrics.validate_dimension_list", "macro.metrics.validate_metric_config", "macro.metrics.validate_where", "macro.metrics.validate_secondary_calculations", "macro.metrics.get_metric_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6193168, "supported_languages": null }, "macro.metrics.metric_get_intervals_between": { "name": "metric_get_intervals_between", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_get_intervals_between", "macro_sql": "{% macro metric_get_intervals_between(start_date, end_date, datepart) -%}\n {{ return(adapter.dispatch('metric_get_intervals_between', 'metrics')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__metric_get_intervals_between" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6217725, "supported_languages": null }, "macro.metrics.default__metric_get_intervals_between": { "name": "default__metric_get_intervals_between", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_get_intervals_between", "macro_sql": "{% macro default__metric_get_intervals_between(start_date, end_date, datepart) -%}\n {%- call statement('metric_get_intervals_between', fetch_result=True) %}\n\n select {{ datediff(start_date, end_date, datepart) }}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('metric_get_intervals_between') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values[0]) }}\n {%- else -%}\n {{ return(1) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6230083, "supported_languages": null }, "macro.metrics.metric_date_spine": { "name": "metric_date_spine", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_date_spine", "macro_sql": "{% macro metric_date_spine(datepart, start_date, end_date) %}\n {{ return(adapter.dispatch('metric_date_spine', 'metrics')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__metric_date_spine" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6234982, "supported_languages": null }, "macro.metrics.default__metric_date_spine": { "name": "default__metric_date_spine", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_date_spine", "macro_sql": "{% macro default__metric_date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\nmetric_date_spine(\n \"day\",\n \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n {{metrics.metric_generate_series(\n metrics.metric_get_intervals_between(start_date, end_date, datepart)\n )}}\n\n),\n\nall_periods as (\n\n select (\n {{\n dateadd(\n datepart,\n \"row_number() over (order by 1) - 1\",\n start_date\n )\n }}\n ) as date_{{datepart}}\n from rawdata\n\n),\n\nfiltered as (\n\n select *\n from all_periods\n where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from filtered\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.metric_generate_series", "macro.metrics.metric_get_intervals_between", "macro.dbt_utils.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6242385, "supported_languages": null }, "macro.metrics.metric_get_powers_of_two": { "name": "metric_get_powers_of_two", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_get_powers_of_two", "macro_sql": "{% macro metric_get_powers_of_two(upper_bound) %}\n {{ return(adapter.dispatch('metric_get_powers_of_two', 'metrics')(upper_bound)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__metric_get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6246364, "supported_languages": null }, "macro.metrics.default__metric_get_powers_of_two": { "name": "default__metric_get_powers_of_two", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_get_powers_of_two", "macro_sql": "{% macro default__metric_get_powers_of_two(upper_bound) %}\n\n {% if upper_bound <= 0 %}\n {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n {% endif %}\n\n {% for _ in range(1, 100) %}\n {% if upper_bound <= 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests loop.index %}{{ return(loop.index) }}{% endif %}\n {% endfor %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6255171, "supported_languages": null }, "macro.metrics.metric_generate_series": { "name": "metric_generate_series", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_generate_series", "macro_sql": "{% macro metric_generate_series(upper_bound) %}\n {{ return(adapter.dispatch('metric_generate_series', 'metrics')(upper_bound)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__metric_generate_series" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6259506, "supported_languages": null }, "macro.metrics.default__metric_generate_series": { "name": "default__metric_generate_series", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_generate_series", "macro_sql": "{% macro default__metric_generate_series(upper_bound) %}\n\n {% set n = metrics.metric_get_powers_of_two(upper_bound) %}\n\n with p as (\n select 0 as generated_number union all select 1\n ), unioned as (\n\n select\n\n {% for i in range(n) %}\n p{{i}}.generated_number README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests power(2, {{i}})\n {% if not loop.last %} + {% endif %}\n {% endfor %}\n + 1\n as generated_number\n\n from\n\n {% for i in range(n) %}\n p as p{{i}}\n {% if not loop.last %} cross join {% endif %}\n {% endfor %}\n\n )\n\n select *\n from unioned\n where generated_number <= {{upper_bound}}\n order by generated_number\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.metric_get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6271322, "supported_languages": null }, "macro.metrics.test_metric_equality": { "name": "test_metric_equality", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics.test_metric_equality", "macro_sql": "{% test metric_equality(model, compare_model, compare_columns=none) %}\n {{ return(adapter.dispatch('test_metric_equality', 'metrics')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.metrics.default__test_metric_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6296382, "supported_languages": null }, "macro.metrics.default__test_metric_equality": { "name": "default__test_metric_equality", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics.default__test_metric_equality", "macro_sql": "{% macro default__test_metric_equality(model, compare_model, compare_columns=none) %}\n\n{% set set_diff %}\n count(*) + coalesce(abs(\n sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do metrics._metric_is_relation(model, 'test_metric_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n {%- do metrics._metric_is_ephemeral(model, 'test_metric_equality') -%}\n {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ model }}\n\n),\n\nb as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n select {{compare_cols_csv}} from a\n {{ except() }}\n select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n select {{compare_cols_csv}} from b\n {{ except() }}\n select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n union all\n select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics._metric_is_relation", "macro.metrics._metric_is_ephemeral", "macro.dbt_utils.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6314838, "supported_languages": null }, "macro.metrics._metric_is_relation": { "name": "_metric_is_relation", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics._metric_is_relation", "macro_sql": "{% macro _metric_is_relation(obj, macro) %}\n {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6322734, "supported_languages": null }, "macro.metrics._metric_is_ephemeral": { "name": "_metric_is_ephemeral", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics._metric_is_ephemeral", "macro_sql": "{% macro _metric_is_ephemeral(obj, macro) %}\n {%- if obj.is_cte -%}\n {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n {% if obj.name.startswith(ephemeral_prefix) %}\n {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n {% else %}\n {% set model_name = obj.name %}\n {%- endif -%}\n {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n {% endset %}\n {%- do exceptions.raise_compiler_error(error_message) -%}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.633496, "supported_languages": null }, "macro.metrics.build_metric_sql": { "name": "build_metric_sql", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/build_metric_sql.sql", "original_file_path": "macros/sql_gen/build_metric_sql.sql", "unique_id": "macro.metrics.build_metric_sql", "macro_sql": "{%- macro build_metric_sql(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, dimensions_provided, total_dimension_count, group_name, group_values) %}\n \n {#- This is the SQL Gen part - we've broken each component out into individual macros -#}\n {#- We broke this out so it can loop for composite metrics -#}\n {{ metrics.gen_aggregate_cte(\n metrics_dictionary=metrics_dictionary,\n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations,\n start_date=start_date, \n end_date=end_date, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions,\n total_dimension_count=total_dimension_count,\n group_name=group_name,\n group_values=group_values\n ) }}\n \n {#- Diverging path for secondary calcs and needing to datespine -#}\n {%- if grain and secondary_calculations | length > 0 -%}\n\n {%- if dimensions_provided == true -%}\n \n {{ metrics.gen_dimensions_cte(\n group_name=group_name, \n dimensions=dimensions\n ) }}\n \n {%- endif -%}\n\n {{ metrics.gen_spine_time_cte(\n group_name=group_name, \n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions, \n dimensions_provided=dimensions_provided\n )}}\n\n {%- endif -%}\n\n {{ metrics.gen_metric_cte(\n metrics_dictionary=metrics_dictionary,\n group_name=group_name, \n group_values=group_values,\n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations, \n start_date=start_date, \n end_date=end_date, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions\n )}} \n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.gen_aggregate_cte", "macro.metrics.gen_dimensions_cte", "macro.metrics.gen_spine_time_cte", "macro.metrics.gen_metric_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6366138, "supported_languages": null }, "macro.metrics.gen_group_by": { "name": "gen_group_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "unique_id": "macro.metrics.gen_group_by", "macro_sql": "{%- macro gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n {{ return(adapter.dispatch('gen_group_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.637689, "supported_languages": null }, "macro.metrics.default__gen_group_by": { "name": "default__gen_group_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "unique_id": "macro.metrics.default__gen_group_by", "macro_sql": "{%- macro default__gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n\n{#- This model exclusively exists because dynamic group by counts based on range \nwere too funky when we hardcoded values for 1+1. So we're getting around it by\nmaking it its own function -#}\n\n{#- The issue arises when we have an initial date column (ie date_month) where month \nis also included in the relevent periods. This causes issues and so we need to\nremove the grain from the list of relevant periods so it isnt double counted -#}\n\n {%- set total_dimension_count = metrics.get_total_dimension_count(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n\n {%- if grain -%}\n group by {% for number in range(1,total_dimension_count+1) -%}{{ number }}{%- if not loop.last -%}, {% endif -%}\n {%- endfor -%}\n {%- else -%}\n {%- if total_dimension_count > 0 -%}\n group by {% for number in range(1,total_dimension_count+1) -%}{{ number }} {%- if not loop.last -%}, {% endif -%}\n {%- endfor -%}\n {%- endif -%}\n {%- endif -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.get_total_dimension_count" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.639122, "supported_languages": null }, "macro.metrics.gen_spine_time_cte": { "name": "gen_spine_time_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "unique_id": "macro.metrics.gen_spine_time_cte", "macro_sql": "{%- macro gen_spine_time_cte(group_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) -%}\n {{ return(adapter.dispatch('gen_spine_time_cte', 'metrics')(group_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_spine_time_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6405387, "supported_languages": null }, "macro.metrics.default__gen_spine_time_cte": { "name": "default__gen_spine_time_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "unique_id": "macro.metrics.default__gen_spine_time_cte", "macro_sql": "{% macro default__gen_spine_time_cte(group_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) %}\n\n, {{group_name}}__spine_time as (\n\n select\n calendar.date_{{grain}}\n {%- if secondary_calculations | length > 0 -%}\n {% for period in relevant_periods %}\n {%- if period != grain -%}\n , calendar.date_{{ period }}\n {%- endif -%}\n {% endfor -%}\n {% endif -%}\n {% for calendar_dim in calendar_dimensions %}\n , calendar.{{ calendar_dim }}\n {%- endfor %}\n {%- for dim in dimensions %}\n , {{group_name}}__dims.{{ dim }}\n {%- endfor %}\n from calendar\n {%- if dimensions_provided %}\n cross join {{group_name}}__dims\n {%- endif %}\n {{ metrics.gen_group_by(grain,dimensions,calendar_dimensions,relevant_periods) }}\n\n)\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.gen_group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6419954, "supported_languages": null }, "macro.metrics.gen_dimensions_cte": { "name": "gen_dimensions_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "unique_id": "macro.metrics.gen_dimensions_cte", "macro_sql": "{%- macro gen_dimensions_cte(group_name, dimensions) -%}\n {{ return(adapter.dispatch('gen_dimensions_cte', 'metrics')(group_name, dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_dimensions_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.642699, "supported_languages": null }, "macro.metrics.default__gen_dimensions_cte": { "name": "default__gen_dimensions_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "unique_id": "macro.metrics.default__gen_dimensions_cte", "macro_sql": "{% macro default__gen_dimensions_cte(group_name, dimensions) %}\n\n, {{group_name}}__dims as (\n\n select distinct\n {%- for dim in dimensions %}\n {{ dim }}{%- if not loop.last -%},{% endif -%}\n {%- endfor %}\n from {{group_name}}__aggregate\n)\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6432853, "supported_languages": null }, "macro.metrics.gen_aggregate_cte": { "name": "gen_aggregate_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "unique_id": "macro.metrics.gen_aggregate_cte", "macro_sql": "{%- macro gen_aggregate_cte(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) -%}\n {{ return(adapter.dispatch('gen_aggregate_cte', 'metrics')(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_aggregate_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6451032, "supported_languages": null }, "macro.metrics.default__gen_aggregate_cte": { "name": "default__gen_aggregate_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "unique_id": "macro.metrics.default__gen_aggregate_cte", "macro_sql": "{%- macro default__gen_aggregate_cte(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) %}\n\n, {{group_name}}__aggregate as (\n {# This is the most important CTE. Instead of joining all relevant information\n and THEN aggregating, we are instead aggregating from the beginning and then \n joining downstream for performance. Additionally, we're using a subquery instead \n of a CTE, which was significantly more performant during our testing. -#}\n {#- #}\n select\n\n {%- if grain %}\n date_{{grain}},\n\n {#- All of the other relevant periods that aren't currently selected as the grain\n are neccesary for downstream secondary calculations. We filter it on whether \n there are secondary calculations to reduce the need for overhead -#}\n {%- if secondary_calculations | length > 0 -%}\n {%- for period in relevant_periods %}\n date_{{ period }},\n {%- endfor -%}\n {% endif -%}\n {%- endif -%}\n\n {#- This is the consistent code you'll find that loops through the list of \n dimensions. It is used throughout this macro, with slight differences to \n account for comma syntax around loop last -#}\n {%- for dim in dimensions %}\n {{ dim }},\n {%- endfor %}\n\n {%- for calendar_dim in calendar_dimensions %}\n {{ calendar_dim }},\n {% endfor -%}\n\n {%- if grain %}\n {{ bool_or('metric_date_day is not null') }} as has_data,\n {%- endif %}\n\n {#- This line performs the relevant aggregation by calling the \n gen_primary_metric_aggregate macro. Take a look at that one if you're curious -#}\n {%- for metric_name in group_values.metric_names -%} \n {{ metrics.gen_primary_metric_aggregate(metrics_dictionary[metric_name].calculation_method, 'property_to_aggregate__'~metric_name) }} as {{ metric_name }}\n {%- if not loop.last -%},{%- endif -%}\n {%- endfor%}\n from ({{ metrics.gen_base_query(\n metrics_dictionary=metrics_dictionary,\n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations, \n start_date=start_date, \n end_date=end_date, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions,\n total_dimension_count=total_dimension_count,\n group_name=group_name,\n group_values=group_values\n )\n }}\n ) as base_query\n\n where 1=1\n {#- \n Given that we've already determined the metrics in metric_names share\n the same windows & filters, we can base the conditional off of the first \n value in the list because the order doesn't matter. \n -#}\n {%- if group_values.window is not none and grain %}\n and date_{{grain}} = window_filter_date\n {%- endif %}\n {{ metrics.gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n)\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt_utils.bool_or", "macro.metrics.gen_primary_metric_aggregate", "macro.metrics.gen_base_query", "macro.metrics.gen_group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6479583, "supported_languages": null }, "macro.metrics.gen_property_to_aggregate": { "name": "gen_property_to_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.gen_property_to_aggregate", "macro_sql": "{%- macro gen_property_to_aggregate(metric_dictionary, grain, dimensions, calendar_dimensions) -%}\n {{ return(adapter.dispatch('gen_property_to_aggregate', 'metrics')(metric_dictionary, grain, dimensions, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_property_to_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6517036, "supported_languages": null }, "macro.metrics.default__gen_property_to_aggregate": { "name": "default__gen_property_to_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__gen_property_to_aggregate", "macro_sql": "{% macro default__gen_property_to_aggregate(metric_dictionary, grain, dimensions, calendar_dimensions) %}\n {% if metric_dictionary.calculation_method == 'median' -%}\n {{ return(adapter.dispatch('property_to_aggregate_median', 'metrics')(metric_dictionary, grain, dimensions, calendar_dimensions)) }}\n\n {% elif metric_dictionary.calculation_method == 'count' -%}\n {{ return(adapter.dispatch('property_to_aggregate_count', 'metrics')(metric_dictionary)) }}\n\n {% elif metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n {{ return(adapter.dispatch('property_to_aggregate_default', 'metrics')(metric_dictionary)) }}\n\n {% else %}\n {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%} \n {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__property_to_aggregate_median", "macro.metrics.default__property_to_aggregate_count", "macro.metrics.default__property_to_aggregate_default" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.653408, "supported_languages": null }, "macro.metrics.default__property_to_aggregate_median": { "name": "default__property_to_aggregate_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__property_to_aggregate_median", "macro_sql": "{% macro default__property_to_aggregate_median(metric_dictionary, grain, dimensions, calendar_dimensions) %}\n ({{metric_dictionary.expression }}) as property_to_aggregate__{{metric_dictionary.name}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6538076, "supported_languages": null }, "macro.metrics.bigquery__property_to_aggregate_median": { "name": "bigquery__property_to_aggregate_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.bigquery__property_to_aggregate_median", "macro_sql": "{% macro bigquery__property_to_aggregate_median(metric_dictionary, grain, dimensions, calendar_dimensions) %}\n\n percentile_cont({{metric_dictionary.expression }}, 0.5) over (\n {% if grain or dimensions | length > 0 or calendar_dimensions | length > 0 -%}\n partition by \n {% if grain -%}\n calendar.date_{{ grain }}\n {%- endif %}\n {% for dim in dimensions -%}\n {%- if loop.first and not grain-%}\n base_model.{{ dim }}\n {%- else -%}\n ,base_model.{{ dim }}\n {%- endif -%}\n {%- endfor -%}\n {% for calendar_dim in calendar_dimensions -%}\n {%- if loop.first and dimensions | length == 0 and not grain %}\n calendar.{{ calendar_dim }}\n {%else -%}\n ,calendar.{{ calendar_dim }}\n {%- endif -%}\n {%- endfor %}\n {%- endif %}\n ) as property_to_aggregate__{{metric_dictionary.name}}\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.655369, "supported_languages": null }, "macro.metrics.default__property_to_aggregate_count": { "name": "default__property_to_aggregate_count", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__property_to_aggregate_count", "macro_sql": "{% macro default__property_to_aggregate_count(metric_dictionary) %}\n 1 as property_to_aggregate__{{metric_dictionary.name}}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6556385, "supported_languages": null }, "macro.metrics.default__property_to_aggregate_default": { "name": "default__property_to_aggregate_default", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__property_to_aggregate_default", "macro_sql": "{% macro default__property_to_aggregate_default(metric_dictionary) %}\n ({{metric_dictionary.expression }}) as property_to_aggregate__{{metric_dictionary.name}}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6559327, "supported_languages": null }, "macro.metrics.gen_joined_metrics_cte": { "name": "gen_joined_metrics_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "unique_id": "macro.metrics.gen_joined_metrics_cte", "macro_sql": "{%- macro gen_joined_metrics_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, total_dimension_count) -%}\n {{ return(adapter.dispatch('gen_joined_metrics_cte', 'metrics')(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, total_dimension_count)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_joined_metrics_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6625211, "supported_languages": null }, "macro.metrics.default__gen_joined_metrics_cte": { "name": "default__gen_joined_metrics_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "unique_id": "macro.metrics.default__gen_joined_metrics_cte", "macro_sql": "{% macro default__gen_joined_metrics_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, total_dimension_count) %}\n\n{#- This section is a hacky workaround to account for postgres changes -#}\n{%- set cte_numbers = [] -%}\n{%- set unique_cte_numbers = [] -%}\n{#- the cte numbers are more representative of node depth -#}\n{%- if metric_tree.derived_set | length > 0 -%}\n {%- for metric_name in metric_tree.ordered_derived_set -%}\n {%- do cte_numbers.append(metric_tree.ordered_derived_set[metric_name]) -%}\n {%- endfor -%}\n {%- for cte_num in cte_numbers|unique -%}\n {%- do unique_cte_numbers.append(cte_num) -%}\n {%- endfor -%}\n{%- endif -%}\n\n{%- set dimension_count = (dimensions | length + calendar_dimensions | length) | int %}\n, first_join_metrics as (\n\n select\n {% if grain -%}\n date_{{grain}},\n {%- endif -%}\n {%- for calendar_dim in calendar_dimensions %}\n coalesce(\n {%- for group_name, group_values in models_grouping.items() %}\n {{group_name}}__final.{{ calendar_dim }}{%- if not loop.last -%},{% endif %}\n {%- if models_grouping | length == 1 -%}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as {{calendar_dim}},\n {% endfor %}\n {%- for period in relevant_periods %}\n coalesce(\n {%- for group_name, group_values in models_grouping.items() %}\n {{group_name}}__final.date_{{ period }} {%- if not loop.last -%},{% endif %}\n {%- if models_grouping | length == 1 %}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as date_{{period}},\n {%- endfor %}\n {%- for dim in dimensions %}\n coalesce(\n {%- for group_name, group_values in models_grouping.items() %}\n {{group_name}}__final.{{ dim }} {%- if not loop.last -%},{% endif %}\n {%- if models_grouping | length == 1 %}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as {{dim}},\n {%- endfor %}\n\n {%- for metric_name in metric_tree.parent_set %}\n {%- if not metrics_dictionary[metric_name].config.get(\"treat_null_values_as_zero\", True) %}\n {{metric_name}} as {{metric_name}} {%- if not loop.last -%}, {%- endif -%}\n {%- else %} \n coalesce({{metric_name}},0) as {{metric_name}} {%- if not loop.last -%}, {%- endif -%}\n {%- endif %} \n {%- endfor %} \n {#- Loop through leaf metric list -#}\n {% for group_name, group_values in models_grouping.items() %}\n {%- if loop.first %}\n from {{ group_name }}__final\n {%- else %}\n {%- if grain %}\n full outer join {{group_name}}__final\n using (\n date_{{grain}}\n {%- for calendar_dim in calendar_dimensions %}\n , {{ calendar_dim }}\n {% endfor %}\n {%- for dim in dimensions %}\n , {{ dim }}\n {%- endfor %}\n )\n {%- else -%}\n {% if dimension_count != 0 %}\n full outer join {{group_name}}__final\n using (\n {%- for calendar_dim in calendar_dimensions -%}\n {%- if not loop.first -%},{%- endif -%} {{ calendar_dim }}\n {%- endfor -%}\n \n {%- for dim in dimensions %}\n {%- if loop.first and calendar_dimensions | length == 0 -%}\n {{ dim }}\n {%- elif not loop.first and calendar_dimensions | length == 0 -%}\n , {{ dim }}\n {%- else -%}\n , {{ dim }}\n {%- endif -%}\n {%- endfor -%}\n )\n {%- elif dimension_count == 0 %}\n cross join {{group_name}}__final\n {%- endif %}\n {%- endif %}\n {%- endif -%}\n {%- endfor %} \n{# #}\n)\n\n{%- for cte_number in cte_numbers | unique | sort %}\n{% set previous_cte_number = cte_number - 1 %}\n, join_metrics__{{cte_number}} as (\n\n select \n {%- if loop.first %}\n first_join_metrics.*\n {%- else %}\n join_metrics__{{previous_cte_number}}.*\n {%- endif %}\n {%- for metric_name in metric_tree.derived_set %}\n {%- if metric_tree.ordered_derived_set[metric_name] == cte_number %}\n {#- this logic will parse an expression for divisions signs (/) and wrap all divisors in nullif functions to prevent divide by zero -#}\n {#- \"1 / 2 / 3 / ... / N\" results in \"1 / nullif(2, 0) / nullif(3, 0) / ... / nullif(N, 0)\" -#}\n {%- set metric_expression = metrics_dictionary[metric_name].expression %}\n {%- if \"/\" in metric_expression -%}\n {%- set split_division_metric = metric_expression.split('/') -%}\n {%- set dividend = split_division_metric[0] -%}\n {%- set divisors = split_division_metric[1:] | list -%}\n {%- set expression = dividend ~ \" / nullif(\" ~ divisors | join(\", 0) / nullif(\") ~ \", 0)\" -%}\n {%- else -%}\n {%- set expression = metric_expression -%}\n {%- endif %}\n , ({{ expression | replace(\".metric_value\",\"\") }}) as {{ metrics_dictionary[metric_name].name }}\n {%- endif -%}\n {%- endfor -%}\n {% if loop.first %}\n from first_join_metrics\n {%- else %}\n from join_metrics__{{previous_cte_number}}\n {%- endif %}\n {# #}\n)\n \n{%- endfor %}\n\n, joined_metrics as (\n\n select \n\n {%- if grain %}\n date_{{grain}},\n {%- endif %}\n\n {%- for period in relevant_periods %}\n date_{{ period }},\n {%- endfor %}\n\n {%- for calendar_dim in calendar_dimensions %}\n {{ calendar_dim }},\n {%- endfor %}\n\n {%- for dim in dimensions %}\n {{ dim }},\n {%- endfor %}\n\n {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n {{metric_name}}{%- if not loop.last -%}, {%- endif -%}\n {%- endfor %} \n\n {%- if metric_tree.derived_set | length == 0 %}\n from first_join_metrics\n {%- else %}\n from join_metrics__999\n {%- endif %}\n\n)\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.672395, "supported_languages": null }, "macro.metrics.gen_final_cte": { "name": "gen_final_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "unique_id": "macro.metrics.gen_final_cte", "macro_sql": "{%- macro gen_final_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where, date_alias) -%}\n {{ return(adapter.dispatch('gen_final_cte', 'metrics')(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where, date_alias)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_final_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6752117, "supported_languages": null }, "macro.metrics.default__gen_final_cte": { "name": "default__gen_final_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "unique_id": "macro.metrics.default__gen_final_cte", "macro_sql": "{%- macro default__gen_final_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where, date_alias) %}\n\n{%- if secondary_calculations | length > 0 %}\n{#- This section is for queries using secondary calculations -#}\nselect \n date_{{grain}} {% if date_alias%}as {{date_alias}}{%endif%}\n {%- if secondary_calculations | length > 0 -%}\n {%- for period in relevant_periods %}\n ,date_{{ period }}\n {%- endfor %}\n {%- endif -%}\n {%- for dim in dimensions %}\n ,{{ dim }}\n {%- endfor %}\n {%- for calendar_dim in calendar_dimensions %}\n ,{{ calendar_dim }}\n {%- endfor %}\n {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n ,{{metric_name}}\n {%- endfor %} \n {{ metrics.gen_secondary_calculations(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions)}}\n {%- if models_grouping| length > 1 or metric_tree['derived_set'] | length > 0 %}\nfrom joined_metrics \n {%- else %} \nfrom {% for group_name, group_values in models_grouping.items()-%}{{group_name}}__final {%-endfor-%}\n {%- endif %}\n{# metric where clauses #}\n {%- if where %}\nwhere {{ where }}\n {%- endif %}\n{{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n{%- elif models_grouping| length > 1 or metric_tree['derived_set'] | length > 0 -%}\n{#- This section is for queries from multiple models or using derived metrics -#}\nselect \n {%- if grain %}\n date_{{grain}} {% if date_alias%}as {{date_alias}}{%endif%},\n {%- endif %}\n {%- for dim in dimensions %}\n {{ dim }},\n {%- endfor %}\n {%- for calendar_dim in calendar_dimensions %}\n {{ calendar_dim }},\n {%- endfor %}\n {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n {{metric_name}}{%- if not loop.last -%},{%- endif -%}\n {%- endfor %} \nfrom joined_metrics\n{#- metric where clauses -#}\n {%- if where %}\nwhere {{ where }}\n {%- endif -%}\n{{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n \n{%- else -%}\n{#- This section is for non-derived, non-secondary calc queries -#}\nselect \n {%- if grain %}\n date_{{grain}} {% if date_alias%}as {{date_alias}}{%endif%},\n {%- endif %}\n {%- for dim in dimensions %}\n {{ dim }},\n {%- endfor %}\n {%- for calendar_dim in calendar_dimensions %}\n {{ calendar_dim }},\n {% endfor -%}\n {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n {{metric_name}}{%- if not loop.last -%},{%- endif -%}\n {%- endfor %} \n {# {%- for metric_name in metric_tree.full_set %}\n {{metric_name}}{%if not loop.last%},{%endif%}\n {%- endfor %} #}\nfrom {% for group_name, group_values in models_grouping.items()-%}{{group_name}}__final {%-endfor-%}\n {%- if where %}\nwhere {{ where }}\n {%- endif -%}\n{{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n{%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.gen_secondary_calculations", "macro.metrics.gen_order_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6807125, "supported_languages": null }, "macro.metrics.gen_filters": { "name": "gen_filters", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_filters.sql", "original_file_path": "macros/sql_gen/gen_filters.sql", "unique_id": "macro.metrics.gen_filters", "macro_sql": "{%- macro gen_filters(model_values, start_date, end_date) -%}\n {{ return(adapter.dispatch('gen_filters', 'metrics')(model_values, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_filters" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6818345, "supported_languages": null }, "macro.metrics.default__gen_filters": { "name": "default__gen_filters", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_filters.sql", "original_file_path": "macros/sql_gen/gen_filters.sql", "unique_id": "macro.metrics.default__gen_filters", "macro_sql": "{%- macro default__gen_filters(model_values, start_date, end_date) -%}\n\n {#- metric start/end dates also applied here to limit incoming data -#}\n {% if start_date or end_date %}\n and (\n {% if start_date and end_date -%}\n cast(base_model.{{model_values.timestamp}} as date) >= cast('{{ start_date }}' as date)\n and cast(base_model.{{model_values.timestamp}} as date) <= cast('{{ end_date }}' as date)\n {%- elif start_date and not end_date -%}\n cast(base_model.{{model_values.timestamp}} as date) >= cast('{{ start_date }}' as date)\n {%- elif end_date and not start_date -%}\n cast(base_model.{{model_values.timestamp}} as date) <= cast('{{ end_date }}' as date)\n {%- endif %} \n )\n {% endif -%} \n\n {#- metric filter clauses... -#}\n {% if model_values.filters %}\n and (\n {% for filter in model_values.filters -%}\n {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n {% endfor -%}\n )\n {% endif -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.683439, "supported_languages": null }, "macro.metrics.gen_calendar_cte": { "name": "gen_calendar_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "unique_id": "macro.metrics.gen_calendar_cte", "macro_sql": "{%- macro gen_calendar_cte(calendar_tbl, start_date, end_date) -%}\n {{ return(adapter.dispatch('gen_calendar_cte', 'metrics')(calendar_tbl, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_calendar_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.684314, "supported_languages": null }, "macro.metrics.default__gen_calendar_cte": { "name": "default__gen_calendar_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "unique_id": "macro.metrics.default__gen_calendar_cte", "macro_sql": "{%- macro default__gen_calendar_cte(calendar_tbl, start_date, end_date) %}\n\nwith calendar as (\n {# This CTE creates our base calendar and then limits the date range for the \n start and end date provided by the macro call -#}\n select \n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests \n from {{ calendar_tbl }}\n {% if start_date or end_date %}\n {%- if start_date and end_date -%}\n where date_day >= cast('{{ start_date }}' as date)\n and date_day <= cast('{{ end_date }}' as date)\n {%- elif start_date and not end_date -%}\n where date_day >= cast('{{ start_date }}' as date)\n {%- elif end_date and not start_date -%}\n where date_day <= cast('{{ end_date }}' as date)\n {%- endif -%} \n {% endif %} \n)\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6852176, "supported_languages": null }, "macro.metrics.gen_metric_cte": { "name": "gen_metric_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "unique_id": "macro.metrics.gen_metric_cte", "macro_sql": "{%- macro gen_metric_cte(metrics_dictionary, group_name, group_values, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions) -%}\n {{ return(adapter.dispatch('gen_metric_cte', 'metrics')(metrics_dictionary, group_name, group_values, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_metric_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6882935, "supported_languages": null }, "macro.metrics.default__gen_metric_cte": { "name": "default__gen_metric_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "unique_id": "macro.metrics.default__gen_metric_cte", "macro_sql": "{%- macro default__gen_metric_cte(metrics_dictionary, group_name, group_values, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions) %}\n\n{%- set combined_dimensions = calendar_dimensions | list + dimensions | list -%}\n, {{group_name}}__final as (\n {# #}\n select\n {%- if grain %}\n parent_metric_cte.date_{{grain}},\n {%- if secondary_calculations | length > 0 -%}\n {% for period in relevant_periods %}\n parent_metric_cte.date_{{ period }},\n {%- endfor -%}\n {%- endif -%}\n {%- endif -%}\n \n {%- for calendar_dim in calendar_dimensions %}\n parent_metric_cte.{{ calendar_dim }},\n {%- endfor %}\n\n {%- for dim in dimensions %}\n parent_metric_cte.{{ dim }},\n {%- endfor %}\n\n {%- for metric_name in group_values.metric_names -%}\n {# TODO: coalesce based on the value. Need to bring this config #}\n {%- if not metrics_dictionary[metric_name].get(\"config\").get(\"treat_null_values_as_zero\", True) %}\n {{ metric_name }}\n {%- else %}\n coalesce({{ metric_name }}, 0) as {{ metric_name }}\n {%- endif %}\n {%- if not loop.last-%},{%endif%}\n {%- endfor %}\n\n {%- if secondary_calculations | length > 0 %}\n from {{group_name}}__spine_time as parent_metric_cte\n left outer join {{group_name}}__aggregate\n using (date_{{grain}} {%- if combined_dimensions | length > 0 -%}, {{ combined_dimensions | join(\", \") }} {%-endif-%} )\n\n {% if not start_date or not end_date -%}\n where (\n {% if not start_date and not end_date -%}\n parent_metric_cte.date_{{grain}} >= (\n select \n min(case when has_data then date_{{grain}} end) \n from {{group_name}}__aggregate\n )\n and parent_metric_cte.date_{{grain}} <= (\n select \n max(case when has_data then date_{{grain}} end) \n from {{group_name}}__aggregate\n )\n {% elif not start_date and end_date -%}\n parent_metric_cte.date_{{grain}} >= (\n select \n min(case when has_data then date_{{grain}} end) \n from {{group_name}}__aggregate\n )\n {% elif start_date and not end_date -%}\n parent_metric_cte.date_{{grain}} <= (\n select \n max(case when has_data then date_{{grain}} end) \n from {{group_name}}__aggregate\n )\n {%- endif %} \n )\n {%- endif %} \n\n {%- else %}\n from {{group_name}}__aggregate as parent_metric_cte\n {%- endif %}\n)\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.692149, "supported_languages": null }, "macro.metrics.gen_primary_metric_aggregate": { "name": "gen_primary_metric_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.gen_primary_metric_aggregate", "macro_sql": "{%- macro gen_primary_metric_aggregate(aggregate, expression) -%}\n {{ return(adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(aggregate, expression)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_primary_metric_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6963058, "supported_languages": null }, "macro.metrics.default__gen_primary_metric_aggregate": { "name": "default__gen_primary_metric_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__gen_primary_metric_aggregate", "macro_sql": "{%- macro default__gen_primary_metric_aggregate(aggregate, expression) -%}\n\n {%- if aggregate == 'count' -%}\n {{ return(adapter.dispatch('metric_count', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'count_distinct' -%}\n {{ return(adapter.dispatch('metric_count_distinct', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'average' -%}\n {{ return(adapter.dispatch('metric_average', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'max' -%}\n {{ return(adapter.dispatch('metric_max', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'min' -%}\n {{ return(adapter.dispatch('metric_min', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'sum' -%}\n {{ return(adapter.dispatch('metric_sum', 'metrics')(expression)) }}\n\n {%- elif aggregate == 'median' -%}\n {{ return(adapter.dispatch('metric_median', 'metrics')(expression)) }}\n\n {%- elif aggregate == 'derived' -%}\n {{ return(adapter.dispatch('metric_derived', 'metrics')(expression)) }}\n\n {%- else -%}\n {%- do exceptions.raise_compiler_error(\"Unknown aggregation style: \" ~ aggregate) -%} \n {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__metric_count", "macro.metrics.default__metric_count_distinct", "macro.metrics.default__metric_average", "macro.metrics.default__metric_max", "macro.metrics.default__metric_min", "macro.metrics.default__metric_sum", "macro.metrics.default__metric_median", "macro.metrics.default__metric_derived" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6990125, "supported_languages": null }, "macro.metrics.default__metric_count": { "name": "default__metric_count", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_count", "macro_sql": "{% macro default__metric_count(expression) %}\n count({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.699316, "supported_languages": null }, "macro.metrics.default__metric_count_distinct": { "name": "default__metric_count_distinct", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_count_distinct", "macro_sql": "{% macro default__metric_count_distinct(expression) %}\n count(distinct {{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6995614, "supported_languages": null }, "macro.metrics.default__metric_average": { "name": "default__metric_average", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_average", "macro_sql": "{% macro default__metric_average(expression) %}\n avg({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.6997898, "supported_languages": null }, "macro.metrics.redshift__metric_average": { "name": "redshift__metric_average", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.redshift__metric_average", "macro_sql": "{% macro redshift__metric_average(expression) %}\n avg(cast({{ expression }} as float))\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.700018, "supported_languages": null }, "macro.metrics.default__metric_max": { "name": "default__metric_max", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_max", "macro_sql": "{% macro default__metric_max(expression) %}\n max({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7002425, "supported_languages": null }, "macro.metrics.default__metric_min": { "name": "default__metric_min", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_min", "macro_sql": "{% macro default__metric_min(expression) %}\n min({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.700471, "supported_languages": null }, "macro.metrics.default__metric_sum": { "name": "default__metric_sum", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_sum", "macro_sql": "{% macro default__metric_sum(expression) %}\n sum({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7006955, "supported_languages": null }, "macro.metrics.default__metric_median": { "name": "default__metric_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_median", "macro_sql": "{% macro default__metric_median(expression) %}\n median({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7009284, "supported_languages": null }, "macro.metrics.bigquery__metric_median": { "name": "bigquery__metric_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.bigquery__metric_median", "macro_sql": "{% macro bigquery__metric_median(expression) %}\n any_value({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.701161, "supported_languages": null }, "macro.metrics.postgres__metric_median": { "name": "postgres__metric_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.postgres__metric_median", "macro_sql": "{% macro postgres__metric_median(expression) %}\n percentile_cont(0.5) within group (order by {{ expression }})\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7013936, "supported_languages": null }, "macro.metrics.default__metric_derived": { "name": "default__metric_derived", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_derived", "macro_sql": "{% macro default__metric_derived(expression) %}\n {{ expression }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.701614, "supported_languages": null }, "macro.metrics.gen_secondary_calculations": { "name": "gen_secondary_calculations", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_secondary_calculations.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations.sql", "unique_id": "macro.metrics.gen_secondary_calculations", "macro_sql": "{%- macro gen_secondary_calculations(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions) -%}\n {{ return(adapter.dispatch('gen_secondary_calculations', 'metrics')(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_secondary_calculations" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7027435, "supported_languages": null }, "macro.metrics.default__gen_secondary_calculations": { "name": "default__gen_secondary_calculations", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_secondary_calculations.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations.sql", "unique_id": "macro.metrics.default__gen_secondary_calculations", "macro_sql": "{% macro default__gen_secondary_calculations(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions) %}\n\n{%- for calc_config in secondary_calculations %}\n {%- if calc_config.metric_list | length > 0 -%}\n {%- for metric_name in calc_config.metric_list -%}\n ,{{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metrics_dictionary[metric_name].config) }}\n {%- endfor %} \n {%- else %}\n {%- for metric_name in metric_tree.base_set -%}\n , {{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metrics_dictionary[metric_name].config) }}\n {%- endfor %}\n {%- endif %}\n{%- endfor %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.perform_secondary_calculation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7042885, "supported_languages": null }, "macro.metrics.gen_order_by": { "name": "gen_order_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "unique_id": "macro.metrics.gen_order_by", "macro_sql": "{%- macro gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n {{ return(adapter.dispatch('gen_order_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_order_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.705002, "supported_languages": null }, "macro.metrics.default__gen_order_by": { "name": "default__gen_order_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "unique_id": "macro.metrics.default__gen_order_by", "macro_sql": "{% macro default__gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) %}\n {# #}\n {%- if grain %}\norder by 1 desc\n {% endif -%}\n {# #}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7053835, "supported_languages": null }, "macro.metrics.gen_calendar_join": { "name": "gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.gen_calendar_join", "macro_sql": "{% macro gen_calendar_join(group_values) %}\n {{ return(adapter.dispatch('gen_calendar_join', 'metrics')(group_values)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__gen_calendar_join" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7079515, "supported_languages": null }, "macro.metrics.default__gen_calendar_join": { "name": "default__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.default__gen_calendar_join", "macro_sql": "{% macro default__gen_calendar_join(group_values) %}\n left join calendar\n {%- if group_values.window is not none %}\n on cast(base_model.{{group_values.timestamp}} as date) > dateadd({{group_values.window.period}}, -{{group_values.window.count}}, calendar.date_day)\n and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n {%- else %}\n on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n {% endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7086484, "supported_languages": null }, "macro.metrics.bigquery__gen_calendar_join": { "name": "bigquery__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.bigquery__gen_calendar_join", "macro_sql": "{% macro bigquery__gen_calendar_join(group_values) %}\n left join calendar\n {%- if group_values.window is not none %}\n on cast(base_model.{{group_values.timestamp}} as date) > date_sub(calendar.date_day, interval {{group_values.window.count}} {{group_values.window.period}})\n and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n {%- else %}\n on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n {% endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.709335, "supported_languages": null }, "macro.metrics.postgres__gen_calendar_join": { "name": "postgres__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.postgres__gen_calendar_join", "macro_sql": "{% macro postgres__gen_calendar_join(group_values) %}\n left join calendar\n {%- if group_values.window is not none %}\n on cast(base_model.{{group_values.timestamp}} as date) > calendar.date_day - interval '{{group_values.window.count}} {{group_values.window.period}}'\n and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n {%- else %}\n on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n {% endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7100549, "supported_languages": null }, "macro.metrics.redshift__gen_calendar_join": { "name": "redshift__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.redshift__gen_calendar_join", "macro_sql": "{% macro redshift__gen_calendar_join(group_values) %}\n left join calendar\n {%- if group_values.window is not none %}\n on cast(base_model.{{group_values.timestamp}} as date) > dateadd({{group_values.window.period}}, -{{group_values.window.count}}, calendar.date_day)\n and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n {%- else %}\n on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n {% endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7107425, "supported_languages": null }, "macro.metrics.gen_base_query": { "name": "gen_base_query", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "unique_id": "macro.metrics.gen_base_query", "macro_sql": "{% macro gen_base_query(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) %}\n {{ return(adapter.dispatch('gen_base_query', 'metrics')(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__gen_base_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7124224, "supported_languages": null }, "macro.metrics.default__gen_base_query": { "name": "default__gen_base_query", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "unique_id": "macro.metrics.default__gen_base_query", "macro_sql": "{% macro default__gen_base_query(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) %}\n {# This is the \"base\" CTE which selects the fields we need to correctly \n calculate the metric. -#}\n select \n {% if grain -%}\n {#- \n Given that we've already determined the metrics in metric_names share\n the same windows & filters, we can base the conditional off of the first \n value in the list because the order doesn't matter. \n -#}\n cast(base_model.{{group_values.timestamp}} as date) as metric_date_day,\n calendar.date_{{ grain }} as date_{{grain}},\n calendar.date_day as window_filter_date,\n {%- if secondary_calculations | length > 0 %}\n {%- for period in relevant_periods %}\n calendar.date_{{ period }},\n {%- endfor -%}\n {%- endif -%}\n {%- endif -%}\n {#- -#}\n {%- for dim in dimensions %}\n base_model.{{ dim }},\n {%- endfor %}\n {%- for calendar_dim in calendar_dimensions -%}\n calendar.{{ calendar_dim }},\n {%- endfor -%}\n {%- for metric_name in group_values.metric_names -%}\n {{ metrics.gen_property_to_aggregate(metrics_dictionary[metric_name], grain, dimensions, calendar_dimensions) }}\n {%- if not loop.last -%},{%- endif -%}\n {%- endfor%}\n from {{ group_values.metric_model }} base_model \n {# -#}\n {%- if grain or calendar_dimensions|length > 0 -%}\n {{ metrics.gen_calendar_join(group_values) }} \n {%- endif -%}\n {# #}\n where 1=1\n {#- -#}\n {{ metrics.gen_filters(group_values, start_date, end_date) }}\n {# #}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.gen_property_to_aggregate", "macro.metrics.gen_calendar_join", "macro.metrics.gen_filters" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.714741, "supported_languages": null }, "macro.metrics.period_over_period": { "name": "period_over_period", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/period_over_period.sql", "original_file_path": "macros/secondary_calculations_configuration/period_over_period.sql", "unique_id": "macro.metrics.period_over_period", "macro_sql": "{% macro period_over_period(comparison_strategy, interval, alias, metric_list = []) %}\n\n {% set missing_args = [] %}\n {% if not comparison_strategy %}\n {% set _ = missing_args.append(\"comparison_strategy\") %}\n {% endif %}\n {% if not interval %} \n {% set _ = missing_args.append(\"interval\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_over_period') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"period_over_period\",\n \"comparison_strategy\": comparison_strategy,\n \"interval\": interval,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7171252, "supported_languages": null }, "macro.metrics.rolling": { "name": "rolling", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/rolling.sql", "original_file_path": "macros/secondary_calculations_configuration/rolling.sql", "unique_id": "macro.metrics.rolling", "macro_sql": "{% macro rolling(aggregate, interval, alias, metric_list=[]) %}\n\n {% set missing_args = [] %}\n {% if not aggregate %} \n {% set _ = missing_args.append(\"aggregate\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to rolling') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"rolling\",\n \"aggregate\": aggregate,\n \"interval\": interval,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.719196, "supported_languages": null }, "macro.metrics.prior": { "name": "prior", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/prior.sql", "original_file_path": "macros/secondary_calculations_configuration/prior.sql", "unique_id": "macro.metrics.prior", "macro_sql": "{% macro prior(interval, alias, metric_list = []) %}\n\n {% set missing_args = [] %}\n {% if not interval %} \n {% set _ = missing_args.append(\"interval\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to prior') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"prior\",\n \"interval\": interval,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.72124, "supported_languages": null }, "macro.metrics.period_to_date": { "name": "period_to_date", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/period_to_date.sql", "original_file_path": "macros/secondary_calculations_configuration/period_to_date.sql", "unique_id": "macro.metrics.period_to_date", "macro_sql": "{% macro period_to_date(aggregate, period, alias, metric_list = []) %}\n\n {% set missing_args = [] %}\n {% if not aggregate %} \n {% set _ = missing_args.append(\"aggregate\") %}\n {% endif %}\n {% if not period %}\n {% set _ = missing_args.append(\"period\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_to_date') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"period_to_date\",\n \"aggregate\": aggregate,\n \"period\": period,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7236376, "supported_languages": null }, "macro.metrics.validate_where": { "name": "validate_where", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_where.sql", "original_file_path": "macros/validation/validate_where.sql", "unique_id": "macro.metrics.validate_where", "macro_sql": "{% macro validate_where(where) %}\n\n {%- if where is iterable and (where is not string and where is not mapping) -%}\n {%- do exceptions.raise_compiler_error(\"From v0.3.0 onwards, the where clause takes a single string, not a list of filters. Please fix to reflect this change\") %}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7243695, "supported_languages": null }, "macro.metrics.validate_secondary_calculations": { "name": "validate_secondary_calculations", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_secondary_calculations.sql", "original_file_path": "macros/validation/validate_secondary_calculations.sql", "unique_id": "macro.metrics.validate_secondary_calculations", "macro_sql": "{% macro validate_secondary_calculations(metric_tree, metrics_dictionary, grain, secondary_calculations) %}\n\n\n {%- for metric_name in metric_tree.base_set %}\n {%- for calc_config in secondary_calculations if calc_config.aggregate -%}\n {%- do metrics.validate_aggregate_coherence(metric_aggregate=metrics_dictionary[metric_name].calculation_method, calculation_aggregate=calc_config.aggregate) -%}\n {%- endfor -%}\n {%- endfor -%}\n\n {%- for calc_config in secondary_calculations if calc_config.period -%}\n {%- do metrics.validate_grain_order(metric_grain=grain, calculation_grain=calc_config.period) -%}\n {%- endfor -%} \n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7257395, "supported_languages": null }, "macro.metrics.is_valid_dimension": { "name": "is_valid_dimension", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/is_valid_dimension.sql", "original_file_path": "macros/validation/is_valid_dimension.sql", "unique_id": "macro.metrics.is_valid_dimension", "macro_sql": "{% macro is_valid_dimension(dim_name, dimension_list) %}\n {% if execute %}\n {%- if dim_name not in dimension_list -%}\n {%- do exceptions.raise_compiler_error(dim_name ~ \" is not a valid dimension\") %}\n {%- endif -%}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7265465, "supported_languages": null }, "macro.metrics.validate_develop_metrics": { "name": "validate_develop_metrics", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_develop_metrics.sql", "original_file_path": "macros/validation/validate_develop_metrics.sql", "unique_id": "macro.metrics.validate_develop_metrics", "macro_sql": "{% macro validate_develop_metrics(metric_list, develop_yml) %}\n\n {% for metric_name in metric_list %}\n {% set metric_definition = develop_yml[metric_name] %}\n\n {%- if not metric_definition.name %}\n {%- do exceptions.raise_compiler_error(\"The provided yml is missing a metric name\") -%}\n {%- endif %}\n\n {%- if not metric_definition.calculation_method %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a calculation method\") -%}\n {%- endif %}\n\n {%- if not metric_definition.model and metric_definition.calculation_method != 'derived' %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a model\") -%}\n {%- endif %}\n\n {%- if metric_definition.time_grains and grain %}\n {%- if grain not in metric_definition.time_grains %}\n {%- do exceptions.raise_compiler_error(\"The selected grain is missing from the metric definition of metric \" ~ metric_definition.name ) -%}\n {%- endif %}\n {%- endif %}\n\n {%- if not metric_definition.expression %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing an expression\") -%}\n {%- endif %}\n\n {%- endfor -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7294366, "supported_languages": null }, "macro.metrics.validate_timestamp": { "name": "validate_timestamp", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_timestamp.sql", "original_file_path": "macros/validation/validate_timestamp.sql", "unique_id": "macro.metrics.validate_timestamp", "macro_sql": "{% macro validate_timestamp(grain, metric_tree, metrics_dictionary, dimensions) %}\n\n {# We check the metrics being used and if there is no grain we ensure that \n none of the dimensions provided are from the calendar #}\n {% if not grain %}\n {%- if metrics.get_calendar_dimensions(dimensions) | length > 0 -%}\n\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metrics_dictionary[metric_name]%}\n {% if not metric_relation.timestamp %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is using a calendar dimension but does not have a timestamp defined.\") %}\n {% endif %}\n {% endfor %}\n\n {% endif %}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_calendar_dimensions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7309184, "supported_languages": null }, "macro.metrics.validate_grain": { "name": "validate_grain", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_grain.sql", "original_file_path": "macros/validation/validate_grain.sql", "unique_id": "macro.metrics.validate_grain", "macro_sql": "{% macro validate_grain(grain, metric_tree, metrics_dictionary, secondary_calculations, dimensions) %}\n\n {# We loop through the full set here to ensure that the provided grain works for all metrics\n returned or used, not just those listed #}\n {% if grain %}\n {%- if not grain and secondary_calculations | length > 0 -%}\n {%- do exceptions.raise_compiler_error(\"Secondary calculations require a grain to be provided\") -%}\n {%- endif -%}\n\n\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metrics_dictionary[metric_name]%}\n\n {% if grain not in metric_relation.time_grains%}\n {% if metric_name not in metric_tree.base_set %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is an upstream metric of one of the provided metrics. The grain \" ~ grain ~ \" is not defined in its metric definition.\") %}\n {% else %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" does not have the provided time grain \" ~ grain ~ \" defined in the metric definition.\") %}\n {% endif %}\n {% endif %}\n {% endfor %}\n\n {% elif not grain %}\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metrics_dictionary[metric_name]%}\n {% if metric_relation.get(\"config\").get(\"restrict_no_time_grain\", False) == True %}\n {% if metric_name not in metric_tree.base_set %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~ \" is an upstream metric of one of the provided metrics and has been configured to not allow non time-grain queries.\") %}\n {% else %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~ \" has been configured to not allow non time-grain queries.\") %}\n {% endif %}\n {% endif %}\n\n {% endfor %}\n\n {% if secondary_calculations | length > 0 %}\n {%- do exceptions.raise_compiler_error(\"Using secondary calculations without a grain is not supported.\") %}\n {% endif %}\n\n {% for metric_name in metric_tree.full_set %}\n {% if metrics_dictionary[metric_name].window is not none%}\n {%- do exceptions.raise_compiler_error(\"Aggregating without a grain does not support metrics with window definitions.\") %}\n {% endif%}\n {% endfor%}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7364793, "supported_languages": null }, "macro.metrics.validate_dimension_list": { "name": "validate_dimension_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_dimension_list.sql", "original_file_path": "macros/validation/validate_dimension_list.sql", "unique_id": "macro.metrics.validate_dimension_list", "macro_sql": "{% macro validate_dimension_list(dimensions, metric_tree, metrics_dictionary) %}\n \n {# This macro exists to invalidate dimensions provided to the metric macro that are not viable \n candidates based on metric definitions. This prevents downstream run issues when the sql \n logic attempts to group by provided dimensions and fails because they don't exist for \n one or more of the required metrics. #}\n\n {% set calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n {% for dim in dimensions %}\n\n {# Now we loop through all the metrics in the full set, which is all metrics, parent metrics,\n and derived metrics associated with the macro call #}\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metrics_dictionary[metric_name]%}\n\n {# This macro returns a list of dimensions that are inclusive of calendar dimensions #}\n {% set complete_dimension_list = metric_relation.dimensions + calendar_dimensions %}\n\n {# If the dimension provided is not present in the loop metrics dimension list then we \n will raise an error. If it is missing in ANY of the metrics, it cannot be used in the \n macro call. Only dimensions that are valid in all metrics are valid in the macro call #}\n {% if dim not in complete_dimension_list %}\n {% if dim not in calendar_dimensions %}\n {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name) %}\n {% else %}\n {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name ~ \". If the dimension is from a custom calendar table, please create the custom_calendar_dimension_list as shown in the README.\") %}\n {% endif %}\n {% endif %}\n\n {%endfor%}\n {%endfor%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7387912, "supported_languages": null }, "macro.metrics.validate_metric_config": { "name": "validate_metric_config", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_metric_config.sql", "original_file_path": "macros/validation/validate_metric_config.sql", "unique_id": "macro.metrics.validate_metric_config", "macro_sql": "{%- macro validate_metric_config(metrics_dictionary) -%}\n\n {#- We loop through the metrics dictionary here to ensure that\n 1) all configs are real configs we know about\n 2) all of those have valid values passed\n returned or used, not just those listed -#}\n\n {%- set accepted_configs = {\n \"enabled\" : {\"accepted_values\" : [True, False]},\n \"treat_null_values_as_zero\" : {\"accepted_values\" : [True, False]},\n \"restrict_no_time_grain\" : {\"accepted_values\" : [True, False]}\n }\n -%}\n\n {%- for metric in metrics_dictionary -%}\n {%- set metric_config = metrics_dictionary[metric].get(\"config\", none) -%}\n {%- if metric_config -%}\n {%- for config in metric_config -%}\n {%- set config_value = metric_config[config] -%}\n {#- some wonkiness here -- metric_config is not a dictionary, it's a MetricConfig object, so can't use the items() method -#}\n {#- check that the config is one that we expect -#}\n {%- if not accepted_configs[config] -%}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config option. The config '\" ~ config ~ \"' is not accepted.\") -%}\n {%- endif -%}\n {#- check that the config datatype is expected -#}\n {%- if accepted_configs[config] -%}\n {%- set accepted_values = accepted_configs[config][\"accepted_values\"] -%}\n {%- if not config_value in accepted_values -%}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config value specified. The config '\" ~ config ~ \"' expects one of \" ~ accepted_values) -%}\n {%- endif -%}\n {% endif %}\n {%- endfor %}\n {%- endif -%}\n {%- endfor %}\n \n\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7416253, "supported_languages": null }, "macro.metrics.validate_grain_order": { "name": "validate_grain_order", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_grain_order.sql", "original_file_path": "macros/validation/validate_grain_order.sql", "unique_id": "macro.metrics.validate_grain_order", "macro_sql": "{% macro validate_grain_order(metric_grain, calculation_grain) %}\n {% set grains = metrics.get_grain_order() %}\n \n {% if metric_grain not in grains or calculation_grain not in grains %}\n {% set comma = joiner(\", \") %}\n {% do exceptions.raise_compiler_error(\"Unknown grains: [\" ~ (comma() ~ metric_grain if metric_grain not in grains) ~ (comma() ~ calculation_grain if calculation_grain not in grains) ~ \"]\") %}\n {% endif %}\n\n {% set metric_grain_index = grains.index(metric_grain) %}\n {% set calculation_grain_index = grains.index(calculation_grain) %}\n\n {% if (calculation_grain_index < metric_grain_index) %}\n {% do exceptions.raise_compiler_error(\"Can't calculate secondary metric at \" ~ calculation_grain ~\"-level when metric is at \" ~ metric_grain ~ \"-level\") %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_grain_order" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7437847, "supported_languages": null }, "macro.metrics.validate_derived_metrics": { "name": "validate_derived_metrics", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_derived_metrics.sql", "original_file_path": "macros/validation/validate_derived_metrics.sql", "unique_id": "macro.metrics.validate_derived_metrics", "macro_sql": "{% macro validate_derived_metrics(metric_tree) %}\n\n {# We loop through the full set here to ensure that metrics that aren't listed \n as derived are not dependent on another metric. #}\n\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metric(metric_name)%}\n {% set metric_relation_depends_on = metric_relation.metrics | join (\",\") %}\n {% if metric_relation.calculation_method != \"derived\" and metric_relation.metrics | length > 0 %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~\" also references '\" ~ metric_relation_depends_on ~ \"' but its calculation method is '\" ~ metric_relation.calculation_method ~ \"'. Only metrics of calculation method derived can reference other metrics.\") %}\n {%- endif %}\n {% endfor %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.745213, "supported_languages": null }, "macro.metrics.validate_aggregate_coherence": { "name": "validate_aggregate_coherence", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_aggregate_coherence.sql", "original_file_path": "macros/validation/validate_aggregate_coherence.sql", "unique_id": "macro.metrics.validate_aggregate_coherence", "macro_sql": "{% macro validate_aggregate_coherence(metric_aggregate, calculation_aggregate) %}\n {% set allowlist = metrics.get_metric_allowlist()[metric_aggregate] %}\n\n {% if (calculation_aggregate not in allowlist) %}\n {% do exceptions.raise_compiler_error(\"Can't calculate secondary aggregate \" ~ calculation_aggregate ~ \" when metric's aggregation is \" ~ metric_aggregate ~ \". Allowed options are \" ~ allowlist ~ \".\") %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_metric_allowlist" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7462034, "supported_languages": null }, "macro.metrics.get_develop_unique_metric_id_list": { "name": "get_develop_unique_metric_id_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_develop_unique_metric_id_list.sql", "original_file_path": "macros/variables/get_develop_unique_metric_id_list.sql", "unique_id": "macro.metrics.get_develop_unique_metric_id_list", "macro_sql": "{%- macro get_develop_unique_metric_id_list(metric_definition) %}\n\n {% set re = modules.re %}\n\n {%- set metric_list = [] -%}\n\n {%- if metric_definition.calculation_method == 'derived' %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set dependency_metrics = re.findall(\"'[^']+'\",metric_definition.expression) -%}\n\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for metric_name in dependency_metrics -%} \n= {% do metric_list.append(metric_name.replace('\\'','')) %} \n {%- endfor -%}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7476525, "supported_languages": null }, "macro.metrics.get_metric_model_name": { "name": "get_metric_model_name", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_model_name.sql", "original_file_path": "macros/variables/get_metric_model_name.sql", "unique_id": "macro.metrics.get_metric_model_name", "macro_sql": "{% macro get_metric_model_name(metric_model) %}\n\n {% set metric_model_name = metric_model.replace('\"','\\'').split('\\'')[1] %}\n\n {% do return(metric_model_name) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7483366, "supported_languages": null }, "macro.metrics.get_non_calendar_dimension_list": { "name": "get_non_calendar_dimension_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_non_calendar_dimension_list.sql", "original_file_path": "macros/variables/get_non_calendar_dimension_list.sql", "unique_id": "macro.metrics.get_non_calendar_dimension_list", "macro_sql": "{% macro get_non_calendar_dimension_list(dimensions,calendar_dimensions) %}\n \n {% set calendar_dims = calendar_dimensions %}\n\n {# Here we set the calendar as either being the default provided by the package\n or the variable provided in the project #}\n {% set dimension_list = [] %}\n {% for dim in dimensions %}\n {%- if dim not in calendar_dimensions -%}\n {%- do dimension_list.append(dim | lower) -%}\n {%- endif -%}\n {% endfor %}\n {%- do return(dimension_list) -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.749401, "supported_languages": null }, "macro.metrics.get_total_dimension_count": { "name": "get_total_dimension_count", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_total_dimension_count.sql", "original_file_path": "macros/variables/get_total_dimension_count.sql", "unique_id": "macro.metrics.get_total_dimension_count", "macro_sql": "{%- macro get_total_dimension_count(grain, dimensions, calendar_dimensions, relevant_periods) %}\n\n{# This macro calcualtes the total amount of dimensions that will need to be grouped by #}\n\n {%- set dimension_length = dimensions | length -%}\n {%- set calendar_dimension_length = calendar_dimensions | length -%}\n\n {%- if grain -%}\n {%- set grain_length = 1 -%}\n {%- else -%}\n {%- set grain_length = 0 -%}\n {%- endif -%}\n\n {%- set cleaned_relevant_periods = [] -%}\n {%- set period_length = relevant_periods | length -%}\n {%- set total_length = grain_length + dimension_length + period_length + calendar_dimension_length -%}\n\n {% do return(total_length) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.750857, "supported_languages": null }, "macro.metrics.get_base_metrics": { "name": "get_base_metrics", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_base_metrics.sql", "original_file_path": "macros/variables/get_base_metrics.sql", "unique_id": "macro.metrics.get_base_metrics", "macro_sql": "{% macro get_base_metrics(metric) %}\n\n -- this checks whether it is a relation or a list\n {%- if (metric is mapping and metric.get('metadata', {}).get('calculation_method', '').endswith('Relation')) %}\n\n {%- for child in metric recursive -%}\n\n {%- if metric.metrics | length > 0 %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set node_list = metric.depends_on.nodes -%}\n {%- set metric_list = [] -%}\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the metric name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for node in node_list -%} \n {% set metric_name = node.split('.')[2] %}\n {% do metric_list.append(metric_name) %}\n {%- endfor -%}\n {%- endif -%}\n {%- endfor -%}\n\n {% else %}\n\n {# For non-derived metrics, we just need the relation of the base model ie \n the model that its built. Then we append it to the metric list name so the same\n variable used in derived metrics can be used below #}\n {%- set metric_list = [] -%}\n {% do metric_list.append(metric.name) %}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7530994, "supported_languages": null }, "macro.metrics.get_metric_unique_id_list": { "name": "get_metric_unique_id_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_unique_id_list.sql", "original_file_path": "macros/variables/get_metric_unique_id_list.sql", "unique_id": "macro.metrics.get_metric_unique_id_list", "macro_sql": "{%- macro get_metric_unique_id_list(metric) %}\n\n {%- if metric.metrics | length > 0 %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set node_list = metric.depends_on.nodes -%}\n {%- set metric_list = [] -%}\n\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for node in node_list -%} \n {%- if node.split('.')[0] == 'metric' -%}\n {% do metric_list.append(node.split('.')[2]) %} \n {%- endif -%}\n {%- endfor -%}\n\n {% else %}\n\n {# For non-derived metrics, we just need the relation of the base model ie \n the model that its built. Then we append it to the metric list name so the same\n variable used in derived metrics can be used below #}\n {%- set metric_list = [] -%}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.754816, "supported_languages": null }, "macro.metrics.get_metric_list": { "name": "get_metric_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_list.sql", "original_file_path": "macros/variables/get_metric_list.sql", "unique_id": "macro.metrics.get_metric_list", "macro_sql": "{%- macro get_metric_list(metric) %}\n\n {%- if metric.metrics | length > 0 %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set node_list = metric.depends_on.nodes -%}\n {%- set metric_list = [] -%}\n\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for node in node_list -%} \n {% set metric_name = node.split('.')[2] %}\n {% do metric_list.append(metric_name) %}\n {%- endfor -%}\n\n {% else %}\n\n {# For non-derived metrics, we just need the relation of the base model ie \n the model that its built. Then we append it to the metric list name so the same\n variable used in derived metrics can be used below #}\n {%- set metric_list = [] -%}\n {% do metric_list.append(metric.name) %}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.75646, "supported_languages": null }, "macro.metrics.get_metric_definition": { "name": "get_metric_definition", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_definition.sql", "original_file_path": "macros/variables/get_metric_definition.sql", "unique_id": "macro.metrics.get_metric_definition", "macro_sql": "{% macro get_metric_definition(metric_definition) %}\n\n {% set metrics_dictionary_dict = {} %}\n\n {% do metrics_dictionary_dict.update({'name': metric_definition.name})%}\n {% do metrics_dictionary_dict.update({'calculation_method': metric_definition.calculation_method})%}\n {% do metrics_dictionary_dict.update({'timestamp': metric_definition.timestamp})%}\n {% do metrics_dictionary_dict.update({'time_grains': metric_definition.time_grains})%}\n {% do metrics_dictionary_dict.update({'dimensions': metric_definition.dimensions})%}\n {% do metrics_dictionary_dict.update({'filters': metric_definition.filters})%}\n {% do metrics_dictionary_dict.update({'config': metric_definition.config})%}\n {% if metric_definition.calculation_method != 'derived' %}\n {% set metric_model_name = metrics.get_metric_model_name(metric_model=metric_definition.model) %}\n {% do metrics_dictionary_dict.update({'metric_model_name': metric_model_name }) %}\n {% do metrics_dictionary_dict.update({'metric_model': metrics.get_model_relation(metric_model_name, metric_name)}) %}\n {% endif %}\n\n {# Behavior specific to develop #}\n {% if metric_definition is mapping %}\n {# We need to do some cleanup for metric parsing #}\n {% set metric_expression = metric_definition.expression | replace(\"metric(\",\"\") | replace(\")\",\"\") | replace(\"{{\",\"\") | replace(\"}}\",\"\") | replace(\"'\",\"\") | replace('\"',\"\") %}\n {% do metrics_dictionary_dict.update({'expression': metric_expression})%} \n {% if metric_definition.window %}\n {% do metrics_dictionary_dict.update({'window': metric_definition.window}) %}\n {% else %}\n {% do metrics_dictionary_dict.update({'window': none}) %}\n {% endif %}\n\n {# Behavior specific to calculate #}\n {% else %}\n {% do metrics_dictionary_dict.update({'expression': metric_definition.expression})%} \n {% do metrics_dictionary_dict.update({'window': metric_definition.window})%}\n {% endif %}\n\n {% do return(metrics_dictionary_dict) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_metric_model_name", "macro.metrics.get_model_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7621546, "supported_languages": null }, "macro.metrics.get_grain_order": { "name": "get_grain_order", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "unique_id": "macro.metrics.get_grain_order", "macro_sql": "{% macro get_grain_order() %}\n {{ return(adapter.dispatch('get_grain_order', 'metrics')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__get_grain_order" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7627327, "supported_languages": null }, "macro.metrics.default__get_grain_order": { "name": "default__get_grain_order", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "unique_id": "macro.metrics.default__get_grain_order", "macro_sql": "{% macro default__get_grain_order() %}\n {% do return (['day', 'week', 'month', 'quarter', 'year']) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7631466, "supported_languages": null }, "macro.metrics.get_faux_metric_tree": { "name": "get_faux_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_faux_metric_tree.sql", "original_file_path": "macros/variables/get_faux_metric_tree.sql", "unique_id": "macro.metrics.get_faux_metric_tree", "macro_sql": "{% macro get_faux_metric_tree(metric_list,develop_yml)%}\n\n {%- set metric_tree = {'full_set':[]} %}\n {%- do metric_tree.update({'parent_set':[]}) -%}\n {%- do metric_tree.update({'derived_set':[]}) -%}\n {%- do metric_tree.update({'base_set':metric_list}) -%}\n {%- do metric_tree.update({'ordered_derived_set':{}}) -%}\n\n {% for metric_name in metric_list %}\n {% set metric_definition = develop_yml[metric_name]%}\n {%- set metric_tree = metrics.update_faux_metric_tree(metric_definition, metric_tree, develop_yml) -%}\n {% endfor %}\n\n {%- do metric_tree.update({'full_set':set(metric_tree['full_set'])}) -%}\n {%- do metric_tree.update({'parent_set':set(metric_tree['parent_set'])}) -%}\n {%- do metric_tree.update({'derived_set':set(metric_tree['derived_set'])}) -%}\n\n {% for metric_name in metric_tree['parent_set']|unique%}\n {%- do metric_tree['ordered_derived_set'].pop(metric_name) -%}\n {% endfor %}\n\n {# This section overrides the derived set by ordering the metrics on their depth so they \n can be correctly referenced in the downstream sql query #}\n {% set ordered_expression_list = []%}\n {% for item in metric_tree['ordered_derived_set']|dictsort(false, 'value') %}\n {% if item[0] in metric_tree[\"derived_set\"]%}\n {% do ordered_expression_list.append(item[0])%}\n {% endif %}\n {% endfor %}\n {%- do metric_tree.update({'derived_set':ordered_expression_list}) -%}\n\n {%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.update_faux_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7671435, "supported_languages": null }, "macro.metrics.get_relevent_periods": { "name": "get_relevent_periods", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_relevent_periods.sql", "original_file_path": "macros/variables/get_relevent_periods.sql", "unique_id": "macro.metrics.get_relevent_periods", "macro_sql": "{%- macro get_relevent_periods(grain, secondary_calculations) %}\n\n {%- set relevant_periods = [] %}\n {%- for calc_config in secondary_calculations if calc_config.period and calc_config.period not in relevant_periods and calc_config.period != grain %}\n {%- do relevant_periods.append(calc_config.period) %}\n {%- endfor -%}\n\n {%- do return(relevant_periods)-%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7681258, "supported_languages": null }, "macro.metrics.get_calendar_dimensions": { "name": "get_calendar_dimensions", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_calendar_dimensions.sql", "original_file_path": "macros/variables/get_calendar_dimensions.sql", "unique_id": "macro.metrics.get_calendar_dimensions", "macro_sql": "{% macro get_calendar_dimensions(dimensions) %}\n \n {% set approved_calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n {# Here we set the calendar as either being the default provided by the package\n or the variable provided in the project #}\n {% set calendar_dimensions = [] %}\n {% for dim in dimensions %}\n {%- if dim in approved_calendar_dimensions -%}\n {%- do calendar_dimensions.append(dim | lower) -%}\n {%- endif -%}\n {% endfor %}\n {%- do return(calendar_dimensions) -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7692513, "supported_languages": null }, "macro.metrics.get_metric_allowlist": { "name": "get_metric_allowlist", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "unique_id": "macro.metrics.get_metric_allowlist", "macro_sql": "{% macro get_metric_allowlist() %}\n {{ return(adapter.dispatch('get_metric_allowlist', 'metrics')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__get_metric_allowlist" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7700162, "supported_languages": null }, "macro.metrics.default__get_metric_allowlist": { "name": "default__get_metric_allowlist", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "unique_id": "macro.metrics.default__get_metric_allowlist", "macro_sql": "{% macro default__get_metric_allowlist() %}\n {# Keys are the primary aggregation, values are the permitted aggregations to run in secondary calculations. #}\n {% do return ({\n \"average\": ['min', 'max'],\n \"median\": ['min', 'max'],\n \"count\": ['min', 'max', 'sum', 'average'],\n \"count_distinct\": ['min', 'max', 'sum', 'average'],\n \"sum\": ['min', 'max', 'sum', 'average'],\n \"max\": ['min', 'max', 'sum', 'average'],\n \"min\": ['min', 'max', 'sum', 'average'],\n \"derived\": ['min', 'max', 'sum'],\n }) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7713866, "supported_languages": null }, "macro.metrics.get_metric_tree": { "name": "get_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_tree.sql", "original_file_path": "macros/variables/get_metric_tree.sql", "unique_id": "macro.metrics.get_metric_tree", "macro_sql": "{% macro get_metric_tree(metric_list)%}\n\n{# We are creating the metric tree here - this includes all the leafs (first level parents)\n, the derived metrics, and the full combination of them both #}\n\n{# This line creates the metric tree dictionary and the full_set key. \nFull Set contains ALL metrics that are referenced, which includes metrics in the macro\nAND all parent/derived metrics. #}\n{%- set metric_tree = {'full_set':[]} %}\n{# The parent set is a list of parent metrics that are NOT derived metrics. IE if \nmetric C is built off of metric A and B, A and B would be the parent metrics because they \nare both upstream of Metric C AND not derived metrics themselves. #}\n{%- do metric_tree.update({'parent_set':[]}) -%}\n{# The derived set is a list of derived metrics. This includes all derived metrics referenced\nin the macro itself OR upstream of the metrics referenced in the macro #}\n{%- do metric_tree.update({'derived_set':[]}) -%}\n{# The base set is the list of metrics that are provided into the macro #}\n{%- do metric_tree.update({'base_set':[]}) -%}\n{# The ordered derived set is the list of derived metrics that are ordered based on their\nnode depth. So if Metric C were downstream of Metric A and B, which were also derived metrics,\nMetric C would have the value of 999 (max depth) and A and B would have 998, representing that they\nare one depth upstream #}\n{%- do metric_tree.update({'ordered_derived_set':{}}) -%}\n\n{% set base_set_list = []%}\n{% for metric in metric_list %}\n {%- do base_set_list.append(metric.name) -%}\n {%- set metric_tree = metrics.update_metric_tree(metric ,metric_tree) -%}\n{% endfor %}\n{%- do metric_tree.update({'base_set':base_set_list}) -%}\n\n{# Now we will iterate over the metric tree and make it a unique list to account for duplicates #}\n{% set full_set = [] %}\n{% set parent_set = [] %}\n{% set derived_set = [] %}\n{% set base_set = [] %}\n\n{% for metric_name in metric_tree['full_set']|unique%}\n {% do full_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'full_set':full_set}) -%}\n\n{% for metric_name in metric_tree['parent_set']|unique%}\n {% do parent_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'parent_set':parent_set}) -%}\n\n{% for metric_name in metric_tree['derived_set']|unique%}\n {% do derived_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'derived_set':derived_set}) -%}\n\n{% for metric in metric_tree['parent_set']|unique%}\n {%- do metric_tree['ordered_derived_set'].pop(metric) -%}\n{% endfor %}\n\n{# This section overrides the derived set by ordering the metrics on their depth so they \ncan be correctly referenced in the downstream sql query #}\n{% set ordered_expression_list = []%}\n{% for item in metric_tree['ordered_derived_set']|dictsort(false, 'value') %}\n {% if item[0] in metric_tree[\"derived_set\"]%}\n {% do ordered_expression_list.append(item[0])%}\n {% endif %}\n{% endfor %}\n{%- do metric_tree.update({'derived_set':ordered_expression_list}) -%}\n\n{%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.update_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7770598, "supported_languages": null }, "macro.metrics.get_model_group": { "name": "get_model_group", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_model_group.sql", "original_file_path": "macros/variables/get_model_group.sql", "unique_id": "macro.metrics.get_model_group", "macro_sql": "{%- macro get_model_group(models_grouping, metric_model, metric_model_name, metric_name, metric_timestamp=none, metric_filters=none, metric_window=none) -%}\n\n{#- \nThis macro is called from get_models_grouping in order to calculate\nthe group for each model based on the inputs. This allows us to reduce\nthe complexity of the aforementioned macro because there is a factorial \ncombination of possibilities based on the inputs, minus some combinations\nthat are invalid.\n\nBy factorial, we mean that the three potential inputs can be combined in \na multitude of different ways in order to calculate the group. The potential \ncombinations are:\n - timestamp\n - filters\n - timestamp + window\n - timestamp + filters\n - timestamp + filters + window\n -#}\n\n {% set metric_model_list = [metric_model_name] %}\n\n {% if metric_timestamp %}\n {% set timestamp_list = [\n metric_timestamp | lower\n ]%}\n {% else %}\n {% set timestamp_list = [] %}\n {% endif %}\n\n {% if metric_window %}\n {% set window_list = [\n metric_window.count | lower\n ,metric_window.period | lower\n ]%}\n {% else %}\n {% set window_list = [] %}\n {% endif %}\n\n {% if metric_filters %}\n {% set filter_list = [] %}\n {% for filter in metric_filters %}\n {% do filter_list.append(filter.field | lower)%}\n {% do filter_list.append(filter.operator | lower)%}\n {% do filter_list.append(filter.value | lower)%}\n {% endfor %}\n {% else %}\n {% set filter_list = [] %}\n {% endif %}\n\n {% set group_list = (metric_model_list + timestamp_list + window_list + filter_list) | sort %}\n {% set group_name = 'model_' ~ local_md5(group_list | join('_')) %}\n\n {% if not models_grouping[group_name] %}\n {% do models_grouping.update({group_name:{}})%}\n {% do models_grouping[group_name].update({'metric_names':{}})%}\n {% do models_grouping[group_name].update({'metric_model':metric_model})%}\n {% do models_grouping[group_name].update({'timestamp':metric_timestamp})%}\n {% do models_grouping[group_name].update({'filters':metric_filters})%}\n {% do models_grouping[group_name].update({'window':metric_window})%}\n {% do models_grouping[group_name].update({'metric_names':[metric_name]})%}\n {% else %}\n {% set metric_names = models_grouping[group_name]['metric_names'] %}\n {% do metric_names.append(metric_name)%}\n {% do models_grouping[group_name].update({'metric_names':metric_names})%}\n {% endif %}\n\n {% do return(metrics_grouping) %}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.783604, "supported_languages": null }, "macro.metrics.update_faux_metric_tree": { "name": "update_faux_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/update_faux_metric_tree.sql", "original_file_path": "macros/variables/update_faux_metric_tree.sql", "unique_id": "macro.metrics.update_faux_metric_tree", "macro_sql": "{% macro update_faux_metric_tree(metric_definition, metric_tree, develop_yml, metric_count=999)%}\n \n\n {# Now we see if the node already exists in the metric tree and return that if \n it does so that we're not creating duplicates #}\n {%- if metric_definition.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n {%- set full_set = metric_tree[\"full_set\"] -%}\n {%- do full_set.append(metric_definition.name) -%}\n {%- do metric_tree.update({'full_set':full_set}) -%}\n\n {%- endif -%}\n\n {# Here we're starting with the highest level and assigning the metric tree that first level\n value. This is used before de-duping in get_faux_metric_tree #}\n {%- do metric_tree[\"ordered_derived_set\"].update({metric_definition.name:metric_count}) -%}\n {%- set metric_count = metric_count - 1 -%}\n\n {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n One is the full set, which contains all of the parent metrics and the other is the leaf\n set, which we'll use to determine the leaf, or base metrics. #}\n\n {% set develop_metric_list = [] %}\n {% for develop_metric_name in develop_yml %}\n {% do develop_metric_list.append(develop_metric_name) %}\n {% endfor %}\n\n {# We define parent nodes as being the parent nodes that begin with metric, which lets\n us filter out model nodes #}\n {%- set parent_metrics = metrics.get_develop_unique_metric_id_list(metric_definition) -%}\n {# We set an if condition based on if parent nodes. If there are none, then this metric\n is a leaf node and any recursive loop should end #}\n {%- if parent_metrics | length > 0 -%}\n\n {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n {%- for parent_metric_name in parent_metrics -%}\n\n {# Then we add the parent_id of the metric to the full set. If it already existed\n then it won't make an impact but we want to make sure it is represented. Will dedupe\n in final macro #}\n {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n {%- if parent_metric_name in metric_tree|map(attribute=\"full_set\") -%}\n {%- do full_set_plus.append(parent_metric_name) -%}\n {%- endif -%}\n {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n\n {# And here we re-run the current macro but fill in the parent_id so that we loop again\n with that metric information. You may be wondering, why are you using parent_id? Doesn't \n the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n \n {# So here we need to test if the parent id/metric name exists in the manifest OR in\n the develop yml. Manifest takes priority and then defaults back to yml if not present #}\n {% if parent_metric_name in develop_metric_list and parent_metric_name is not none %}\n {% set parent_metric_definition = develop_yml[parent_metric_name] %}\n {% else %}\n {%- set parent_metric_definition = metrics.get_metric_relation(parent_metric_name) -%}\n {% endif %}\n\n {%- set metric_tree = metrics.update_faux_metric_tree(parent_metric_definition, metric_tree, develop_yml, metric_count) -%}\n\n {%- endfor -%}\n \n {%- else -%}\n\n {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n {%- do parent_set_plus.append(metric_definition.name) -%}\n {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n {%- endif -%}\n\n {%- set derived_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n {%- do metric_tree.update({'derived_set':derived_set_plus}) -%}\n\n {%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_develop_unique_metric_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_faux_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7888432, "supported_languages": null }, "macro.metrics.get_models_grouping": { "name": "get_models_grouping", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_models_grouping.sql", "original_file_path": "macros/variables/get_models_grouping.sql", "unique_id": "macro.metrics.get_models_grouping", "macro_sql": "{%- macro get_models_grouping(metric_tree, metrics_dictionary) -%}\n{#- \nThe purpose of this macro is to create a dictionary that can be used by\ngen_base_query and gen_aggregate_query in order to intelligently group\nmetrics together on whether they can be queried in the same query. These\nwill be grouped together with a unique model name as the key and the value \ncontaining the list of the metrics. This is complicated because we allow\ndifferent properties that affect the base query, so we can't do a single \ngrouping based on model. As such, if a metric contains one of these properties\nwe have to create a group for that specific combination.\n\nThe properties that cause us to group the metric seperately are:\n - windows\n - filters\n - timestamp fields\n\nIn order to ensure consistency, we will also include those values in the \ndictionary so we can reference them from the metrics grouping (ie a single\nlocation) instead of from a randomly selected metric in the list of metrics.\n\nAn example output looks like:\n{\n 'model_4f977327f02b5c04af4337f54ed81a17': {\n 'metric_names':['metric_a','metric_b'],\n 'metric_timestamp': order_date,\n 'metric_filters':[\n MetricFilter(field='had_discount', operator='is', value='true'), \n MetricFilter(field='order_country', operator='=', value='CA')\n ]\n 'metric_window': MetricTime(count=14, period=<MetricTimePeriod.month: 'month'>)\n }\n} \n -#}\n\n {% set models_grouping = {} %}\n\n {% for metric_name in metric_tree.parent_set %}\n {% set metric_dictionary = metrics_dictionary[metric_name] %}\n\n {% set models_grouping = metrics.get_model_group(\n models_grouping=models_grouping,\n metric_model=metric_dictionary.metric_model,\n metric_model_name=metric_dictionary.metric_model_name,\n metric_name=metric_dictionary.name,\n metric_timestamp=metric_dictionary.timestamp,\n metric_filters=metric_dictionary.filters,\n metric_window=metric_dictionary.window\n ) %}\n\n {% endfor %}\n\n {% do return(models_grouping) %}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.get_model_group" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7904503, "supported_languages": null }, "macro.metrics.get_metrics_dictionary": { "name": "get_metrics_dictionary", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metrics_dictionary.sql", "original_file_path": "macros/variables/get_metrics_dictionary.sql", "unique_id": "macro.metrics.get_metrics_dictionary", "macro_sql": "{% macro get_metrics_dictionary(metric_tree, develop_yml = none) %}\n\n {% set metrics_dictionary = {} %}\n\n {% for metric_name in metric_tree.full_set %}\n {% if develop_yml is not none %}\n {% set metric_object = develop_yml[metric_name]%}\n {% else %}\n {% set metric_object = metrics.get_metric_relation(metric_name) %}\n {% endif %}\n {% set metric_definition = metrics.get_metric_definition(metric_object) %}\n {% if not metric_definition.config %}\n {% do metric_definition.update({'config':{}}) %}\n {% endif %}\n {% do metrics_dictionary.update({metric_name:{}})%}\n {% do metrics_dictionary.update({metric_name:metric_definition})%}\n {% endfor %}\n\n {% do return(metrics_dictionary) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_metric_relation", "macro.metrics.get_metric_definition" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.7926579, "supported_languages": null }, "macro.metrics.update_metric_tree": { "name": "update_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/update_metric_tree.sql", "original_file_path": "macros/variables/update_metric_tree.sql", "unique_id": "macro.metrics.update_metric_tree", "macro_sql": "{% macro update_metric_tree(metric,metric_tree,metric_count=999)%}\n \n {# Now we see if the node already exists in the metric tree and return that if \n it does so that we're not creating duplicates #}\n {%- if metric.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n {%- set full_set = metric_tree[\"full_set\"] -%}\n {%- do full_set.append(metric.name) -%}\n {%- do metric_tree.update({'full_set':full_set}) -%}\n\n {%- endif -%}\n\n {%- do metric_tree[\"ordered_derived_set\"].update({metric.name:metric_count}) -%}\n {%- set metric_count = metric_count - 1 -%}\n\n {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n One is the full set, which contains all of the parent metrics and the other is the leaf\n set, which we'll use to determine the leaf, or base metrics. #}\n\n {# We define parent nodes as being the parent nodes that begin with metric, which lets\n us filter out model nodes #}\n {%- set parent_metrics = metrics.get_metric_unique_id_list(metric) -%}\n\n {# We set an if condition based on if parent nodes. If there are none, then this metric\n is a leaf node and any recursive loop should end #}\n {%- if parent_metrics | length > 0 -%}\n\n {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n {%- for parent_id in parent_metrics -%}\n\n {# Then we add the parent_id of the metric to the full set. If it already existed\n then it won't make an impact but we want to make sure it is represented #}\n {# {%- do full_set.append(parent_id) -%} #}\n {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n {%- do full_set_plus.append(parent_id) -%}\n {%- endif -%}\n {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n {# The parent_id variable here is a mapping back to the provided manifest and doesn't \n allow for string parsing. So we create this variable to use instead #}\n {# {%- set parent_metric_name = (parent_id | string).split('.')[2] -%} #}\n\n {# And here we re-run the current macro but fill in the parent_id so that we loop again\n with that metric information. You may be wondering, why are you using parent_id? Doesn't \n the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n {%- set new_parent = metrics.get_metric_relation(parent_id) -%}\n\n {%- set metric_tree = metrics.update_metric_tree(new_parent,metric_tree,metric_count) -%}\n\n {%- endfor -%}\n \n {%- else -%}\n\n {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n {%- do parent_set_plus.append(metric.name) -%}\n {%- endif -%}\n {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n {%- endif -%}\n\n {%- set derived_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n {%- do metric_tree.update({'derived_set':derived_set_plus}) -%}\n\n {%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.get_metric_unique_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.797931, "supported_languages": null }, "macro.metrics.default__secondary_calculation_rolling": { "name": "default__secondary_calculation_rolling", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "unique_id": "macro.metrics.default__secondary_calculation_rolling", "macro_sql": "{%- macro default__secondary_calculation_rolling(metric_name, grain, dimensions, calc_config) %}\n {%- set calc_sql -%}\n {{ adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) }} over (\n {% if dimensions -%}\n partition by {{ dimensions | join(\", \") }} \n {%- endif %}\n order by date_{{grain}}\n {%- if calc_config.interval %}\n rows between {{ calc_config.interval - 1 }} preceding and current row\n {%- else %}\n rows between unbounded preceding and current row\n {%- endif %}\n )\n {%- endset %}\n {% do return (calc_sql) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.799478, "supported_languages": null }, "macro.metrics.default__secondary_calculation_prior": { "name": "default__secondary_calculation_prior", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_prior.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_prior.sql", "unique_id": "macro.metrics.default__secondary_calculation_prior", "macro_sql": "{%- macro default__secondary_calculation_prior(metric_name, grain, dimensions, calc_config, metric_config) -%}\n \n {%- set calc_sql -%}\n lag({{ metric_name }}, {{ calc_config.interval }}) over (\n {% if dimensions -%}\n partition by {{ dimensions | join(\", \") }} \n {% endif -%}\n order by date_{{grain}}\n )\n {%- endset-%}\n {{ calc_sql }}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8004599, "supported_languages": null }, "macro.metrics.default__secondary_calculation_period_over_period": { "name": "default__secondary_calculation_period_over_period", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "unique_id": "macro.metrics.default__secondary_calculation_period_over_period", "macro_sql": "{%- macro default__secondary_calculation_period_over_period(metric_name, grain, dimensions, calc_config, metric_config) -%}\n {%- set calc_sql %}\n lag({{ metric_name }}, {{ calc_config.interval }}) over (\n {%- if dimensions %}\n partition by {{ dimensions | join(\", \") }} \n {%- endif %}\n order by date_{{grain}}\n )\n {%- endset-%}\n \n {%- if calc_config.comparison_strategy == 'difference' -%}\n {% do return (adapter.dispatch('metric_comparison_strategy_difference', 'metrics')(metric_name, calc_sql, metric_config)) %}\n \n {%- elif calc_config.comparison_strategy == 'ratio' -%}\n {% do return (adapter.dispatch('metric_comparison_strategy_ratio', 'metrics')(metric_name, calc_sql, metric_config)) %}\n \n {%- else -%}\n {% do exceptions.raise_compiler_error(\"Bad comparison_strategy for period_over_period: \" ~ calc_config.comparison_strategy ~ \". calc_config: \" ~ calc_config) %}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__metric_comparison_strategy_difference", "macro.metrics.default__metric_comparison_strategy_ratio" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8035288, "supported_languages": null }, "macro.metrics.default__metric_comparison_strategy_difference": { "name": "default__metric_comparison_strategy_difference", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "unique_id": "macro.metrics.default__metric_comparison_strategy_difference", "macro_sql": "{% macro default__metric_comparison_strategy_difference(metric_name, calc_sql, metric_config) -%}\n {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n {{ metric_name }} - {{ calc_sql }}\n {%- else -%}\n coalesce({{ metric_name }}, 0) - coalesce({{ calc_sql }}, 0)\n {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8041577, "supported_languages": null }, "macro.metrics.default__metric_comparison_strategy_ratio": { "name": "default__metric_comparison_strategy_ratio", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "unique_id": "macro.metrics.default__metric_comparison_strategy_ratio", "macro_sql": "{% macro default__metric_comparison_strategy_ratio(metric_name, calc_sql, metric_config) -%}\n\n {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n cast({{ metric_name }} as {{ type_float() }}) / nullif({{ calc_sql }}, 0)\n {%- else %}\n coalesce(cast({{ metric_name }} as {{ type_float() }}) / nullif({{ calc_sql }}, 0) , 0)\n {%- endif %}\n \n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8048863, "supported_languages": null }, "macro.metrics.default__secondary_calculation_period_to_date": { "name": "default__secondary_calculation_period_to_date", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "unique_id": "macro.metrics.default__secondary_calculation_period_to_date", "macro_sql": "{% macro default__secondary_calculation_period_to_date(metric_name, grain, dimensions, calc_config) %}\n {%- set calc_sql -%}\n {{- adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) -}} over (\n partition by date_{{ calc_config.period }}{% if dimensions -%}, {{ dimensions | join(\", \") }}{%- endif %}\n order by date_{{grain}}\n rows between unbounded preceding and current row\n )\n {%- endset %}\n {%- do return (calc_sql) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8061347, "supported_languages": null }, "macro.metrics.perform_secondary_calculation": { "name": "perform_secondary_calculation", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "unique_id": "macro.metrics.perform_secondary_calculation", "macro_sql": "{%- macro perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metric_config) -%}\n {{ return(adapter.dispatch('perform_secondary_calculation', 'metrics')(metric_name, grain, dimensions, calendar_dimensions, calc_config, metric_config)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.metrics.default__perform_secondary_calculation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8075619, "supported_languages": null }, "macro.metrics.default__perform_secondary_calculation": { "name": "default__perform_secondary_calculation", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "unique_id": "macro.metrics.default__perform_secondary_calculation", "macro_sql": "{% macro default__perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metric_config) %}\n {%- set combined_dimensions = dimensions+calendar_dimensions -%}\n {%- set calc_type = calc_config.calculation -%}\n {%- set calc_sql = '' -%}\n \n {%- if calc_type == 'period_over_period' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_period_over_period', 'metrics')(metric_name, grain, combined_dimensions, calc_config, metric_config) -%}\n {%- elif calc_type == 'rolling' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_rolling', 'metrics')(metric_name, grain, combined_dimensions, calc_config) -%}\n {%- elif calc_type == 'period_to_date' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_period_to_date', 'metrics')(metric_name, grain, combined_dimensions, calc_config) -%}\n {%- elif calc_type == 'prior' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_prior', 'metrics')(metric_name, grain, combined_dimensions, calc_config) -%}\n {%- else -%}\n {%- do exceptions.raise_compiler_error(\"Unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) -%} \n {%- endif -%}\n {{ calc_sql }} as {{ metrics.generate_secondary_calculation_alias(metric_name, calc_config, grain, true) }}\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.metrics.default__secondary_calculation_period_over_period", "macro.metrics.default__secondary_calculation_rolling", "macro.metrics.default__secondary_calculation_period_to_date", "macro.metrics.default__secondary_calculation_prior", "macro.metrics.generate_secondary_calculation_alias" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.809984, "supported_languages": null }, "macro.metrics.generate_secondary_calculation_alias": { "name": "generate_secondary_calculation_alias", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "unique_id": "macro.metrics.generate_secondary_calculation_alias", "macro_sql": "{% macro generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n\n {{ return(adapter.dispatch('generate_secondary_calculation_alias', 'metrics')(metric_name, calc_config, grain, is_multiple_metrics)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.metrics.default__generate_secondary_calculation_alias" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.81328, "supported_languages": null }, "macro.metrics.default__generate_secondary_calculation_alias": { "name": "default__generate_secondary_calculation_alias", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "unique_id": "macro.metrics.default__generate_secondary_calculation_alias", "macro_sql": "{% macro default__generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n {%- if calc_config.alias -%}\n {%- if is_multiple_metrics -%}\n {%- do return(metric_name ~ \"_\" ~ calc_config.alias) -%}\n {%- else -%}\n {% do return(calc_config.alias) %}\n {%- endif -%}\n {%- endif -%}\n \n {%- set calc_type = calc_config.calculation -%}\n {%- if calc_type == 'period_over_period' -%}\n {%- if is_multiple_metrics -%}\n {%- do return(metric_name ~ \"_\" ~ calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n {%- else -%}\n {%- do return(calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n {%- endif -%}\n \n {%- elif calc_type == 'rolling' %}\n {%- if is_multiple_metrics -%}\n {%- if calc_config.interval -%}\n {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n {%- else -%}\n {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate) %}\n {%- endif -%}\n {%- else -%}\n {%- if calc_config.interval -%}\n {%- do return(\"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n {%- else -%}\n {%- do return(\"rolling_\" ~ calc_config.aggregate) %}\n {%- endif -%}\n {%- endif -%}\n \n {%- elif calc_type == 'period_to_date' %}\n {% if is_multiple_metrics %}\n {%- do return(metric_name ~ \"_\" ~ calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n {% else %}\n {%- do return(calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n {% endif %}\n \n {%- elif calc_type == 'prior' %}\n {% if is_multiple_metrics %}\n {%- do return(metric_name ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n {% else %}\n {%- do return(calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n {% endif %}\n\n {%- else %}\n {%- do exceptions.raise_compiler_error(\"Can't generate alias for unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) %} \n {%- endif %}\n\n {{ calc_sql }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.818061, "supported_languages": null }, "macro.metrics.get_model_relation": { "name": "get_model_relation", "resource_type": "macro", "package_name": "metrics", "path": "macros/graph_parsing/get_model_relation.sql", "original_file_path": "macros/graph_parsing/get_model_relation.sql", "unique_id": "macro.metrics.get_model_relation", "macro_sql": "{% macro get_model_relation(ref_name, metric_name) %}\n {% if execute %}\n {% set model_ref_node = graph.nodes.values() | selectattr('name', 'equalto', ref_name) | first %}\n {% if model_ref_node | length == 0 %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is referencing the model \" ~ ref_name ~ \", which does not exist.\") %}\n {% endif %}\n\n {% set relation = api.Relation.create(\n database = model_ref_node.database,\n schema = model_ref_node.schema,\n identifier = model_ref_node.alias\n )\n %}\n\n {% do return(relation) %}\n\n {% else %}\n {% do return(api.Relation.create()) %}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8199463, "supported_languages": null }, "macro.metrics.get_metric_relation": { "name": "get_metric_relation", "resource_type": "macro", "package_name": "metrics", "path": "macros/graph_parsing/get_metric_relation.sql", "original_file_path": "macros/graph_parsing/get_metric_relation.sql", "unique_id": "macro.metrics.get_metric_relation", "macro_sql": "{% macro get_metric_relation(ref_name) %}\n \n {% if execute %}\n {% set relation = metric(ref_name)%}\n {% do return(relation) %}\n {% else %}\n {% do return(api.Relation.create()) %}\n {% endif %} \n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8208246, "supported_languages": null }, "macro.dbt_utils.test_at_least_one": { "name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_at_least_one" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8215024, "supported_languages": null }, "macro.dbt_utils.default__test_at_least_one": { "name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n select\n {# In TSQL, subquery aggregate columns need aliases #}\n {# thus: a filler col name, 'filler_column' #}\n count({{ column_name }}) as filler_column\n\n from {{ model }}\n\n having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.821964, "supported_languages": null }, "macro.dbt_utils.test_cardinality_equality": { "name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_cardinality_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8229628, "supported_languages": null }, "macro.dbt_utils.default__test_cardinality_equality": { "name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n {{ column_name }},\n count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n {{ field }},\n count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n select *\n from table_a\n {{ dbt_utils.except() }}\n select *\n from table_b\n),\n\nexcept_b as (\n select *\n from table_b\n {{ dbt_utils.except() }}\n select *\n from table_a\n),\n\nunioned as (\n select *\n from except_a\n union all\n select *\n from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8236887, "supported_languages": null }, "macro.dbt_utils.test_not_constant": { "name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_constant" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8243334, "supported_languages": null }, "macro.dbt_utils.default__test_not_constant": { "name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n {# In TSQL, subquery aggregate columns need aliases #}\n {# thus: a filler col name, 'filler_column' #}\n count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8247132, "supported_languages": null }, "macro.dbt_utils.test_fewer_rows_than": { "name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_fewer_rows_than" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8256643, "supported_languages": null }, "macro.dbt_utils.default__test_fewer_rows_than": { "name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n select\n count_our_model,\n count_comparison_model\n from a\n cross join b\n\n),\nfinal as (\n\n select *,\n case\n -- fail the test if we have more rows than the reference model and return the row count delta\n when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n -- fail the test if they are the same number\n when count_our_model = count_comparison_model then 1\n -- pass the test if the delta is positive (i.e. return the number 0)\n else 0\n end as row_count_delta\n from counts\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8261855, "supported_languages": null }, "macro.dbt_utils.test_equality": { "name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8275394, "supported_languages": null }, "macro.dbt_utils.default__test_equality": { "name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n count(*) + coalesce(abs(\n sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ model }}\n\n),\n\nb as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n select {{compare_cols_csv}} from a\n {{ dbt_utils.except() }}\n select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n select {{compare_cols_csv}} from b\n {{ dbt_utils.except() }}\n select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n union all\n select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8293953, "supported_languages": null }, "macro.dbt_utils.test_equal_rowcount": { "name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_equal_rowcount" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8302088, "supported_languages": null }, "macro.dbt_utils.default__test_equal_rowcount": { "name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\nwith a as (\n\n select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n select\n count_a,\n count_b,\n abs(count_a - count_b) as diff_count\n from a\n cross join b\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8308575, "supported_languages": null }, "macro.dbt_utils.test_unique_combination_of_columns": { "name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_unique_combination_of_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8319678, "supported_languages": null }, "macro.dbt_utils.default__test_unique_combination_of_columns": { "name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n {%- set column_list=[] %}\n {% for column in combination_of_columns -%}\n {% set column_list = column_list.append( adapter.quote(column) ) %}\n {%- endfor %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n select\n {{ columns_csv }}\n from {{ model }}\n group by {{ columns_csv }}\n having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8333175, "supported_languages": null }, "macro.dbt_utils.test_sequential_values": { "name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_sequential_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.83454, "supported_languages": null }, "macro.dbt_utils.default__test_sequential_values": { "name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n select\n {{ column_name }},\n lag({{ column_name }}) over (\n order by {{ column_name }}\n ) as {{ previous_column_name }}\n from {{ model }}\n),\n\nvalidation_errors as (\n select\n *\n from windowed\n {% if datepart %}\n where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n {% else %}\n where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8358307, "supported_languages": null }, "macro.dbt_utils.test_mutually_exclusive_ranges": { "name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_mutually_exclusive_ranges" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8406472, "supported_languages": null }, "macro.dbt_utils.default__test_mutually_exclusive_ranges": { "name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n {% set allow_gaps_operator='=' %}\n {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n {% set allow_gaps_operator='<=' %}\n {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n {% set allow_gaps_operator='<' %}\n {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n {% set allow_zero_length_operator='<' %}\n {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n {% set allow_zero_length_operator='<=' %}\n {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n select\n {% if partition_by %}\n {{ partition_by }} as partition_by_col,\n {% endif %}\n {{ lower_bound_column }} as lower_bound,\n {{ upper_bound_column }} as upper_bound,\n\n lead({{ lower_bound_column }}) over (\n {{ partition_clause }}\n order by {{ lower_bound_column }}\n ) as next_lower_bound,\n\n row_number() over (\n {{ partition_clause }}\n order by {{ lower_bound_column }} desc\n ) = 1 as is_last_record\n\n from {{ model }}\n\n),\n\ncalc as (\n -- We want to return records where one of our assumptions fails, so we'll use\n -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n select\n *,\n\n -- For each record: lower_bound should be < upper_bound.\n -- Coalesce it to return an error on the null case (implicit assumption\n -- these columns are not_null)\n coalesce(\n lower_bound {{ allow_zero_length_operator }} upper_bound,\n false\n ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n -- Coalesce it to handle null cases for the last record.\n coalesce(\n upper_bound {{ allow_gaps_operator }} next_lower_bound,\n is_last_record,\n false\n ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n from window_functions\n\n),\n\nvalidation_errors as (\n\n select\n *\n from calc\n\n where not(\n -- THE FOLLOWING SHOULD BE TRUE --\n lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n )\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from validation_errors\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.844073, "supported_languages": null }, "macro.dbt_utils.test_accepted_range": { "name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_accepted_range" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8452349, "supported_languages": null }, "macro.dbt_utils.default__test_accepted_range": { "name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n select *\n from {{ model }}\n),\n\nvalidation_errors as (\n select *\n from meet_condition\n where\n -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n 1 = 2\n\n {%- if min_value is not none %}\n -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n {%- endif %}\n\n {%- if max_value is not none %}\n -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8462636, "supported_languages": null }, "macro.dbt_utils.test_not_accepted_values": { "name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_accepted_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.847275, "supported_languages": null }, "macro.dbt_utils.default__test_not_accepted_values": { "name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n select distinct\n {{ column_name }} as value_field\n\n from {{ model }}\n\n),\n\nvalidation_errors as (\n\n select\n value_field\n\n from all_values\n where value_field in (\n {% for value in values -%}\n {% if quote -%}\n '{{ value }}'\n {%- else -%}\n {{ value }}\n {%- endif -%}\n {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.848098, "supported_languages": null }, "macro.dbt_utils.test_recency": { "name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_recency" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.848903, "supported_languages": null }, "macro.dbt_utils.default__test_recency": { "name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n select max({{field}}) as most_recent\n from {{ model }}\n\n)\n\nselect\n\n most_recent,\n {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8496037, "supported_languages": null }, "macro.dbt_utils.test_not_null_proportion": { "name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_null_proportion" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8504605, "supported_languages": null }, "macro.dbt_utils.default__test_not_null_proportion": { "name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n select\n sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n from {{ model }}\n),\nvalidation_errors as (\n select\n not_null_proportion\n from validation\n where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8515298, "supported_languages": null }, "macro.dbt_utils.test_not_null_where": { "name": "test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n {%- set deprecation_warning = '\r\n Warning: `dbt_utils.not_null_where` is no longer supported.\r\n Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n ' -%}\r\n {%- do exceptions.warn(deprecation_warning) -%}\r\n {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_null_where" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8523753, "supported_languages": null }, "macro.dbt_utils.default__test_not_null_where": { "name": "default__test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.test_not_null" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8527358, "supported_languages": null }, "macro.dbt_utils.test_expression_is_true": { "name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_expression_is_true" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.853638, "supported_languages": null }, "macro.dbt_utils.default__test_expression_is_true": { "name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ model }} where {{ condition }}\n)\n\nselect\n *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.854316, "supported_languages": null }, "macro.dbt_utils.test_unique_where": { "name": "test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n {%- set deprecation_warning = '\r\n Warning: `dbt_utils.unique_where` is no longer supported.\r\n Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n ' -%}\r\n {%- do exceptions.warn(deprecation_warning) -%}\r\n {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_unique_where" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8551629, "supported_languages": null }, "macro.dbt_utils.default__test_unique_where": { "name": "default__test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.test_unique" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8555346, "supported_languages": null }, "macro.dbt_utils.test_relationships_where": { "name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_relationships_where" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8566961, "supported_languages": null }, "macro.dbt_utils.default__test_relationships_where": { "name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n select\n {{column_name}} as id\n\n from {{model}}\n\n where {{column_name}} is not null\n and {{from_condition}}\n\n),\n\nright_table as (\n\n select\n {{field}} as id\n\n from {{to}}\n\n where {{field}} is not null\n and {{to_condition}}\n\n),\n\nexceptions as (\n\n select\n left_table.id,\n right_table.id as right_id\n\n from left_table\n\n left join right_table\n on left_table.id = right_table.id\n\n where right_table.id is null\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from exceptions\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8574686, "supported_languages": null }, "macro.dbt_utils.intersect": { "name": "intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.intersect", "macro_sql": "{% macro intersect() %}\n {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__intersect" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8580313, "supported_languages": null }, "macro.dbt_utils.default__intersect": { "name": "default__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n intersect\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.858215, "supported_languages": null }, "macro.dbt_utils.bigquery__intersect": { "name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n intersect distinct\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.858384, "supported_languages": null }, "macro.dbt_utils.position": { "name": "position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__position" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8591087, "supported_languages": null }, "macro.dbt_utils.default__position": { "name": "default__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n position(\n {{ substring_text }} in {{ string_text }}\n )\n \n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.859415, "supported_languages": null }, "macro.dbt_utils.bigquery__position": { "name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n strpos(\n {{ string_text }},\n {{ substring_text }}\n \n )\n \n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.859712, "supported_languages": null }, "macro.dbt_utils.escape_single_quotes": { "name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__escape_single_quotes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.860393, "supported_languages": null }, "macro.dbt_utils.default__escape_single_quotes": { "name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.860853, "supported_languages": null }, "macro.dbt_utils.snowflake__escape_single_quotes": { "name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8611586, "supported_languages": null }, "macro.dbt_utils.bigquery__escape_single_quotes": { "name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8614655, "supported_languages": null }, "macro.dbt_utils.safe_cast": { "name": "safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__safe_cast" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8622136, "supported_languages": null }, "macro.dbt_utils.default__safe_cast": { "name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n {# most databases don't support this function yet\n so we just need to use cast #}\n cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8625283, "supported_languages": null }, "macro.dbt_utils.snowflake__safe_cast": { "name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8628094, "supported_languages": null }, "macro.dbt_utils.bigquery__safe_cast": { "name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8630862, "supported_languages": null }, "macro.dbt_utils.cast_array_to_string": { "name": "cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__cast_array_to_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8638723, "supported_languages": null }, "macro.dbt_utils.default__cast_array_to_string": { "name": "default__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8641987, "supported_languages": null }, "macro.dbt_utils.postgres__cast_array_to_string": { "name": "postgres__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_string", "macro.dbt_utils.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.864841, "supported_languages": null }, "macro.dbt_utils.redshift__cast_array_to_string": { "name": "redshift__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8651612, "supported_languages": null }, "macro.dbt_utils.bigquery__cast_array_to_string": { "name": "bigquery__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8654034, "supported_languages": null }, "macro.dbt_utils.array_construct": { "name": "array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__array_construct" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8664334, "supported_languages": null }, "macro.dbt_utils.default__array_construct": { "name": "default__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n {% if inputs|length > 0 %}\n array[ {{ inputs|join(' , ') }} ]\n {% else %}\n array[]::{{data_type}}[]\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.866975, "supported_languages": null }, "macro.dbt_utils.snowflake__array_construct": { "name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8672931, "supported_languages": null }, "macro.dbt_utils.redshift__array_construct": { "name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8675992, "supported_languages": null }, "macro.dbt_utils.bigquery__array_construct": { "name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8680468, "supported_languages": null }, "macro.dbt_utils.cast_bool_to_text": { "name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8689399, "supported_languages": null }, "macro.dbt_utils.default__cast_bool_to_text": { "name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8693955, "supported_languages": null }, "macro.dbt_utils.redshift__cast_bool_to_text": { "name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n case\n when {{ field }} is true then 'true'\n when {{ field }} is false then 'false'\n end::text\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8698232, "supported_languages": null }, "macro.dbt_utils.datediff": { "name": "datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8758638, "supported_languages": null }, "macro.dbt_utils.default__datediff": { "name": "default__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n datediff(\n {{ datepart }},\n {{ first_date }},\n {{ second_date }}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8762615, "supported_languages": null }, "macro.dbt_utils.bigquery__datediff": { "name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n datetime_diff(\n cast({{second_date}} as datetime),\n cast({{first_date}} as datetime),\n {{datepart}}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8766193, "supported_languages": null }, "macro.dbt_utils.postgres__datediff": { "name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n {% if datepart == 'year' %}\n (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n {% elif datepart == 'quarter' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'year') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n {% elif datepart == 'month' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'year') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n {% elif datepart == 'day' %}\n (({{second_date}})::date - ({{first_date}})::date)\n {% elif datepart == 'week' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n case when {{first_date}} <= {{second_date}} then 0 else -1 end\n else\n case when {{first_date}} <= {{second_date}} then 1 else 0 end\n end)\n {% elif datepart == 'hour' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'day') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n {% elif datepart == 'minute' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n {% elif datepart == 'second' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n {% elif datepart == 'millisecond' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n {% elif datepart == 'microsecond' %}\n ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n {% else %}\n {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n {% endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.880259, "supported_languages": null }, "macro.dbt_utils.redshift__datediff": { "name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.88071, "supported_languages": null }, "macro.dbt_utils.type_string": { "name": "type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8819854, "supported_languages": null }, "macro.dbt_utils.default__type_string": { "name": "default__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_string", "macro_sql": "{% macro default__type_string() %}\n string\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8821702, "supported_languages": null }, "macro.dbt_utils.redshift__type_string": { "name": "redshift__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n varchar\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8823452, "supported_languages": null }, "macro.dbt_utils.postgres__type_string": { "name": "postgres__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n varchar\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8825119, "supported_languages": null }, "macro.dbt_utils.snowflake__type_string": { "name": "snowflake__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n varchar\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8826756, "supported_languages": null }, "macro.dbt_utils.type_timestamp": { "name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8830235, "supported_languages": null }, "macro.dbt_utils.default__type_timestamp": { "name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n timestamp\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8831968, "supported_languages": null }, "macro.dbt_utils.postgres__type_timestamp": { "name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n timestamp without time zone\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8833613, "supported_languages": null }, "macro.dbt_utils.snowflake__type_timestamp": { "name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n timestamp_ntz\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.883522, "supported_languages": null }, "macro.dbt_utils.type_float": { "name": "type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8838644, "supported_languages": null }, "macro.dbt_utils.default__type_float": { "name": "default__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_float", "macro_sql": "{% macro default__type_float() %}\n float\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8840377, "supported_languages": null }, "macro.dbt_utils.bigquery__type_float": { "name": "bigquery__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n float64\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.884203, "supported_languages": null }, "macro.dbt_utils.type_numeric": { "name": "type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8845468, "supported_languages": null }, "macro.dbt_utils.default__type_numeric": { "name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n numeric(28, 6)\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.884718, "supported_languages": null }, "macro.dbt_utils.bigquery__type_numeric": { "name": "bigquery__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n numeric\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8848808, "supported_languages": null }, "macro.dbt_utils.type_bigint": { "name": "type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__type_bigint" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8852258, "supported_languages": null }, "macro.dbt_utils.default__type_bigint": { "name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n bigint\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8854055, "supported_languages": null }, "macro.dbt_utils.bigquery__type_bigint": { "name": "bigquery__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n int64\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8855681, "supported_languages": null }, "macro.dbt_utils.type_int": { "name": "type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__type_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8859417, "supported_languages": null }, "macro.dbt_utils.default__type_int": { "name": "default__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_int", "macro_sql": "{% macro default__type_int() %}\n int\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.886119, "supported_languages": null }, "macro.dbt_utils.bigquery__type_int": { "name": "bigquery__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n int64\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8862894, "supported_languages": null }, "macro.dbt_utils.concat": { "name": "concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "unique_id": "macro.dbt_utils.concat", "macro_sql": "{% macro concat(fields) -%}\n {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.886824, "supported_languages": null }, "macro.dbt_utils.default__concat": { "name": "default__concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "unique_id": "macro.dbt_utils.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8871071, "supported_languages": null }, "macro.dbt_utils.length": { "name": "length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.length", "macro_sql": "{% macro length(expression) -%}\n {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__length" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8880897, "supported_languages": null }, "macro.dbt_utils.default__length": { "name": "default__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.default__length", "macro_sql": "{% macro default__length(expression) %}\n \n length(\n {{ expression }}\n )\n \n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8883467, "supported_languages": null }, "macro.dbt_utils.redshift__length": { "name": "redshift__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n len(\n {{ expression }}\n )\n \n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8885767, "supported_languages": null }, "macro.dbt_utils.identifier": { "name": "identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.identifier", "macro_sql": "{% macro identifier(value) %}\t\n {%- set error_message = '\n Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n '.format(model.package_name, model.name) -%}\n {%- do exceptions.warn(error_message) -%}\n {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8895075, "supported_languages": null }, "macro.dbt_utils.default__identifier": { "name": "default__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n \"{{ value }}\"\t\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8897622, "supported_languages": null }, "macro.dbt_utils.bigquery__identifier": { "name": "bigquery__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n `{{ value }}`\t\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8900082, "supported_languages": null }, "macro.dbt_utils.any_value": { "name": "any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "unique_id": "macro.dbt_utils.any_value", "macro_sql": "{% macro any_value(expression) -%}\n {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__any_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.890603, "supported_languages": null }, "macro.dbt_utils.default__any_value": { "name": "default__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "unique_id": "macro.dbt_utils.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n \n any_value({{ expression }})\n \n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8908412, "supported_languages": null }, "macro.dbt_utils.postgres__any_value": { "name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "unique_id": "macro.dbt_utils.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n min({{ expression }})\n \n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8910866, "supported_languages": null }, "macro.dbt_utils._is_ephemeral": { "name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n {%- if obj.is_cte -%}\n {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n {% if obj.name.startswith(ephemeral_prefix) %}\n {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n {% else %}\n {% set model_name = obj.name %}\n {%- endif -%}\n {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n {% endset %}\n {%- do exceptions.raise_compiler_error(error_message) -%}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8927033, "supported_languages": null }, "macro.dbt_utils._is_relation": { "name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.89362, "supported_languages": null }, "macro.dbt_utils.array_concat": { "name": "array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__array_concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.894385, "supported_languages": null }, "macro.dbt_utils.default__array_concat": { "name": "default__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8946853, "supported_languages": null }, "macro.dbt_utils.bigquery__array_concat": { "name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8949742, "supported_languages": null }, "macro.dbt_utils.redshift__array_concat": { "name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.895259, "supported_languages": null }, "macro.dbt_utils.right": { "name": "right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__right" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8962255, "supported_languages": null }, "macro.dbt_utils.default__right": { "name": "default__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n \n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.896532, "supported_languages": null }, "macro.dbt_utils.bigquery__right": { "name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n case when {{ length_expression }} = 0 \n then ''\n else \n substr(\n {{ string_text }},\n -1 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests ({{ length_expression }})\n )\n end\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8968732, "supported_languages": null }, "macro.dbt_utils.snowflake__right": { "name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n case when {{ length_expression }} = 0 \n then ''\n else \n right(\n {{ string_text }},\n {{ length_expression }}\n )\n end\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8972137, "supported_languages": null }, "macro.dbt_utils.array_append": { "name": "array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__array_append" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.897965, "supported_languages": null }, "macro.dbt_utils.default__array_append": { "name": "default__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8982718, "supported_languages": null }, "macro.dbt_utils.bigquery__array_append": { "name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8986726, "supported_languages": null }, "macro.dbt_utils.redshift__array_append": { "name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.8990703, "supported_languages": null }, "macro.dbt_utils.last_day": { "name": "last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.900105, "supported_languages": null }, "macro.dbt_utils.default_last_day": { "name": "default_last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n cast(\n {{dbt_utils.dateadd('day', '-1',\n dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n )}}\n as date)\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [ "macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.90084, "supported_languages": null }, "macro.dbt_utils.default__last_day": { "name": "default__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default_last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9011788, "supported_languages": null }, "macro.dbt_utils.postgres__last_day": { "name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n {%- if datepart == 'quarter' -%}\n -- postgres dateadd does not support quarter interval.\n cast(\n {{dbt_utils.dateadd('day', '-1',\n dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n )}}\n as date)\n {%- else -%}\n {{dbt_utils.default_last_day(date, datepart)}}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.90203, "supported_languages": null }, "macro.dbt_utils.redshift__last_day": { "name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9024272, "supported_languages": null }, "macro.dbt_utils.split_part": { "name": "split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9047666, "supported_languages": null }, "macro.dbt_utils.default__split_part": { "name": "default__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n {{ part_number }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.905132, "supported_languages": null }, "macro.dbt_utils._split_part_negative": { "name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n length({{ string_text }}) \n - length(\n replace({{ string_text }}, {{ delimiter_text }}, '')\n ) + 2 {{ part_number }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.905605, "supported_languages": null }, "macro.dbt_utils.postgres__split_part": { "name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n {% if part_number >= 0 %}\n {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n {% else %}\n {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.906348, "supported_languages": null }, "macro.dbt_utils.redshift__split_part": { "name": "redshift__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n {% if part_number >= 0 %}\n {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n {% else %}\n {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.907062, "supported_languages": null }, "macro.dbt_utils.bigquery__split_part": { "name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n {% if part_number >= 0 %}\n split(\n {{ string_text }},\n {{ delimiter_text }}\n )[safe_offset({{ part_number - 1 }})]\n {% else %}\n split(\n {{ string_text }},\n {{ delimiter_text }}\n )[safe_offset(\n length({{ string_text }}) \n - length(\n replace({{ string_text }}, {{ delimiter_text }}, '')\n ) + 1\n )]\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9078333, "supported_languages": null }, "macro.dbt_utils.date_trunc": { "name": "date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9085157, "supported_languages": null }, "macro.dbt_utils.default__date_trunc": { "name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9088142, "supported_languages": null }, "macro.dbt_utils.bigquery__date_trunc": { "name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n timestamp_trunc(\n cast({{date}} as timestamp),\n {{datepart}}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9091053, "supported_languages": null }, "macro.dbt_utils.string_literal": { "name": "string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "unique_id": "macro.dbt_utils.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__string_literal" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.909621, "supported_languages": null }, "macro.dbt_utils.default__string_literal": { "name": "default__string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "unique_id": "macro.dbt_utils.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n '{{ value }}'\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9098666, "supported_languages": null }, "macro.dbt_utils.width_bucket": { "name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__width_bucket" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9121547, "supported_languages": null }, "macro.dbt_utils.default__width_bucket": { "name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n {% set bin_size -%}\n (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n {%- endset %}\n (\n -- to break ties when the amount is eaxtly at the bucket egde\n case\n when\n mod(\n {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n ) = 0\n then 1\n else 0\n end\n ) +\n -- Anything over max_value goes the N+1 bucket\n least(\n ceil(\n ({{ expr }} - {{ min_value }})/{{ bin_size }}\n ),\n {{ num_buckets }} + 1\n )\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.913139, "supported_languages": null }, "macro.dbt_utils.redshift__width_bucket": { "name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n {% set bin_size -%}\n (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n {%- endset %}\n (\n -- to break ties when the amount is exactly at the bucket edge\n case\n when\n {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n = 0\n then 1\n else 0\n end\n ) +\n -- Anything over max_value goes the N+1 bucket\n least(\n ceil(\n ({{ expr }} - {{ min_value }})/{{ bin_size }}\n ),\n {{ num_buckets }} + 1\n )\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.914139, "supported_languages": null }, "macro.dbt_utils.snowflake__width_bucket": { "name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9145508, "supported_languages": null }, "macro.dbt_utils.hash": { "name": "hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.hash", "macro_sql": "{% macro hash(field) -%}\n {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__hash" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9151344, "supported_languages": null }, "macro.dbt_utils.default__hash": { "name": "default__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9154418, "supported_languages": null }, "macro.dbt_utils.bigquery__hash": { "name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__hash" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.915724, "supported_languages": null }, "macro.dbt_utils.except": { "name": "except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.except", "macro_sql": "{% macro except() %}\n {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.916242, "supported_languages": null }, "macro.dbt_utils.default__except": { "name": "default__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.default__except", "macro_sql": "{% macro default__except() %}\n\n except\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.916421, "supported_languages": null }, "macro.dbt_utils.bigquery__except": { "name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n except distinct\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9165974, "supported_languages": null }, "macro.dbt_utils.bool_or": { "name": "bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__bool_or" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9172513, "supported_languages": null }, "macro.dbt_utils.default__bool_or": { "name": "default__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n \n bool_or({{ expression }})\n \n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9176378, "supported_languages": null }, "macro.dbt_utils.snowflake__bool_or": { "name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n \n boolor_agg({{ expression }})\n \n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9178839, "supported_languages": null }, "macro.dbt_utils.bigquery__bool_or": { "name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n \n logical_or({{ expression }})\n \n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.918135, "supported_languages": null }, "macro.dbt_utils.current_timestamp": { "name": "current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9191465, "supported_languages": null }, "macro.dbt_utils.default__current_timestamp": { "name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9193985, "supported_languages": null }, "macro.dbt_utils.redshift__current_timestamp": { "name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n getdate()\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9195683, "supported_languages": null }, "macro.dbt_utils.bigquery__current_timestamp": { "name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n current_timestamp\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.919734, "supported_languages": null }, "macro.dbt_utils.current_timestamp_in_utc": { "name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__current_timestamp_in_utc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.920081, "supported_languages": null }, "macro.dbt_utils.default__current_timestamp_in_utc": { "name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9203312, "supported_languages": null }, "macro.dbt_utils.snowflake__current_timestamp_in_utc": { "name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.920651, "supported_languages": null }, "macro.dbt_utils.postgres__current_timestamp_in_utc": { "name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9209023, "supported_languages": null }, "macro.dbt_utils.redshift__current_timestamp_in_utc": { "name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__current_timestamp_in_utc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9211922, "supported_languages": null }, "macro.dbt_utils.replace": { "name": "replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "unique_id": "macro.dbt_utils.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9218798, "supported_languages": null }, "macro.dbt_utils.default__replace": { "name": "default__replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "unique_id": "macro.dbt_utils.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n replace(\n {{ field }},\n {{ old_chars }},\n {{ new_chars }}\n )\n \n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9222643, "supported_languages": null }, "macro.dbt_utils.dateadd": { "name": "dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9232802, "supported_languages": null }, "macro.dbt_utils.default__dateadd": { "name": "default__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n dateadd(\n {{ datepart }},\n {{ interval }},\n {{ from_date_or_timestamp }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9236448, "supported_languages": null }, "macro.dbt_utils.bigquery__dateadd": { "name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n datetime_add(\n cast( {{ from_date_or_timestamp }} as datetime),\n interval {{ interval }} {{ datepart }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9240046, "supported_languages": null }, "macro.dbt_utils.postgres__dateadd": { "name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests ({{ interval }}))\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9243522, "supported_languages": null }, "macro.dbt_utils.redshift__dateadd": { "name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.924762, "supported_languages": null }, "macro.dbt_utils.listagg": { "name": "listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__listagg" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.928347, "supported_languages": null }, "macro.dbt_utils.default__listagg": { "name": "default__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n {% if limit_num -%}\n array_to_string(\n array_slice(\n array_agg(\n {{ measure }}\n ){% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n ,0\n ,{{ limit_num }}\n ),\n {{ delimiter_text }}\n )\n {%- else %}\n listagg(\n {{ measure }},\n {{ delimiter_text }}\n )\n {% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9292333, "supported_languages": null }, "macro.dbt_utils.bigquery__listagg": { "name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n string_agg(\n {{ measure }},\n {{ delimiter_text }}\n {% if order_by_clause -%}\n {{ order_by_clause }}\n {%- endif %}\n {% if limit_num -%}\n limit {{ limit_num }}\n {%- endif %}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.929851, "supported_languages": null }, "macro.dbt_utils.postgres__listagg": { "name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n \n {% if limit_num -%}\n array_to_string(\n (array_agg(\n {{ measure }}\n {% if order_by_clause -%}\n {{ order_by_clause }}\n {%- endif %}\n ))[1:{{ limit_num }}],\n {{ delimiter_text }}\n )\n {%- else %}\n string_agg(\n {{ measure }},\n {{ delimiter_text }}\n {% if order_by_clause -%}\n {{ order_by_clause }}\n {%- endif %}\n )\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9308443, "supported_languages": null }, "macro.dbt_utils.redshift__listagg": { "name": "redshift__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n {% if limit_num -%}\n {% set ns = namespace() %}\n {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %} \n {%- for char in special_chars.split(',') -%}\n {% set escape_char %}\\\\{{ char }}{% endset %}\n {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n {%- endfor -%}\n\n {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n regexp_substr(\n listagg(\n {{ measure }},\n {{ delimiter_text }}\n )\n {% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n ,{{ regex }}\n )\n {%- else %}\n listagg(\n {{ measure }},\n {{ delimiter_text }}\n )\n {% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9328265, "supported_languages": null }, "macro.dbt_utils.pretty_log_format": { "name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__pretty_log_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.93341, "supported_languages": null }, "macro.dbt_utils.default__pretty_log_format": { "name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.pretty_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9337802, "supported_languages": null }, "macro.dbt_utils.slugify": { "name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.934772, "supported_languages": null }, "macro.dbt_utils.pretty_time": { "name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__pretty_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9353535, "supported_languages": null }, "macro.dbt_utils.default__pretty_time": { "name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9357688, "supported_languages": null }, "macro.dbt_utils.log_info": { "name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__log_info" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9363055, "supported_languages": null }, "macro.dbt_utils.default__log_info": { "name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.pretty_log_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9366739, "supported_languages": null }, "macro.dbt_utils.get_period_boundaries": { "name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_period_boundaries" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9456701, "supported_languages": null }, "macro.dbt_utils.default__get_period_boundaries": { "name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n {% call statement('period_boundaries', fetch_result=True) -%}\n with data as (\n select\n coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n coalesce(\n {{dbt_utils.dateadd('millisecond',\n -1,\n \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n {{dbt_utils.current_timestamp()}}\n ) as stop_timestamp\n from \"{{target_schema}}\".\"{{target_table}}\"\n )\n\n select\n start_timestamp,\n stop_timestamp,\n {{dbt_utils.datediff('start_timestamp',\n 'stop_timestamp',\n period)}} + 1 as num_periods\n from data\n {%- endcall %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9467864, "supported_languages": null }, "macro.dbt_utils.get_period_sql": { "name": "get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_period_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9474494, "supported_languages": null }, "macro.dbt_utils.default__get_period_sql": { "name": "default__get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n {%- set period_filter -%}\n (\"{{timestamp_field}}\" > '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n \"{{timestamp_field}}\" < '{{stop_timestamp}}'::timestamp)\n {%- endset -%}\n\n {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n select\n {{target_cols_csv}}\n from (\n {{filtered_sql}}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9484932, "supported_languages": null }, "macro.dbt_utils.materialization_insert_by_period_default": { "name": "materialization_insert_by_period_default", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n {%- set timestamp_field = config.require('timestamp_field') -%}\n {%- set start_date = config.require('start_date') -%}\n {%- set stop_date = config.get('stop_date') or '' -%}\n {%- set period = config.get('period') or 'week' -%}\n\n {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n {%- set error_message -%}\n Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n {%- endset -%}\n {{ exceptions.raise_compiler_error(error_message) }}\n {%- endif -%}\n\n {%- set identifier = model['name'] -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n -- setup\n {% if old_relation is none -%}\n -- noop\n {%- elif should_truncate -%}\n {{adapter.truncate_relation(old_relation)}}\n {%- elif should_drop -%}\n {{adapter.drop_relation(old_relation)}}\n {%- set old_relation = none -%}\n {%- endif %}\n\n {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n -- `begin` happens here, so `commit` after it to finish the transaction\n {{run_hooks(pre_hooks, inside_transaction=True)}}\n {% call statement() -%}\n begin; -- make extra sure we've closed out the transaction\n commit;\n {%- endcall %}\n\n -- build model\n {% if force_create or old_relation is none -%}\n {# Create an empty target table -#}\n {% call statement('main') -%}\n {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n {{create_table_as(False, target_relation, empty_sql)}}\n {%- endcall %}\n {%- endif %}\n\n {% set _ = dbt_utils.get_period_boundaries(schema,\n identifier,\n timestamp_field,\n start_date,\n stop_date,\n period) %}\n {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n -- commit each period as a separate transaction\n {% for i in range(num_periods) -%}\n {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n {{ dbt_utils.log_info(msg) }}\n\n {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n schema=schema, type='table') -%}\n {% call statement() -%}\n {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n sql,\n timestamp_field,\n period,\n start_timestamp,\n stop_timestamp,\n i) %}\n {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n {%- endcall %}\n\n {{adapter.expand_target_column_types(from_relation=tmp_relation,\n to_relation=target_relation)}}\n {%- set name = 'main-' ~ i -%}\n {% call statement(name, fetch_result=True) -%}\n insert into {{target_relation}} ({{target_cols_csv}})\n (\n select\n {{target_cols_csv}}\n from {{tmp_relation.include(schema=False)}}\n );\n {%- endcall %}\n {% set result = load_result('main-' ~ i) %}\n {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n {% set rows_inserted = result['response']['rows_affected'] %}\n {% else %} {# older versions #}\n {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n {% endif %}\n \n {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n {{ dbt_utils.log_info(msg) }}\n\n {%- endfor %}\n\n {% call statement() -%}\n begin;\n {%- endcall %}\n\n {{run_hooks(post_hooks, inside_transaction=True)}}\n\n {% call statement() -%}\n commit;\n {%- endcall %}\n\n {{run_hooks(post_hooks, inside_transaction=False)}}\n\n {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n {% call noop_statement('main', status_string) -%}\n -- no-op\n {%- endcall %}\n\n -- Return the relations created in this materialization\n {{ return({'relations': [target_relation]}) }} \n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.958877, "supported_languages": [ "sql" ] }, "macro.dbt_utils.get_url_host": { "name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_host" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9596353, "supported_languages": null }, "macro.dbt_utils.default__get_url_host": { "name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n dbt_utils.split_part(\n dbt_utils.split_part(\n dbt_utils.replace(\n dbt_utils.replace(\n dbt_utils.replace(field, \"'android-app://'\", \"''\"\n ), \"'http://'\", \"''\"\n ), \"'https://'\", \"''\"\n ), \"'/'\", 1\n ), \"'?'\", 1\n )\n\n-%}\n\n\n {{ dbt_utils.safe_cast(\n parsed,\n dbt_utils.type_string()\n )}}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9606075, "supported_languages": null }, "macro.dbt_utils.get_url_parameter": { "name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_parameter" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9612603, "supported_languages": null }, "macro.dbt_utils.default__get_url_parameter": { "name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.961966, "supported_languages": null }, "macro.dbt_utils.get_url_path": { "name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_path" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9628437, "supported_languages": null }, "macro.dbt_utils.default__get_url_path": { "name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n {%- set stripped_url = \n dbt_utils.replace(\n dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n -%}\n\n {%- set first_slash_pos -%}\n coalesce(\n nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n )\n {%- endset -%}\n\n {%- set parsed_path =\n dbt_utils.split_part(\n dbt_utils.right(\n stripped_url, \n dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n ), \n \"'?'\", 1\n )\n -%}\n\n {{ dbt_utils.safe_cast(\n parsed_path,\n dbt_utils.type_string()\n )}}\n \n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9641702, "supported_languages": null }, "macro.dbt_utils.star": { "name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__star" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9654539, "supported_languages": null }, "macro.dbt_utils.default__star": { "name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n {%- do dbt_utils._is_relation(from, 'star') -%}\n {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {{ return('*') }}\n {% endif %}\n\n {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n {%- if cols|length <= 0 -%}\n {{- return('*') -}}\n {%- else -%}\n {%- for col in cols %}\n {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n {%- if not loop.last %},{{ '\\n ' }}{% endif %}\n {%- endfor -%}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.967578, "supported_languages": null }, "macro.dbt_utils.get_intervals_between": { "name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_intervals_between" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9688122, "supported_languages": null }, "macro.dbt_utils.default__get_intervals_between": { "name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n {%- call statement('get_intervals_between', fetch_result=True) %}\n\n select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('get_intervals_between') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values[0]) }}\n {%- else -%}\n {{ return(1) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.970061, "supported_languages": null }, "macro.dbt_utils.date_spine": { "name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__date_spine" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9705567, "supported_languages": null }, "macro.dbt_utils.default__date_spine": { "name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n \"day\",\n \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n {{dbt_utils.generate_series(\n dbt_utils.get_intervals_between(start_date, end_date, datepart)\n )}}\n\n),\n\nall_periods as (\n\n select (\n {{\n dbt_utils.dateadd(\n datepart,\n \"row_number() over (order by 1) - 1\",\n start_date\n )\n }}\n ) as date_{{datepart}}\n from rawdata\n\n),\n\nfiltered as (\n\n select *\n from all_periods\n where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from filtered\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9712977, "supported_languages": null }, "macro.dbt_utils.get_tables_by_prefix_sql": { "name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_tables_by_prefix_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9720986, "supported_languages": null }, "macro.dbt_utils.default__get_tables_by_prefix_sql": { "name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n {{ dbt_utils.get_tables_by_pattern_sql(\n schema_pattern = schema,\n table_pattern = prefix ~ '%',\n exclude = exclude,\n database = database\n ) }}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.972698, "supported_languages": null }, "macro.dbt_utils.group_by": { "name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9732783, "supported_languages": null }, "macro.dbt_utils.default__group_by": { "name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n group by {% for i in range(1, n + 1) -%}\n {{ i }}{{ ',' if not loop.last }} \n {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9738207, "supported_languages": null }, "macro.dbt_utils.get_powers_of_two": { "name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9752746, "supported_languages": null }, "macro.dbt_utils.default__get_powers_of_two": { "name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n {% if upper_bound <= 0 %}\n {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n {% endif %}\n\n {% for _ in range(1, 100) %}\n {% if upper_bound <= 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests loop.index %}{{ return(loop.index) }}{% endif %}\n {% endfor %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.976144, "supported_languages": null }, "macro.dbt_utils.generate_series": { "name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__generate_series" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9765496, "supported_languages": null }, "macro.dbt_utils.default__generate_series": { "name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n with p as (\n select 0 as generated_number union all select 1\n ), unioned as (\n\n select\n\n {% for i in range(n) %}\n p{{i}}.generated_number README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests power(2, {{i}})\n {% if not loop.last %} + {% endif %}\n {% endfor %}\n + 1\n as generated_number\n\n from\n\n {% for i in range(n) %}\n p as p{{i}}\n {% if not loop.last %} cross join {% endif %}\n {% endfor %}\n\n )\n\n select *\n from unioned\n where generated_number <= {{upper_bound}}\n order by generated_number\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9777918, "supported_languages": null }, "macro.dbt_utils.get_relations_by_prefix": { "name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_relations_by_prefix" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9790175, "supported_languages": null }, "macro.dbt_utils.default__get_relations_by_prefix": { "name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n {%- call statement('get_tables', fetch_result=True) %}\n\n {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n {%- endcall -%}\n\n {%- set table_list = load_result('get_tables') -%}\n\n {%- if table_list and table_list['table'] -%}\n {%- set tbl_relations = [] -%}\n {%- for row in table_list['table'] -%}\n {%- set tbl_relation = api.Relation.create(\n database=database,\n schema=row.table_schema,\n identifier=row.table_name,\n type=row.table_type\n ) -%}\n {%- do tbl_relations.append(tbl_relation) -%}\n {%- endfor -%}\n\n {{ return(tbl_relations) }}\n {%- else -%}\n {{ return([]) }}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9807477, "supported_languages": null }, "macro.dbt_utils.safe_add": { "name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add() -%}\n {# needed for safe_add to allow for non-keyword arguments see SO post #}\n {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n {% set frustrating_jinja_feature = varargs %}\n {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__safe_add" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9815266, "supported_languages": null }, "macro.dbt_utils.default__safe_add": { "name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n ') }}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9821663, "supported_languages": null }, "macro.dbt_utils.get_table_types_sql": { "name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.982972, "supported_languages": null }, "macro.dbt_utils.default__get_table_types_sql": { "name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'EXTERNAL TABLE' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as \"table_type\"\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9831698, "supported_languages": null }, "macro.dbt_utils.postgres__get_table_types_sql": { "name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'FOREIGN' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as \"table_type\"\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9833581, "supported_languages": null }, "macro.dbt_utils.bigquery__get_table_types_sql": { "name": "bigquery__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'EXTERNAL TABLE' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as `table_type`\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9835427, "supported_languages": null }, "macro.dbt_utils.get_tables_by_pattern_sql": { "name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9859884, "supported_languages": null }, "macro.dbt_utils.default__get_tables_by_pattern_sql": { "name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n select distinct\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n {{ dbt_utils.get_table_types_sql() }}\n from {{ database }}.information_schema.tables\n where table_schema ilike '{{ schema_pattern }}'\n and table_name ilike '{{ table_pattern }}'\n and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9865751, "supported_languages": null }, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": { "name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n {% if '%' in schema_pattern %}\n {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n {% else %}\n {% set schemata=[schema_pattern] %}\n {% endif %}\n\n {% set sql %}\n {% for schema in schemata %}\n select distinct\n table_schema,\n table_name,\n {{ dbt_utils.get_table_types_sql() }}\n\n from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n where lower(table_name) like lower ('{{ table_pattern }}')\n and lower(table_name) not like lower ('{{ exclude }}')\n\n {% if not loop.last %} union all {% endif %}\n\n {% endfor %}\n {% endset %}\n\n {{ return(sql) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9880693, "supported_languages": null }, "macro.dbt_utils._bigquery__get_matching_schemata": { "name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n {% if execute %}\n\n {% set sql %}\n select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n where lower(schema_name) like lower('{{ schema_pattern }}')\n {% endset %}\n\n {% set results=run_query(sql) %}\n\n {% set schemata=results.columns['schema_name'].values() %}\n\n {{ return(schemata) }}\n\n {% else %}\n\n {{ return([]) }}\n\n {% endif %}\n\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9891367, "supported_languages": null }, "macro.dbt_utils.pivot": { "name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n values,\n alias=True,\n agg='sum',\n cmp='=',\n prefix='',\n suffix='',\n then_value=1,\n else_value=0,\n quote_identifiers=True,\n distinct=False) %}\n {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__pivot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9910202, "supported_languages": null }, "macro.dbt_utils.default__pivot": { "name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n values,\n alias=True,\n agg='sum',\n cmp='=',\n prefix='',\n suffix='',\n then_value=1,\n else_value=0,\n quote_identifiers=True,\n distinct=False) %}\n {% for value in values %}\n {{ agg }}(\n {% if distinct %} distinct {% endif %}\n case\n when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n then {{ then_value }}\n else {{ else_value }}\n end\n )\n {% if alias %}\n {% if quote_identifiers %}\n as {{ adapter.quote(prefix ~ value ~ suffix) }}\n {% else %}\n as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n {% endif %}\n {% endif %}\n {% if not loop.last %},{% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9927797, "supported_languages": null }, "macro.dbt_utils.get_filtered_columns_in_relation": { "name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_filtered_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9936676, "supported_languages": null }, "macro.dbt_utils.default__get_filtered_columns_in_relation": { "name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {{ return('') }}\n {% endif %}\n\n {%- set include_cols = [] %}\n {%- set cols = adapter.get_columns_in_relation(from) -%}\n {%- set except = except | map(\"lower\") | list %}\n {%- for col in cols -%}\n {%- if col.column|lower not in except -%}\n {% do include_cols.append(col.column) %}\n {%- endif %}\n {%- endfor %}\n\n {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.9951994, "supported_languages": null }, "macro.dbt_utils.deduplicate": { "name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n {%- endset -%}\n\n {% if kwargs.get('group_by') %}\n {%- do exceptions.warn(error_message_group_by) -%}\n {%- endif -%}\n\n {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n {%- endset -%}\n\n {% if not order_by %}\n {%- do exceptions.warn(error_message_order_by) -%}\n {%- endif -%}\n\n {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n {%- endset -%}\n\n {% if relation_alias %}\n {%- do exceptions.warn(error_message_alias) -%}\n {%- endif -%}\n\n {% set partition_by = partition_by or kwargs.get('group_by') %}\n {% set relation = relation_alias or relation %}\n {% set order_by = order_by or \"'1'\" %}\n\n {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__deduplicate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283571.999483, "supported_languages": null }, "macro.dbt_utils.default__deduplicate": { "name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n with row_numbered as (\n select\n _inner.*,\n row_number() over (\n partition by {{ partition_by }}\n order by {{ order_by }}\n ) as rn\n from {{ relation }} as _inner\n )\n\n select\n distinct data.*\n from {{ relation }} as data\n {#\n -- Not all DBs will support natural joins but the ones that do include:\n -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n -- Apache Spark, SingleStore, Vertica\n -- Those that do not appear to support natural joins include:\n -- SQLServer, Trino, Presto, Rockset, Athena\n #}\n natural join row_numbered\n where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.000097, "supported_languages": null }, "macro.dbt_utils.redshift__deduplicate": { "name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__deduplicate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.000528, "supported_languages": null }, "macro.dbt_utils.postgres__deduplicate": { "name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n select\n distinct on ({{ partition_by }}) *\n from {{ relation }}\n order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0009453, "supported_languages": null }, "macro.dbt_utils.snowflake__deduplicate": { "name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n select *\n from {{ relation }}\n qualify\n row_number() over (\n partition by {{ partition_by }}\n order by {{ order_by }}\n ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.001316, "supported_languages": null }, "macro.dbt_utils.bigquery__deduplicate": { "name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n select unique.*\n from (\n select\n array_agg (\n original\n order by {{ order_by }}\n limit 1\n )[offset(0)] unique\n from {{ relation }} original\n group by {{ partition_by }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.001694, "supported_languages": null }, "macro.dbt_utils.surrogate_key": { "name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n {# needed for safe_add to allow for non-keyword arguments see SO post #}\n {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n {% set frustrating_jinja_feature = varargs %}\n {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__surrogate_key" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0028133, "supported_languages": null }, "macro.dbt_utils.default__surrogate_key": { "name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n {%- set _ = fields.append(\n \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n ) -%}\n\n {%- if not loop.last %}\n {%- set _ = fields.append(\"'-'\") -%}\n {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0047753, "supported_languages": null }, "macro.dbt_utils.get_query_results_as_dict": { "name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_query_results_as_dict" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.005537, "supported_languages": null }, "macro.dbt_utils.default__get_query_results_as_dict": { "name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n {{ query }}\n\n {%- endcall -%}\n\n {% set sql_results={} %}\n\n {%- if execute -%}\n {% set sql_results_table = load_result('get_query_results').table.columns %}\n {% for column_name, column in sql_results_table.items() %}\n {% do sql_results.update({column_name: column.values()}) %}\n {% endfor %}\n {%- endif -%}\n\n {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0068212, "supported_languages": null }, "macro.dbt_utils.degrees_to_radians": { "name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n acos(-1) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{degrees}} / 180\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0085902, "supported_languages": null }, "macro.dbt_utils.haversine_distance": { "name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__haversine_distance" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0091698, "supported_languages": null }, "macro.dbt_utils.default__haversine_distance": { "name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n {% set conversion_rate = 1.60934 %}\n{% else %}\n {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3961 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n cos(radians({{lat1}})) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests cos(radians({{lat2}})) *\n power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0103521, "supported_languages": null }, "macro.dbt_utils.bigquery__haversine_distance": { "name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n {% set conversion_rate = 1.60934 %}\n{% else %}\n {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3961 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n cos({{ radians_lat1 }}) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests cos({{ radians_lat2 }}) *\n power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.degrees_to_radians" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0120234, "supported_languages": null }, "macro.dbt_utils.nullcheck_table": { "name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__nullcheck_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.012669, "supported_languages": null }, "macro.dbt_utils.default__nullcheck_table": { "name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n {% set cols = adapter.get_columns_in_relation(relation) %}\n\n select {{ dbt_utils.nullcheck(cols) }}\n from {{relation}}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0133867, "supported_languages": null }, "macro.dbt_utils.get_relations_by_pattern": { "name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_relations_by_pattern" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0146291, "supported_languages": null }, "macro.dbt_utils.default__get_relations_by_pattern": { "name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n {%- call statement('get_tables', fetch_result=True) %}\n\n {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n {%- endcall -%}\n\n {%- set table_list = load_result('get_tables') -%}\n\n {%- if table_list and table_list['table'] -%}\n {%- set tbl_relations = [] -%}\n {%- for row in table_list['table'] -%}\n {%- set tbl_relation = api.Relation.create(\n database=database,\n schema=row.table_schema,\n identifier=row.table_name,\n type=row.table_type\n ) -%}\n {%- do tbl_relations.append(tbl_relation) -%}\n {%- endfor -%}\n\n {{ return(tbl_relations) }}\n {%- else -%}\n {{ return([]) }}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0163796, "supported_languages": null }, "macro.dbt_utils.nullcheck": { "name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__nullcheck" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.017069, "supported_languages": null }, "macro.dbt_utils.default__nullcheck": { "name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n {% if col.is_string() -%}\n\n nullif({{col.name}},'') as {{col.name}}\n\n {%- else -%}\n\n {{col.name}}\n\n {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.017793, "supported_languages": null }, "macro.dbt_utils.unpivot": { "name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__unpivot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0207086, "supported_languages": null }, "macro.dbt_utils.default__unpivot": { "name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n {% if table %}\n {%- set error_message = '\n Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n The {}.{} model triggered this warning. \\\n '.format(model.package_name, model.name) -%}\n {%- do exceptions.warn(error_message) -%}\n {% endif %}\n\n {% if relation and table %}\n {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n {% elif not relation and table %}\n {% set relation=table %}\n {% elif not relation and not table %}\n {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n {% endif %}\n\n {%- set exclude = exclude if exclude is not none else [] %}\n {%- set remove = remove if remove is not none else [] %}\n\n {%- set include_cols = [] %}\n\n {%- set table_columns = {} %}\n\n {%- do table_columns.update({relation: []}) %}\n\n {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n {%- for col in cols -%}\n {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n {% do include_cols.append(col) %}\n {%- endif %}\n {%- endfor %}\n\n\n {%- for col in include_cols -%}\n select\n {%- for exclude_col in exclude %}\n {{ exclude_col }},\n {%- endfor %}\n\n cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n cast( {% if col.data_type == 'boolean' %}\n {{ dbt_utils.cast_bool_to_text(col.column) }}\n {% else %}\n {{ col.column }}\n {% endif %}\n as {{ cast_to }}) as {{ value_name }}\n\n from {{ relation }}\n\n {% if not loop.last -%}\n union all\n {% endif -%}\n {%- endfor -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0250306, "supported_languages": null }, "macro.dbt_utils.get_column_values": { "name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_column_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0269613, "supported_languages": null }, "macro.dbt_utils.default__get_column_values": { "name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {% set default = [] if not default %}\n {{ return(default) }}\n {% endif %}\n\n {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n {# TODO: Change the method signature in a future 0.x.0 release #}\n {%- set target_relation = table -%}\n\n {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n {%- call statement('get_column_values', fetch_result=true) %}\n\n {%- if not relation_exists and default is none -%}\n\n {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n {%- elif not relation_exists and default is not none -%}\n\n {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n {{ return(default) }}\n\n {%- else -%}\n\n\n select\n {{ column }} as value\n\n from {{ target_relation }}\n\n {% if where is not none %}\n where {{ where }}\n {% endif %}\n\n group by {{ column }}\n order by {{ order_by }}\n\n {% if max_records is not none %}\n limit {{ max_records }}\n {% endif %}\n\n {% endif %}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('get_column_values') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values) }}\n {%- else -%}\n {{ return(default) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.030079, "supported_languages": null }, "macro.dbt_utils.union_relations": { "name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__union_relations" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0341032, "supported_languages": null }, "macro.dbt_utils.default__union_relations": { "name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n {%- if exclude and include -%}\n {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n {%- endif -%}\n\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n {%- if not execute %}\n {{ return('') }}\n {% endif -%}\n\n {%- set column_override = column_override if column_override is not none else {} -%}\n\n {%- set relation_columns = {} -%}\n {%- set column_superset = {} -%}\n\n {%- for relation in relations -%}\n\n {%- do relation_columns.update({relation: []}) -%}\n\n {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n {%- set cols = adapter.get_columns_in_relation(relation) -%}\n {%- for col in cols -%}\n\n {#- If an exclude list was provided and the column is in the list, do nothing -#}\n {%- if exclude and col.column in exclude -%}\n\n {#- If an include list was provided and the column is not in the list, do nothing -#}\n {%- elif include and col.column not in include -%}\n\n {#- Otherwise add the column to the column superset -#}\n {%- else -%}\n\n {#- update the list of columns in this relation -#}\n {%- do relation_columns[relation].append(col.column) -%}\n\n {%- if col.column in column_superset -%}\n\n {%- set stored = column_superset[col.column] -%}\n {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n {%- do column_superset.update({col.column: col}) -%}\n\n {%- endif %}\n\n {%- else -%}\n\n {%- do column_superset.update({col.column: col}) -%}\n\n {%- endif -%}\n\n {%- endif -%}\n\n {%- endfor -%}\n {%- endfor -%}\n\n {%- set ordered_column_names = column_superset.keys() -%}\n {%- set dbt_command = flags.WHICH -%}\n\n\n {% if dbt_command in ['run', 'build'] %}\n {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n {%- set relations_string -%}\n {%- for relation in relations -%}\n {{ relation.name }}\n {%- if not loop.last %}, {% endif -%}\n {%- endfor -%}\n {%- endset -%}\n\n {%- set error_message -%}\n There were no columns found to union for relations {{ relations_string }}\n {%- endset -%}\n\n {{ exceptions.raise_compiler_error(error_message) }}\n {%- endif -%}\n {%- endif -%}\n\n {%- for relation in relations %}\n\n (\n select\n\n cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n {% for col_name in ordered_column_names -%}\n\n {%- set col = column_superset[col_name] %}\n {%- set col_type = column_override.get(col.column, col.data_type) %}\n {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n {%- endfor %}\n\n from {{ relation }}\n\n {% if where -%}\n where {{ where }}\n {%- endif %}\n )\n\n {% if not loop.last -%}\n union all\n {% endif -%}\n\n {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0402906, "supported_languages": null }, "macro.dbt_external_tables.create_external_table": { "name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__create_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.040879, "supported_languages": null }, "macro.dbt_external_tables.default__create_external_table": { "name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0411782, "supported_languages": null }, "macro.dbt_external_tables.stage_external_sources": { "name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n {% set sources_to_stage = [] %}\n \n {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n \n {% for node in source_nodes %}\n {% if node.external %}\n \n {% if select %}\n \n {% for src in select.split(' ') %}\n \n {% if '.' in src %}\n {% set src_s = src.split('.') %}\n {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n {% do sources_to_stage.append(node) %}\n {% endif %}\n {% else %}\n {% if src == node.source_name %}\n {% do sources_to_stage.append(node) %}\n {% endif %}\n {% endif %}\n \n {% endfor %}\n \n {% else %}\n \n {% do sources_to_stage.append(node) %}\n \n {% endif %}\n {% endif %}\n \n {% endfor %}\n \n {% if sources_to_stage|length == 0 %}\n {% do log('No external sources selected', info = true) %}\n {% endif %}\n \n {% for node in sources_to_stage %}\n\n {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n \n {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n \n {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n {% set width = flags.PRINTER_WIDTH %}\n \n {% for q in run_queue %}\n \n {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n {% set q_log = q_msg[:width] ~ '... ' if q_msg|length > width else q_msg %}\n \n {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n {% set exit_txn = dbt_external_tables.exit_transaction() %}\n \n {% call statement('runner', fetch_result = True, auto_begin = False) %}\n {{ exit_txn }} {{ q }}\n {% endcall %}\n \n {% set runner = load_result('runner') %}\n {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n \n {% endfor %}\n \n {% endfor %}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.050276, "supported_languages": null }, "macro.dbt_external_tables.get_external_build_plan": { "name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__get_external_build_plan" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0508928, "supported_languages": null }, "macro.dbt_external_tables.default__get_external_build_plan": { "name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0511897, "supported_languages": null }, "macro.dbt_external_tables.refresh_external_table": { "name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0517197, "supported_languages": null }, "macro.dbt_external_tables.default__refresh_external_table": { "name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n {% do return([]) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.05202, "supported_languages": null }, "macro.dbt_external_tables.dropif": { "name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.default__dropif" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0525386, "supported_languages": null }, "macro.dbt_external_tables.default__dropif": { "name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n {{ exceptions.raise_compiler_error(\n \"Dropping external tables is not implemented for the default adapter\"\n ) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0528207, "supported_languages": null }, "macro.dbt_external_tables.exit_transaction": { "name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.default__exit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0533159, "supported_languages": null }, "macro.dbt_external_tables.default__exit_transaction": { "name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n {{ return('') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0535705, "supported_languages": null }, "macro.dbt_external_tables.redshift__create_external_table": { "name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n create external table {{source(source_node.source_name, source_node.name)}} (\n {% for column in columns %}\n {{adapter.quote(column.name)}} {{column.data_type}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n {% if partitions -%} partitioned by (\n {%- for partition in partitions -%}\n {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n {%- endfor -%}\n ) {%- endif %}\n {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n {% if external.location -%} location '{{external.location}}' {%- endif %}\n {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0564175, "supported_languages": null }, "macro.dbt_external_tables.redshift__get_external_build_plan": { "name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n \n {% if create_or_replace %}\n\n {% set build_plan = [\n dbt_external_tables.dropif(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] + dbt_external_tables.refresh_external_table(source_node) \n %}\n \n {% else %}\n \n {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n \n {% endif %}\n \n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0579677, "supported_languages": null }, "macro.dbt_external_tables.redshift__refresh_external_table": { "name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n {%- if partitions -%}\n \n {%- set part_len = partitions|length -%}\n \n {%- set get_partitions_sql -%}\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from\n \n {%- for partition in partitions %} (\n \n {%- set part_num = loop.index -%}\n \n {%- if partition.vals.macro -%}\n {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n {%- elif partition.vals is string -%}\n {%- set vals = [partition.vals] -%}\n {%- else -%}\n {%- set vals = partition.vals -%}\n {%- endif -%}\n \n {%- for val in vals %}\n \n select\n '\"{{ partition.name }}\"' as name_{{ part_num }},\n '\"{{ val }}\"' as val_{{ part_num }},\n '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n \n {{ 'union all' if not loop.last else ') ' }}\n \n {%- endfor -%}\n \n {{ 'cross join' if not loop.last }}\n \n {%- endfor -%}\n \n {%- endset -%}\n \n {%- set finals = [] -%}\n \n {%- if execute -%}\n {%- set results = run_query(get_partitions_sql) -%}\n {%- for row in results -%}\n \n {%- set partition_parts = [] -%}\n {%- set path_parts = [] -%}\n \n {%- for i in range(0, part_len) -%}\n {%- do partition_parts.append({\n 'name': row[i README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3][1:-1],\n 'value': row[i README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3 + 1][1:-1]\n }) -%}\n {%- do path_parts.append(row[i README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3 + 2][1:-1]) -%}\n {%- endfor -%}\n \n {%- set construct = {\n 'partition_by': partition_parts,\n 'path': path_parts | join('/')\n } -%}\n \n {% do finals.append(construct) %}\n {%- endfor -%}\n {%- endif -%}\n \n {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n {{ return(ddl) }}\n \n {% else %}\n \n {% do return([]) %}\n \n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0661156, "supported_languages": null }, "macro.dbt_external_tables.redshift__dropif": { "name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n \n {% set ddl %}\n drop table if exists {{source(node.source_name, node.name)}} cascade\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0667992, "supported_languages": null }, "macro.dbt_external_tables.redshift__exit_transaction": { "name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0671415, "supported_languages": null }, "macro.dbt_external_tables.year_month_day": { "name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n {% set path = value.replace('-','/') %}\n {{return(path)}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0678198, "supported_languages": null }, "macro.dbt_external_tables.key_value": { "name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n {% set path = name ~ '=' ~ value %}\n {{return(path)}}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0682378, "supported_languages": null }, "macro.dbt_external_tables.value_only": { "name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n {% set path = value %}\n {{return(path)}}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.068604, "supported_languages": null }, "macro.dbt_external_tables.redshift_alter_table_add_partitions": { "name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n {{ log(\"Generating ADD PARTITION statement for partition set between \" \n ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n {% set ddl = [] %}\n \n {% if partitions|length > 0 %}\n \n {% set alter_table_add %}\n alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n {% endset %}\n \n {%- set alters -%}\n\n {{ alter_table_add }}\n\n {%- for partition in partitions -%}\n\n {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n ; {{ alter_table_add }}\n\n {%- endif -%}\n\n partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n {% endfor -%}\n \n {%- endset -%}\n \n {% set ddl = ddl + alters.split(';') %}\n\n {% else %}\n\n {{ log(\"No partitions to be added\") }}\n\n {% endif %}\n \n {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0717893, "supported_languages": null }, "macro.dbt_external_tables.render_from_context": { "name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n {% if '.' in name %}\n {% set package_name, name = name.split(\".\", 1) %}\n {% else %}\n {% set package_name = none %}\n {% endif %}\n\n {% if package_name is none %}\n {% set package_context = context %}\n {% elif package_name in context %}\n {% set package_context = context[package_name] %}\n {% else %}\n {% set error_msg %}\n Could not find package '{{package_name}}', called by macro '{{original_name}}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n \n {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.074012, "supported_languages": null }, "macro.dbt_external_tables.redshift_is_ext_tbl": { "name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n {% set existing_relation = load_relation(node) %}\n \n {# external tables don't appear in information_schema.tables,\n so dbt doesn't cache them #}\n {% if existing_relation is none %}\n\n {% set find_ext_tbl %}\n \n select count(*) from svv_external_tables\n where schemaname = '{{node.schema}}'\n and tablename = '{{node.identifier}}'\n \n {% endset %}\n \n {% if execute %}\n {% set result = run_query(find_ext_tbl)[0][0] %}\n {% else %}\n {% set result = 0 %}\n {% endif %}\n\n {% set is_ext_tbl = (result > 0) %}\n {% do return(is_ext_tbl) %}\n \n {% else %}\n \n {% do return(false) %}\n \n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_relation", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0759525, "supported_languages": null }, "macro.dbt_external_tables.bigquery__create_external_table": { "name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set options = external.options -%}\n \n {%- set uris = [] -%}\n {%- if options is mapping and options.get('uris', none) -%}\n {%- set uris = external.options.get('uris') -%}\n {%- else -%}\n {%- set uris = [external.location] -%}\n {%- endif -%}\n\n create or replace external table {{source(source_node.source_name, source_node.name)}}\n {%- if columns -%}(\n {% for column in columns %}\n {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n {%- endfor -%}\n )\n {% endif %}\n {% if options and options.get('hive_partition_uri_prefix', none) %}\n with partition columns {%- if partitions %} (\n {%- for partition in partitions %}\n {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n {%- endfor -%}\n ) {% endif -%}\n {% endif %}\n options (\n uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n {%- if options is mapping -%}\n {%- for key, value in options.items() if key != 'uris' %}\n {%- if value is string -%}\n , {{key}} = '{{value}}'\n {%- else -%}\n , {{key}} = {{value}}\n {%- endif -%}\n {%- endfor -%}\n {%- endif -%}\n )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0809674, "supported_languages": null }, "macro.dbt_external_tables.bigquery__get_external_build_plan": { "name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n \n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.082762, "supported_languages": null }, "macro.dbt_external_tables.snowflake__create_external_table": { "name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n\n {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n create or replace external table {{source(source_node.source_name, source_node.name)}}\n {%- if columns or partitions -%}\n (\n {%- if partitions -%}{%- for partition in partitions %}\n {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n {%- endfor -%}{%- endif -%}\n {%- for column in columns %}\n {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n {%- set col_expression -%}\n {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n {%- endset %}\n {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n {%- endif -%}\n {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n location = {{external.location}} {# stage #}\n {% if external.auto_refresh in (true, false) -%}\n auto_refresh = {{external.auto_refresh}}\n {%- endif %}\n {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n file_format = {{external.file_format}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.is_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.087372, "supported_languages": null }, "macro.dbt_external_tables.snowflake__get_external_build_plan": { "name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n \n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if source_node.external.get('snowpipe', none) is not none %}\n \n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.snowflake_create_empty_table(source_node),\n dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n dbt_external_tables.snowflake_create_snowpipe(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n {% endif %}\n \n {% else %}\n \n {% if create_or_replace %}\n {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n \n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0904093, "supported_languages": null }, "macro.dbt_external_tables.snowflake__refresh_external_table": { "name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n {% set external = source_node.external %}\n {% set snowpipe = source_node.external.get('snowpipe', none) %}\n \n {% set auto_refresh = external.get('auto_refresh', false) %}\n {% set partitions = external.get('partitions', none) %}\n \n {% set manual_refresh = (partitions and not auto_refresh) %}\n \n {% if manual_refresh %}\n\n {% set ddl %}\n begin;\n alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n commit;\n {% endset %}\n \n {% do return([ddl]) %}\n \n {% else %}\n \n {% do return([]) %}\n \n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0931988, "supported_languages": null }, "macro.dbt_external_tables.is_csv": { "name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n {% if 'type=' in ff_ltrimmed %}\n \n {% if 'type=csv' in ff_ltrimmed %}\n\n {{return(true)}}\n\n {% else %}\n\n {{return(false)}}\n \n {% endif %}\n \n {% else %}\n \n {% set ff_standardized = ff_ltrimmed\n | replace('(','') | replace(')','')\n | replace('format_name=','') %}\n {% set fqn = ff_standardized.split('.') %}\n \n {% if fqn | length == 3 %}\n {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n {% elif fqn | length == 2 %}\n {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n {% else %}\n {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n {% endif %}\n \n {% call statement('get_file_format', fetch_result = True) %}\n show file formats in {{ff_database}}.{{ff_schema}}\n {% endcall %}\n \n {% set ffs = load_result('get_file_format').table %}\n \n {% for ff in ffs %}\n \n {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n \n {{return(true)}}\n \n {% endif %}\n \n {% endfor %}\n \n {{return(false)}} \n \n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.0989776, "supported_languages": null }, "macro.dbt_external_tables.snowflake_create_snowpipe": { "name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n {%- set external = source_node.external -%}\n {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n create or replace pipe {{source(source_node.source_name, source_node.name)}}\n {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake_get_copy_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1004176, "supported_languages": null }, "macro.dbt_external_tables.snowflake_refresh_snowpipe": { "name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n {% set snowpipe = source_node.external.snowpipe %}\n {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n \n {% if auto_ingest is true %}\n \n {% do return([]) %}\n \n {% else %}\n \n {% set ddl %}\n alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n {% endset %}\n \n {{ return([ddl]) }}\n \n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1018443, "supported_languages": null }, "macro.dbt_external_tables.snowflake_get_copy_sql": { "name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n \n {%- if explicit_transaction -%} begin; {%- endif %}\n \n copy into {{source(source_node.source_name, source_node.name)}}\n from ( \n select\n {% if columns|length == 0 %}\n $1::variant as value,\n {% else -%}\n {%- for column in columns -%}\n {%- set col_expression -%}\n {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n {%- endif -%}\n {%- endset -%}\n {{col_expression}}::{{column.data_type}} as {{column.name}},\n {% endfor -%}\n {% endif %}\n metadata$filename::varchar as metadata_filename,\n metadata$file_row_number::bigint as metadata_file_row_number,\n current_timestamp::timestamp as _dbt_copied_at\n from {{external.location}} {# stage #}\n )\n file_format = {{external.file_format}}\n {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n {% if copy_options %} {{copy_options}} {% endif %};\n \n {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.is_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1049087, "supported_languages": null }, "macro.dbt_external_tables.snowflake_create_empty_table": { "name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n {%- set columns = source_node.columns.values() %}\n\n create or replace table {{source(source_node.source_name, source_node.name)}} (\n {% if columns|length == 0 %}\n value variant,\n {% else -%}\n {%- for column in columns -%}\n {{column.name}} {{column.data_type}},\n {% endfor -%}\n {% endif %}\n metadata_filename varchar,\n metadata_file_row_number bigint,\n _dbt_copied_at timestamp\n );\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1061327, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__create_external_table": { "name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n\n {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n create external table {{source(source_node.source_name, source_node.name)}} (\n {% for column in columns %}\n {# TODO set nullity based on schema tests?? #}\n {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n WITH (\n {# remove keys that are None (i.e. not defined for a given source) #}\n {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n {{key}} = \n {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n '{{value}}'\n {% elif key in [\"data_source\",\"file_format\"] -%}\n [{{value}}]\n {% else -%}\n {{value}}\n {%- endif -%}\n {{- ',' if not loop.last -}}\n {%- endfor -%}\n )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1091561, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__get_external_build_plan": { "name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n\n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n\n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [ \n dbt_external_tables.dropif(source_node), \n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1109512, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__dropif": { "name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n \n {% set ddl %}\n if object_id ('{{source(node.source_name, node.name)}}') is not null\n begin\n drop external table {{source(node.source_name, node.name)}}\n end\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1118324, "supported_languages": null }, "macro.dbt_external_tables.spark__create_external_table": { "name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n create table {{source(source_node.source_name, source_node.name)}} \n {%- if columns|length > 0 %} (\n {% for column in columns %}\n {{column.name}} {{column.data_type}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n ) {% endif -%}\n {% if external.using %} using {{external.using}} {%- endif %}\n {% if options -%} options (\n {%- for key, value in options.items() -%}\n '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n {%- endfor -%}\n ) {%- endif %}\n {% if partitions -%} partitioned by (\n {%- for partition in partitions -%}\n {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n {%- endfor -%}\n ) {%- endif %}\n {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n {% if external.location -%} location '{{external.location}}' {%- endif %}\n {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1164424, "supported_languages": null }, "macro.dbt_external_tables.spark__get_external_build_plan": { "name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n\n {% set old_relation = adapter.get_relation(\n database = none,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n\n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.dropif(source_node), \n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n\n {% set recover_partitions = spark__recover_partitions(source_node) %}\n {% if recover_partitions|length > 0 %}\n {% set build_plan = build_plan + [\n recover_partitions\n ] %}\n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.118781, "supported_languages": null }, "macro.dbt_external_tables.spark__refresh_external_table": { "name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n \n {% set refresh %}\n refresh table {{source(source_node.source_name, source_node.name)}}\n {% endset %}\n \n {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.11949, "supported_languages": null }, "macro.dbt_external_tables.spark__dropif": { "name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n \n {% set ddl %}\n drop table if exists {{source(node.source_name, node.name)}}\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1201246, "supported_languages": null }, "macro.dbt_external_tables.spark__recover_partitions": { "name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n {% set ddl %}\n {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n {%- endif -%}\n {% endset %}\n\n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1211119, "supported_languages": null }, "macro.codegen.generate_base_model": { "name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n select\n {%- if leading_commas -%}\n {%- for column in column_names %}\n {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n {%- endfor %}\n {%- else -%}\n {%- for column in column_names %}\n {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n {%- endfor -%}\n {%- endif %}\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1247723, "supported_languages": null }, "macro.codegen.generate_column_yaml": { "name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n {% if parent_column_name %}\n {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n {% else %}\n {% set column_name = column.name %}\n {% endif %}\n\n {% do model_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% do model_yaml.append(' description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n {% do model_yaml.append('') %}\n\n {% if column.fields|length > 0 %}\n {% for child_column in column.fields %}\n {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n {% endfor %}\n {% endif %}\n {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.generate_column_yaml" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.127949, "supported_languages": null }, "macro.codegen.generate_model_yaml": { "name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name, upstream_descriptions=False) %}\n\n{% set model_yaml=[] %}\n{% set column_desc_dict = codegen.build_dict_column_descriptions(model_name) if upstream_descriptions else {} %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append(' - name: ' ~ model_name | lower) %}\n{% do model_yaml.append(' description: \"\"') %}\n{% do model_yaml.append(' columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = model_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1303906, "supported_languages": null }, "macro.codegen.get_tables_in_schema": { "name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n \n {% set tables=dbt_utils.get_relations_by_pattern(\n schema_pattern=schema_name,\n database=database_name,\n table_pattern=table_pattern,\n exclude=exclude\n ) %}\n\n {% set table_list= tables | map(attribute='identifier') %}\n\n {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_relations_by_pattern" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.13372, "supported_languages": null }, "macro.codegen.generate_source": { "name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append(' - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append(' database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append(' schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append(' tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n {% do sources_yaml.append(' - name: ' ~ table | lower ) %}\n {% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n {% endif %}\n {% if generate_columns %}\n {% do sources_yaml.append(' columns:') %}\n\n {% set table_relation=api.Relation.create(\n database=database_name,\n schema=schema_name,\n identifier=table\n ) %}\n\n {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n {% for column in columns %}\n {% do sources_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n {% endif %}\n {% endfor %}\n {% do sources_yaml.append('') %}\n\n {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = sources_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.get_tables_in_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.138543, "supported_languages": null }, "macro.codegen.get_model_dependencies": { "name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n {{ return(node.depends_on.nodes) }}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1396787, "supported_languages": null }, "macro.codegen.add_model_column_descriptions_to_dict": { "name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n {% for col_name, col_values in node.columns.items() %}\n {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n {% endfor %}\n {% endfor %}\n {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.140676, "supported_languages": null }, "macro.codegen.build_dict_column_descriptions": { "name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n {% if execute %}\n {% set glob_dict = {} %}\n {% for full_model in codegen.get_model_dependencies(model_name) %}\n {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n {% endfor %}\n {{ return(glob_dict) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1675283572.1415875, "supported_languages": null } }, "docs": { "doc.tpch.__dbt_utils__": { "name": "__dbt_utils__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__dbt_utils__", "block_contents": "# Utility macros\nThis package is maintained by dbt Labs.\n\nOur dbt project heavily uses this suite of utility macros, especially:\n- `surrogate_key`\n- `test_equality`\n- `pivot`\n\nfor more info, please check [dbt_utils](https://hub.getdbt.com/dbt-labs/dbt_utils/latest/)" }, "doc.tpch.__codegen__": { "name": "__codegen__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__codegen__", "block_contents": "# codegen\nThis package is maintained by dbt Labs.\n\nIt provides macros that are especially helpful in creating yml files and base models quickly.\n\nfor more info, please check [codgen](https://hub.getdbt.com/dbt-labs/codegen/latest/)" }, "doc.tpch.__snowflake_spend__": { "name": "__snowflake_spend__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__snowflake_spend__", "block_contents": "# snowflake_spend\nThis package is provided by the community -- created by gitlabhq. \n\nThe intent of this package is to understand the cost your Snowflake Data Warehouse is accruing\n\nfor more info, please check [snowflake_spend](https://hub.getdbt.com/gitlabhq/snowflake_spend/latest/)" }, "doc.tpch.__dbt_external_tables__": { "name": "__dbt_external_tables__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__dbt_external_tables__", "block_contents": "# dbt_external_tables\nThis package is maintained by dbt Labs.\n\nIt provides macros to create/replace external tables and refresh their partitions, using the metadata provided in your .yml file source definitions\n\nfor more info, please check [dbt_external_tables](https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/)" }, "doc.tpch.tpch_source": { "name": "tpch_source", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.tpch_source", "block_contents": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)" }, "doc.tpch.order_item_key": { "name": "order_item_key", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.order_item_key", "block_contents": "surrogate key for the model -- combo of order_key + line_number" }, "doc.tpch.line_number": { "name": "line_number", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.line_number", "block_contents": "sequence of the order items within the order" }, "doc.tpch.return_flag": { "name": "return_flag", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.return_flag", "block_contents": "letter determining the status of the return" }, "doc.tpch.ship_date": { "name": "ship_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.ship_date", "block_contents": "the date the order item is being shipped" }, "doc.tpch.commit_date": { "name": "commit_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.commit_date", "block_contents": "the date the order item is being commited" }, "doc.tpch.receipt_date": { "name": "receipt_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.receipt_date", "block_contents": "the receipt date of the order item" }, "doc.tpch.ship_mode": { "name": "ship_mode", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.ship_mode", "block_contents": "method of shipping" }, "doc.tpch.comment": { "name": "comment", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.comment", "block_contents": "additional commentary" }, "doc.tpch.extended_price": { "name": "extended_price", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.extended_price", "block_contents": "line item price" }, "doc.tpch.discount_percentage": { "name": "discount_percentage", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.discount_percentage", "block_contents": "percentage of the discount" }, "doc.tpch.supplier_name": { "name": "supplier_name", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.supplier_name", "block_contents": "id of the supplier" }, "doc.tpch.supplier_address": { "name": "supplier_address", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.supplier_address", "block_contents": "address of the supplier" }, "doc.tpch.phone_number": { "name": "phone_number", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.phone_number", "block_contents": "phone number of the supplier" }, "doc.tpch.account_balance": { "name": "account_balance", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.account_balance", "block_contents": "raw account balance" }, "doc.tpch.retail_price": { "name": "retail_price", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.retail_price", "block_contents": "raw retail price" }, "doc.tpch.available_quantity": { "name": "available_quantity", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.available_quantity", "block_contents": "raw available quantity" }, "doc.tpch.cost": { "name": "cost", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "unique_id": "doc.tpch.cost", "block_contents": "raw cost" }, "doc.tpch.base_price": { "name": "base_price", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.base_price", "block_contents": "since extended_price is the line item total, we back out the price per item" }, "doc.tpch.discounted_price": { "name": "discounted_price", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.discounted_price", "block_contents": "factoring in the discount_percentage, the line item discount total" }, "doc.tpch.tax_rate": { "name": "tax_rate", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.tax_rate", "block_contents": "tax rate of the order item" }, "doc.tpch.gross_item_sales_amount": { "name": "gross_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.gross_item_sales_amount", "block_contents": "same as extended_price" }, "doc.tpch.discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.discounted_item_sales_amount", "block_contents": "line item (includes quantity) discount amount" }, "doc.tpch.item_discount_amount": { "name": "item_discount_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.item_discount_amount", "block_contents": "item level discount amount. this is always a negative number" }, "doc.tpch.item_tax_amount": { "name": "item_tax_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.item_tax_amount", "block_contents": "item level tax total" }, "doc.tpch.net_item_sales_amount": { "name": "net_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.net_item_sales_amount", "block_contents": "the net total which factors in discount and tax" }, "doc.dbt.__overview__": { "name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion" } }, "exposures": { "exposure.tpch.sales_by_region": { "name": "sales_by_region", "resource_type": "exposure", "package_name": "tpch", "path": "marts/aggregates/exposures.yml", "original_file_path": "models/marts/aggregates/exposures.yml", "unique_id": "exposure.tpch.sales_by_region", "fqn": [ "tpch", "marts", "aggregates", "sales_by_region" ], "type": "dashboard", "owner": { "email": "doug.guthrie@dbtlabs.com", "name": "Doug Guthrie" }, "description": "# An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`\nItemized lists look like:\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests this one\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests that one\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests the other one\n", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "url": "https://10az.online.tableau.com/#/site/dbtlabspartner/views/SalesWorkbook/Dashboard1", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "created_at": 1675283574.7501335 } }, "metrics": { "metric.tpch.total_revenue": { "name": "total_revenue", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/metrics.yml", "original_file_path": "models/marts/core/metrics.yml", "unique_id": "metric.tpch.total_revenue", "fqn": [ "tpch", "marts", "core", "total_revenue" ], "description": "Total income from all orders", "label": "Total Revenue", "calculation_method": "sum", "expression": "gross_item_sales_amount", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "timestamp": "order_date", "window": null, "model": "ref('fct_order_items')", "model_unique_id": null, "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ [ "fct_order_items" ] ], "metrics": [], "created_at": 1675283574.6669211 }, "metric.tpch.total_customers": { "name": "total_customers", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/metrics.yml", "original_file_path": "models/marts/core/metrics.yml", "unique_id": "metric.tpch.total_customers", "fqn": [ "tpch", "marts", "core", "total_customers" ], "description": "Total customers with an order", "label": "Total Customers", "calculation_method": "count_distinct", "expression": "customer_key", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "timestamp": "order_date", "window": null, "model": "ref('fct_order_items')", "model_unique_id": null, "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ [ "fct_order_items" ] ], "metrics": [], "created_at": 1675283574.6746173 }, "metric.tpch.total_expenses": { "name": "total_expenses", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/metrics.yml", "original_file_path": "models/marts/core/metrics.yml", "unique_id": "metric.tpch.total_expenses", "fqn": [ "tpch", "marts", "core", "total_expenses" ], "description": "Total expenses from all orders", "label": "Total Expenses", "calculation_method": "sum", "expression": "supplier_cost", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "timestamp": "order_date", "window": null, "model": "ref('fct_order_items')", "model_unique_id": null, "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ [ "fct_order_items" ] ], "metrics": [], "created_at": 1675283574.682282 }, "metric.tpch.total_profit": { "name": "total_profit", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/metrics.yml", "original_file_path": "models/marts/core/metrics.yml", "unique_id": "metric.tpch.total_profit", "fqn": [ "tpch", "marts", "core", "total_profit" ], "description": "Total profit from all orders", "label": "Total Profit", "calculation_method": "derived", "expression": "total_revenue - total_expenses", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "timestamp": "order_date", "window": null, "model": null, "model_unique_id": null, "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "metric.tpch.total_revenue", "metric.tpch.total_expenses" ] }, "refs": [], "metrics": [ [ "total_revenue" ], [ "total_expenses" ] ], "created_at": 1675283574.6895041 }, "metric.tpch.average_revenue_per_customer": { "name": "average_revenue_per_customer", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/metrics.yml", "original_file_path": "models/marts/core/metrics.yml", "unique_id": "metric.tpch.average_revenue_per_customer", "fqn": [ "tpch", "marts", "core", "average_revenue_per_customer" ], "description": "The average revenue received per customer", "label": "Average Revenue Per Customer", "calculation_method": "derived", "expression": "total_revenue / total_customers", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "timestamp": "order_date", "window": null, "model": null, "model_unique_id": null, "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "metric.tpch.total_revenue", "metric.tpch.total_customers" ] }, "refs": [], "metrics": [ [ "total_revenue" ], [ "total_customers" ] ], "created_at": 1675283574.6968448 } }, "selectors": {}, "disabled": {}, "parent_map": { "model.tpch.get_area_of_circle": [], "model.tpch.materialization_incremental": [ "source.tpch.tpch.customer" ], "model.tpch.use_variables": [ "model.tpch.fct_order_items", "model.tpch.fct_order_items" ], "model.tpch.stg_yahooquery__link_clicked": [ "source.tpch.yahooquery.link_clicked" ], "model.tpch.stg_yahooquery__tracks": [ "source.tpch.yahooquery.tracks" ], "model.tpch.stg_yahooquery__pages": [ "source.tpch.yahooquery.pages" ], "model.tpch.stg_dbtc__tracks": [ "source.tpch.dbtc.tracks" ], "model.tpch.stg_dbtc__pages": [ "source.tpch.dbtc.pages" ], "model.tpch.stg_dbtc__link_clicked": [ "source.tpch.dbtc.link_clicked" ], "model.tpch.stg_tpch_orders": [ "source.tpch.tpch.orders" ], "model.tpch.stg_tpch_part_suppliers": [ "source.tpch.tpch.partsupp" ], "model.tpch.stg_tpch_suppliers": [ "source.tpch.tpch.supplier" ], "model.tpch.stg_tpch_line_items": [ "source.tpch.tpch.lineitem" ], "model.tpch.stg_tpch_customers": [ "source.tpch.tpch.customer" ], "model.tpch.stg_tpch_nations": [ "source.tpch.tpch.nation" ], "model.tpch.stg_tpch_parts": [ "source.tpch.tpch.part" ], "model.tpch.stg_tpch_regions": [ "source.tpch.tpch.region" ], "model.tpch.dim_customers": [ "model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ], "model.tpch.dim_suppliers": [ "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions", "model.tpch.stg_tpch_suppliers" ], "model.tpch.fct_order_items": [ "model.tpch.order_items", "model.tpch.part_suppliers" ], "model.tpch.fct_orders": [ "model.tpch.order_items", "model.tpch.stg_tpch_orders" ], "model.tpch.dim_parts": [ "model.tpch.stg_tpch_parts" ], "model.tpch.int_segment__link_clicked": [ "model.tpch.stg_dbtc__link_clicked", "model.tpch.stg_yahooquery__link_clicked" ], "model.tpch.int_segment__pages": [ "model.tpch.stg_dbtc__pages", "model.tpch.stg_yahooquery__pages" ], "model.tpch.int_segment__tracks": [ "model.tpch.stg_dbtc__tracks", "model.tpch.stg_yahooquery__tracks" ], "model.tpch.agg_ship_modes_dynamic_pivot": [ "model.tpch.fct_order_items" ], "model.tpch.agg_ship_modes_hardcoded_pivot": [ "model.tpch.fct_order_items" ], "model.tpch.order_items": [ "model.tpch.stg_tpch_line_items", "model.tpch.stg_tpch_orders" ], "model.tpch.part_suppliers": [ "model.tpch.stg_tpch_part_suppliers", "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers" ], "model.tpch.all_days": [], "model.tpch.fct_orders_stats": [ "model.tpch.fct_orders" ], "snapshot.tpch.tpch_supplier_snapshot": [ "source.tpch.tpch.supplier" ], "snapshot.tpch.tpch_part_snapshot": [ "source.tpch.tpch.part" ], "snapshot.tpch.tpch_customer_snapshot": [ "source.tpch.tpch.customer" ], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [ "model.tpch.stg_tpch_orders" ], "test.tpch.stg_tpch_orders_assert_positive_price": [ "model.tpch.stg_tpch_orders" ], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [ "model.tpch.stg_tpch_suppliers" ], "seed.tpch.country_codes": [], "seed.tpch.snowflake_contract_rates": [], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "model.elementary.alerts_anomaly_detection": [ "model.elementary.elementary_test_results" ], "model.elementary.alerts_schema_changes": [ "model.elementary.elementary_test_results" ], "model.elementary.alerts_dbt_tests": [ "model.elementary.elementary_test_results" ], "model.elementary.alerts_dbt_models": [ "model.elementary.model_run_results", "model.elementary.snapshot_run_results" ], "model.elementary.alerts_dbt_source_freshness": [ "model.elementary.dbt_source_freshness_results", "model.elementary.dbt_sources" ], "model.elementary.monitors_runs": [ "model.elementary.data_monitoring_metrics" ], "model.elementary.dbt_run_results": [], "model.elementary.dbt_metrics": [], "model.elementary.dbt_models": [], "model.elementary.dbt_exposures": [], "model.elementary.dbt_snapshots": [], "model.elementary.dbt_invocations": [], "model.elementary.dbt_sources": [], "model.elementary.dbt_tests": [], "model.elementary.schema_columns_snapshot": [], "model.elementary.metrics_anomaly_score": [ "model.elementary.data_monitoring_metrics" ], "model.elementary.anomaly_threshold_sensitivity": [ "model.elementary.metrics_anomaly_score" ], "model.elementary.data_monitoring_metrics": [], "model.elementary.elementary_test_results": [], "model.elementary.model_run_results": [ "model.elementary.dbt_models", "model.elementary.dbt_run_results" ], "model.elementary.snapshot_run_results": [ "model.elementary.dbt_run_results", "model.elementary.dbt_snapshots" ], "model.elementary.job_run_results": [ "model.elementary.dbt_invocations" ], "model.elementary.dbt_source_freshness_results": [], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "model.metrics.dbt_metrics_default_calendar": [], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [ "model.tpch.materialization_incremental" ], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [ "model.tpch.materialization_incremental" ], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [ "model.tpch.use_variables" ], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [ "model.tpch.use_variables" ], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [ "model.tpch.stg_tpch_customers" ], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [ "model.tpch.stg_tpch_customers" ], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [ "model.tpch.stg_tpch_line_items" ], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [ "model.tpch.stg_tpch_line_items" ], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [ "model.tpch.stg_tpch_nations" ], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [ "model.tpch.stg_tpch_nations" ], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [ "model.tpch.stg_tpch_orders" ], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [ "model.tpch.stg_tpch_orders" ], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [ "model.tpch.stg_tpch_part_suppliers" ], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [ "model.tpch.stg_tpch_part_suppliers" ], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [ "model.tpch.stg_tpch_parts" ], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [ "model.tpch.stg_tpch_parts" ], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [ "model.tpch.stg_tpch_regions" ], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [ "model.tpch.stg_tpch_regions" ], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [ "model.tpch.dim_customers" ], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [ "model.tpch.dim_customers" ], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [ "model.tpch.dim_customers" ], "test.tpch.unique_dim_parts_part_key.712df18d58": [ "model.tpch.dim_parts" ], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [ "model.tpch.dim_parts" ], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [ "model.tpch.dim_suppliers" ], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [ "model.tpch.dim_suppliers" ], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [ "model.tpch.fct_order_items" ], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [ "model.tpch.fct_order_items" ], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [ "model.tpch.fct_orders" ], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [ "model.tpch.fct_orders" ], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [ "model.tpch.dim_customers", "model.tpch.fct_orders" ], "test.tpch.unique_order_items_order_item_key.43a40b2837": [ "model.tpch.order_items" ], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [ "model.tpch.order_items" ], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [ "model.tpch.part_suppliers" ], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [ "model.tpch.part_suppliers" ], "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": [ "source.tpch.dbtc.pages" ], "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": [ "source.tpch.dbtc.pages" ], "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": [ "source.tpch.dbtc.pages" ], "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": [ "source.tpch.yahooquery.pages" ], "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": [ "source.tpch.yahooquery.pages" ], "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": [ "source.tpch.yahooquery.pages" ], "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [ "source.tpch.tpch.orders" ], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [ "source.tpch.tpch.orders" ], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [ "source.tpch.tpch.customer", "source.tpch.tpch.orders" ], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [ "source.tpch.tpch.customer" ], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [ "source.tpch.tpch.customer" ], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [ "source.tpch.tpch.customer", "source.tpch.tpch.nation" ], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.orders" ], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.part" ], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.supplier" ], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [ "source.tpch.tpch.nation" ], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [ "source.tpch.tpch.nation" ], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [ "source.tpch.tpch.nation", "source.tpch.tpch.region" ], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [ "source.tpch.tpch.part" ], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [ "source.tpch.tpch.part" ], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [ "source.tpch.tpch.part" ], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [ "source.tpch.tpch.part", "source.tpch.tpch.partsupp" ], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [ "source.tpch.tpch.partsupp", "source.tpch.tpch.supplier" ], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [ "source.tpch.tpch.region" ], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [ "source.tpch.tpch.region" ], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [ "source.tpch.tpch.region" ], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [ "source.tpch.tpch.supplier" ], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [ "source.tpch.tpch.supplier" ], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [ "source.tpch.tpch.nation", "source.tpch.tpch.supplier" ], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ], "source.tpch.deutsche_boerse.trading_data": [], "source.tpch.test_eqrx_s3.dummy_data": [], "source.tpch.dbtc.link_clicked": [], "source.tpch.dbtc.pages": [], "source.tpch.dbtc.tracks": [], "source.tpch.yahooquery.link_clicked": [], "source.tpch.yahooquery.pages": [], "source.tpch.yahooquery.tracks": [], "source.tpch.tpch.orders": [], "source.tpch.tpch.customer": [], "source.tpch.tpch.lineitem": [], "source.tpch.tpch.nation": [], "source.tpch.tpch.part": [], "source.tpch.tpch.partsupp": [], "source.tpch.tpch.region": [], "source.tpch.tpch.supplier": [], "source.tpch.tpch_snapshot.customer_snapshot_src": [], "exposure.tpch.sales_by_region": [ "model.tpch.fct_orders" ], "metric.tpch.total_revenue": [ "model.tpch.fct_order_items" ], "metric.tpch.total_customers": [ "model.tpch.fct_order_items" ], "metric.tpch.total_expenses": [ "model.tpch.fct_order_items" ], "metric.tpch.total_profit": [ "metric.tpch.total_expenses", "metric.tpch.total_revenue" ], "metric.tpch.average_revenue_per_customer": [ "metric.tpch.total_customers", "metric.tpch.total_revenue" ] }, "child_map": { "model.tpch.get_area_of_circle": [], "model.tpch.materialization_incremental": [ "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "test.tpch.unique_materialization_incremental_customer_key.325783f327" ], "model.tpch.use_variables": [ "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "test.tpch.unique_use_variables_order_item_key.fb5576fe0e" ], "model.tpch.stg_yahooquery__link_clicked": [ "model.tpch.int_segment__link_clicked" ], "model.tpch.stg_yahooquery__tracks": [ "model.tpch.int_segment__tracks" ], "model.tpch.stg_yahooquery__pages": [ "model.tpch.int_segment__pages" ], "model.tpch.stg_dbtc__tracks": [ "model.tpch.int_segment__tracks" ], "model.tpch.stg_dbtc__pages": [ "model.tpch.int_segment__pages" ], "model.tpch.stg_dbtc__link_clicked": [ "model.tpch.int_segment__link_clicked" ], "model.tpch.stg_tpch_orders": [ "model.tpch.fct_orders", "model.tpch.order_items", "test.tpch.macro_stg_tpch_orders_assert_pos_price", "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "test.tpch.stg_tpch_orders_assert_positive_price", "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9" ], "model.tpch.stg_tpch_part_suppliers": [ "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae" ], "model.tpch.stg_tpch_suppliers": [ "model.tpch.dim_suppliers", "model.tpch.part_suppliers", "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464" ], "model.tpch.stg_tpch_line_items": [ "model.tpch.order_items", "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a" ], "model.tpch.stg_tpch_customers": [ "model.tpch.dim_customers", "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4" ], "model.tpch.stg_tpch_nations": [ "model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d" ], "model.tpch.stg_tpch_parts": [ "model.tpch.dim_parts", "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489" ], "model.tpch.stg_tpch_regions": [ "model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5" ], "model.tpch.dim_customers": [ "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_dim_customers_customer_key.ad8156656e" ], "model.tpch.dim_suppliers": [ "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770" ], "model.tpch.fct_order_items": [ "metric.tpch.total_customers", "metric.tpch.total_expenses", "metric.tpch.total_revenue", "model.tpch.agg_ship_modes_dynamic_pivot", "model.tpch.agg_ship_modes_hardcoded_pivot", "model.tpch.use_variables", "model.tpch.use_variables", "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "test.tpch.unique_fct_order_items_order_item_key.4d6426a255" ], "model.tpch.fct_orders": [ "exposure.tpch.sales_by_region", "model.tpch.fct_orders_stats", "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_fct_orders_order_key.f5e7a90273" ], "model.tpch.dim_parts": [ "test.tpch.not_null_dim_parts_part_key.4358f880d9", "test.tpch.unique_dim_parts_part_key.712df18d58" ], "model.tpch.int_segment__link_clicked": [], "model.tpch.int_segment__pages": [], "model.tpch.int_segment__tracks": [], "model.tpch.agg_ship_modes_dynamic_pivot": [], "model.tpch.agg_ship_modes_hardcoded_pivot": [], "model.tpch.order_items": [ "model.tpch.fct_order_items", "model.tpch.fct_orders", "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "test.tpch.unique_order_items_order_item_key.43a40b2837" ], "model.tpch.part_suppliers": [ "model.tpch.fct_order_items", "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8" ], "model.tpch.all_days": [], "model.tpch.fct_orders_stats": [], "snapshot.tpch.tpch_supplier_snapshot": [], "snapshot.tpch.tpch_part_snapshot": [], "snapshot.tpch.tpch_customer_snapshot": [], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [], "test.tpch.stg_tpch_orders_assert_positive_price": [], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [], "seed.tpch.country_codes": [], "seed.tpch.snowflake_contract_rates": [], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "model.elementary.alerts_anomaly_detection": [], "model.elementary.alerts_schema_changes": [], "model.elementary.alerts_dbt_tests": [], "model.elementary.alerts_dbt_models": [], "model.elementary.alerts_dbt_source_freshness": [], "model.elementary.monitors_runs": [], "model.elementary.dbt_run_results": [ "model.elementary.model_run_results", "model.elementary.snapshot_run_results" ], "model.elementary.dbt_metrics": [], "model.elementary.dbt_models": [ "model.elementary.model_run_results" ], "model.elementary.dbt_exposures": [], "model.elementary.dbt_snapshots": [ "model.elementary.snapshot_run_results" ], "model.elementary.dbt_invocations": [ "model.elementary.job_run_results" ], "model.elementary.dbt_sources": [ "model.elementary.alerts_dbt_source_freshness" ], "model.elementary.dbt_tests": [], "model.elementary.schema_columns_snapshot": [], "model.elementary.metrics_anomaly_score": [ "model.elementary.anomaly_threshold_sensitivity" ], "model.elementary.anomaly_threshold_sensitivity": [], "model.elementary.data_monitoring_metrics": [ "model.elementary.metrics_anomaly_score", "model.elementary.monitors_runs" ], "model.elementary.elementary_test_results": [ "model.elementary.alerts_anomaly_detection", "model.elementary.alerts_dbt_tests", "model.elementary.alerts_schema_changes" ], "model.elementary.model_run_results": [ "model.elementary.alerts_dbt_models" ], "model.elementary.snapshot_run_results": [ "model.elementary.alerts_dbt_models" ], "model.elementary.job_run_results": [], "model.elementary.dbt_source_freshness_results": [ "model.elementary.alerts_dbt_source_freshness" ], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "model.metrics.dbt_metrics_default_calendar": [], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [], "test.tpch.unique_dim_parts_part_key.712df18d58": [], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [], "test.tpch.unique_order_items_order_item_key.43a40b2837": [], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [], "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": [], "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": [], "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": [], "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": [], "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": [], "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": [], "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": [], "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": [], "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": [], "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": [], "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": [], "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": [], "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": [], "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": [], "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": [], "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": [], "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": [], "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": [], "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": [], "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": [], "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": [], "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": [], "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": [], "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": [], "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": [], "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": [], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [], "source.tpch.deutsche_boerse.trading_data": [], "source.tpch.test_eqrx_s3.dummy_data": [], "source.tpch.dbtc.link_clicked": [ "model.tpch.stg_dbtc__link_clicked", "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6", "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa", "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4", "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9", "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc" ], "source.tpch.dbtc.pages": [ "model.tpch.stg_dbtc__pages", "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945", "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d", "test.tpch.source_unique_dbtc_pages_id.8457cf34c6" ], "source.tpch.dbtc.tracks": [ "model.tpch.stg_dbtc__tracks", "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274", "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56", "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6", "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804", "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628" ], "source.tpch.yahooquery.link_clicked": [ "model.tpch.stg_yahooquery__link_clicked", "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9", "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c", "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2", "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21", "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289" ], "source.tpch.yahooquery.pages": [ "model.tpch.stg_yahooquery__pages", "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5", "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee", "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d" ], "source.tpch.yahooquery.tracks": [ "model.tpch.stg_yahooquery__tracks", "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0", "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6", "test.tpch.source_not_null_yahooquery_tracks_id.621874b412", "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96", "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9" ], "source.tpch.tpch.orders": [ "model.tpch.stg_tpch_orders", "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2" ], "source.tpch.tpch.customer": [ "model.tpch.materialization_incremental", "model.tpch.stg_tpch_customers", "snapshot.tpch.tpch_customer_snapshot", "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25" ], "source.tpch.tpch.lineitem": [ "model.tpch.stg_tpch_line_items", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2" ], "source.tpch.tpch.nation": [ "model.tpch.stg_tpch_nations", "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064" ], "source.tpch.tpch.part": [ "model.tpch.stg_tpch_parts", "snapshot.tpch.tpch_part_snapshot", "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_unique_tpch_part_p_partkey.30b171988e" ], "source.tpch.tpch.partsupp": [ "model.tpch.stg_tpch_part_suppliers", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e" ], "source.tpch.tpch.region": [ "model.tpch.stg_tpch_regions", "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103" ], "source.tpch.tpch.supplier": [ "model.tpch.stg_tpch_suppliers", "snapshot.tpch.tpch_supplier_snapshot", "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370" ], "source.tpch.tpch_snapshot.customer_snapshot_src": [ "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e" ], "exposure.tpch.sales_by_region": [], "metric.tpch.total_revenue": [ "metric.tpch.average_revenue_per_customer", "metric.tpch.total_profit" ], "metric.tpch.total_customers": [ "metric.tpch.average_revenue_per_customer" ], "metric.tpch.total_expenses": [ "metric.tpch.total_profit" ], "metric.tpch.total_profit": [], "metric.tpch.average_revenue_per_customer": [] } }
